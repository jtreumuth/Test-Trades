// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_FILES_ORDER_SVC_HXX
#define CXX___SCHEMA_FILES_ORDER_SVC_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class CancelOrderRequest;
class CancelResponse;
class ChangeOrderBase;
class ChangeEquityOrderRequest;
class ResultBase;
class BasicOrderResponse;
class ChangeEquityOrderResponse;
class ChangeOptionOrderRequest;
class ChangeOptionOrderResponse;
class RequestBase;
class BasicOrderRequest;
class equityOrderRequest;
class equityOrderResponse;
class OrderAction;
class EquityOrderAction;
class PriceType;
class EquityPriceType;
class OrderRoutingDestination;
class EquityOrderRoutingDestination;
class OrderTerm;
class EquityOrderTerm;
class Month;
class OptionOrderRequest;
class OptionSymbol;
class OptionOrderResponse;
class OptionOrderAction;
class OptionPriceType;
class OptionOrderRoutingDestination;
class OptionOrderTerm;
class int_or_empty;
class empty_string;
class OrderListResponse;
class orderDetails;
class OrderDetails;
class GroupOrder;
class GroupOrderDetails;
class order;
class legDetails;
class LegDetails;
class SymbolInfo;
class integer_or_empty;
class SymbolBase;
class boolean_or_empty;
class MarketSession;
class OrderType;
class CallOrPut;
class ConditionType;
class ConditionFollowPrice;
class OrderStatus;
class ViewOrderType;
class ETAppMessages;
class ETMessages;
class ETAppMessagesWrapper;
class cancelOrder;
class CancelOrderResponse;
class previewChangeEquityOrder;
class placeChangeEquityOrder;
class priceType;
class orderTerm;
class PreviewChangeEquityOrderResponse;
class PlaceChangeEquityOrderResponse;
class previewChangeOptionOrder;
class placeChangeOptionOrder;
class priceType1;
class orderTerm1;
class PreviewChangeOptionOrderResponse;
class PlaceChangeOptionOrderResponse;
class routingDestination;
class PreviewEquityOrder;
class PreviewEquityOrderResponse;
class PlaceEquityOrder;
class PlaceEquityOrderResponse;
class routingDestination1;
class PreviewOptionOrder;
class PreviewOptionOrderResponse;
class PlaceOptionOrder;
class PlaceOptionOrderResponse;
class OrderListRequest;
class GetOrderListResponse;
class allOrNone;
class reserveOrder;
class allOrNone1;
class reserveOrder1;
class Error;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class CancelOrderRequest: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  static const accountId_type&
  accountId_default_value ();

  // orderNum
  // 
  typedef ::xml_schema::positive_integer orderNum_type;
  typedef ::xsd::cxx::tree::traits< orderNum_type, char > orderNum_traits;

  const orderNum_type&
  orderNum () const;

  orderNum_type&
  orderNum ();

  void
  orderNum (const orderNum_type& x);

  // Constructors.
  //
  CancelOrderRequest (const accountId_type&,
                      const orderNum_type&);

  CancelOrderRequest (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  CancelOrderRequest (const CancelOrderRequest& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual CancelOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CancelOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  static const accountId_type accountId_default_value_;
  ::xsd::cxx::tree::one< orderNum_type > orderNum_;
};

class CancelResponse: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  static const accountId_type&
  accountId_default_value ();

  // orderNum
  // 
  typedef ::xml_schema::integer orderNum_type;
  typedef ::xsd::cxx::tree::traits< orderNum_type, char > orderNum_traits;

  const orderNum_type&
  orderNum () const;

  orderNum_type&
  orderNum ();

  void
  orderNum (const orderNum_type& x);

  // cancelTime
  // 
  typedef ::xml_schema::long_ cancelTime_type;
  typedef ::xsd::cxx::tree::traits< cancelTime_type, char > cancelTime_traits;

  const cancelTime_type&
  cancelTime () const;

  cancelTime_type&
  cancelTime ();

  void
  cancelTime (const cancelTime_type& x);

  static cancelTime_type
  cancelTime_default_value ();

  // resultMessage
  // 
  typedef ::xml_schema::string resultMessage_type;
  typedef ::xsd::cxx::tree::traits< resultMessage_type, char > resultMessage_traits;

  const resultMessage_type&
  resultMessage () const;

  resultMessage_type&
  resultMessage ();

  void
  resultMessage (const resultMessage_type& x);

  void
  resultMessage (::std::auto_ptr< resultMessage_type > p);

  static const resultMessage_type&
  resultMessage_default_value ();

  // Constructors.
  //
  CancelResponse (const accountId_type&,
                  const orderNum_type&,
                  const cancelTime_type&,
                  const resultMessage_type&);

  CancelResponse (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CancelResponse (const CancelResponse& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual CancelResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CancelResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  static const accountId_type accountId_default_value_;
  ::xsd::cxx::tree::one< orderNum_type > orderNum_;
  ::xsd::cxx::tree::one< cancelTime_type > cancelTime_;
  ::xsd::cxx::tree::one< resultMessage_type > resultMessage_;
  static const resultMessage_type resultMessage_default_value_;
};

class ChangeOrderBase: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // orderNum
  // 
  typedef ::xml_schema::positive_integer orderNum_type;
  typedef ::xsd::cxx::tree::traits< orderNum_type, char > orderNum_traits;

  const orderNum_type&
  orderNum () const;

  orderNum_type&
  orderNum ();

  void
  orderNum (const orderNum_type& x);

  // clientOrderId
  // 
  typedef ::xml_schema::string clientOrderId_type;
  typedef ::xsd::cxx::tree::optional< clientOrderId_type > clientOrderId_optional;
  typedef ::xsd::cxx::tree::traits< clientOrderId_type, char > clientOrderId_traits;

  const clientOrderId_optional&
  clientOrderId () const;

  clientOrderId_optional&
  clientOrderId ();

  void
  clientOrderId (const clientOrderId_type& x);

  void
  clientOrderId (const clientOrderId_optional& x);

  void
  clientOrderId (::std::auto_ptr< clientOrderId_type > p);

  // limitPrice
  // 
  typedef ::xml_schema::decimal limitPrice_type;
  typedef ::xsd::cxx::tree::optional< limitPrice_type > limitPrice_optional;
  typedef ::xsd::cxx::tree::traits< limitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > limitPrice_traits;

  const limitPrice_optional&
  limitPrice () const;

  limitPrice_optional&
  limitPrice ();

  void
  limitPrice (const limitPrice_type& x);

  void
  limitPrice (const limitPrice_optional& x);

  // previewId
  // 
  typedef ::xml_schema::integer previewId_type;
  typedef ::xsd::cxx::tree::optional< previewId_type > previewId_optional;
  typedef ::xsd::cxx::tree::traits< previewId_type, char > previewId_traits;

  const previewId_optional&
  previewId () const;

  previewId_optional&
  previewId ();

  void
  previewId (const previewId_type& x);

  void
  previewId (const previewId_optional& x);

  // stopPrice
  // 
  typedef ::xml_schema::decimal stopPrice_type;
  typedef ::xsd::cxx::tree::optional< stopPrice_type > stopPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopPrice_traits;

  const stopPrice_optional&
  stopPrice () const;

  stopPrice_optional&
  stopPrice ();

  void
  stopPrice (const stopPrice_type& x);

  void
  stopPrice (const stopPrice_optional& x);

  // allOrNone
  // 
  typedef ::allOrNone1 allOrNone_type;
  typedef ::xsd::cxx::tree::optional< allOrNone_type > allOrNone_optional;
  typedef ::xsd::cxx::tree::traits< allOrNone_type, char > allOrNone_traits;

  const allOrNone_optional&
  allOrNone () const;

  allOrNone_optional&
  allOrNone ();

  void
  allOrNone (const allOrNone_type& x);

  void
  allOrNone (const allOrNone_optional& x);

  void
  allOrNone (::std::auto_ptr< allOrNone_type > p);

  // quantity
  // 
  typedef ::integer_or_empty quantity_type;
  typedef ::xsd::cxx::tree::optional< quantity_type > quantity_optional;
  typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

  const quantity_optional&
  quantity () const;

  quantity_optional&
  quantity ();

  void
  quantity (const quantity_type& x);

  void
  quantity (const quantity_optional& x);

  void
  quantity (::std::auto_ptr< quantity_type > p);

  // reserveOrder
  // 
  typedef ::reserveOrder1 reserveOrder_type;
  typedef ::xsd::cxx::tree::optional< reserveOrder_type > reserveOrder_optional;
  typedef ::xsd::cxx::tree::traits< reserveOrder_type, char > reserveOrder_traits;

  const reserveOrder_optional&
  reserveOrder () const;

  reserveOrder_optional&
  reserveOrder ();

  void
  reserveOrder (const reserveOrder_type& x);

  void
  reserveOrder (const reserveOrder_optional& x);

  void
  reserveOrder (::std::auto_ptr< reserveOrder_type > p);

  // reserveQuantity
  // 
  typedef ::xml_schema::positive_integer reserveQuantity_type;
  typedef ::xsd::cxx::tree::optional< reserveQuantity_type > reserveQuantity_optional;
  typedef ::xsd::cxx::tree::traits< reserveQuantity_type, char > reserveQuantity_traits;

  const reserveQuantity_optional&
  reserveQuantity () const;

  reserveQuantity_optional&
  reserveQuantity ();

  void
  reserveQuantity (const reserveQuantity_type& x);

  void
  reserveQuantity (const reserveQuantity_optional& x);

  // Constructors.
  //
  ChangeOrderBase (const accountId_type&,
                   const orderNum_type&);

  ChangeOrderBase (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ChangeOrderBase (const ChangeOrderBase& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ChangeOrderBase*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ChangeOrderBase ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  ::xsd::cxx::tree::one< orderNum_type > orderNum_;
  clientOrderId_optional clientOrderId_;
  limitPrice_optional limitPrice_;
  previewId_optional previewId_;
  stopPrice_optional stopPrice_;
  allOrNone_optional allOrNone_;
  quantity_optional quantity_;
  reserveOrder_optional reserveOrder_;
  reserveQuantity_optional reserveQuantity_;
};

class ChangeEquityOrderRequest: public ::ChangeOrderBase
{
  public:
  // priceType
  // 
  typedef ::priceType priceType_type;
  typedef ::xsd::cxx::tree::optional< priceType_type > priceType_optional;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_optional&
  priceType () const;

  priceType_optional&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (const priceType_optional& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // orderTerm
  // 
  typedef ::orderTerm orderTerm_type;
  typedef ::xsd::cxx::tree::optional< orderTerm_type > orderTerm_optional;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_optional&
  orderTerm () const;

  orderTerm_optional&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (const orderTerm_optional& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // Constructors.
  //
  ChangeEquityOrderRequest (const accountId_type&,
                            const orderNum_type&);

  ChangeEquityOrderRequest (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  ChangeEquityOrderRequest (const ChangeEquityOrderRequest& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual ChangeEquityOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ChangeEquityOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  priceType_optional priceType_;
  orderTerm_optional orderTerm_;
};

class ResultBase: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::optional< accountId_type > accountId_optional;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_optional&
  accountId () const;

  accountId_optional&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (const accountId_optional& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // Constructors.
  //
  ResultBase ();

  ResultBase (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  ResultBase (const ResultBase& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual ResultBase*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ResultBase ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  accountId_optional accountId_;
};

class BasicOrderResponse: public ::ResultBase
{
  public:
  // allOrNone
  // 
  typedef ::xml_schema::boolean allOrNone_type;
  typedef ::xsd::cxx::tree::optional< allOrNone_type > allOrNone_optional;
  typedef ::xsd::cxx::tree::traits< allOrNone_type, char > allOrNone_traits;

  const allOrNone_optional&
  allOrNone () const;

  allOrNone_optional&
  allOrNone ();

  void
  allOrNone (const allOrNone_type& x);

  void
  allOrNone (const allOrNone_optional& x);

  // estimatedCommission
  // 
  typedef ::xml_schema::decimal estimatedCommission_type;
  typedef ::xsd::cxx::tree::traits< estimatedCommission_type, char, ::xsd::cxx::tree::schema_type::decimal > estimatedCommission_traits;

  const estimatedCommission_type&
  estimatedCommission () const;

  estimatedCommission_type&
  estimatedCommission ();

  void
  estimatedCommission (const estimatedCommission_type& x);

  // estimatedTotalAmount
  // 
  typedef ::xml_schema::decimal estimatedTotalAmount_type;
  typedef ::xsd::cxx::tree::traits< estimatedTotalAmount_type, char, ::xsd::cxx::tree::schema_type::decimal > estimatedTotalAmount_traits;

  const estimatedTotalAmount_type&
  estimatedTotalAmount () const;

  estimatedTotalAmount_type&
  estimatedTotalAmount ();

  void
  estimatedTotalAmount (const estimatedTotalAmount_type& x);

  // messageList
  // 
  typedef ::ETAppMessagesWrapper messageList_type;
  typedef ::xsd::cxx::tree::sequence< messageList_type > messageList_sequence;
  typedef messageList_sequence::iterator messageList_iterator;
  typedef messageList_sequence::const_iterator messageList_const_iterator;
  typedef ::xsd::cxx::tree::traits< messageList_type, char > messageList_traits;

  const messageList_sequence&
  messageList () const;

  messageList_sequence&
  messageList ();

  void
  messageList (const messageList_sequence& s);

  // orderNum
  // 
  typedef ::xml_schema::integer orderNum_type;
  typedef ::xsd::cxx::tree::optional< orderNum_type > orderNum_optional;
  typedef ::xsd::cxx::tree::traits< orderNum_type, char > orderNum_traits;

  const orderNum_optional&
  orderNum () const;

  orderNum_optional&
  orderNum ();

  void
  orderNum (const orderNum_type& x);

  void
  orderNum (const orderNum_optional& x);

  // orderTime
  // 
  typedef ::xml_schema::long_ orderTime_type;
  typedef ::xsd::cxx::tree::optional< orderTime_type > orderTime_optional;
  typedef ::xsd::cxx::tree::traits< orderTime_type, char > orderTime_traits;

  const orderTime_optional&
  orderTime () const;

  orderTime_optional&
  orderTime ();

  void
  orderTime (const orderTime_type& x);

  void
  orderTime (const orderTime_optional& x);

  // previewTime
  // 
  typedef ::xml_schema::long_ previewTime_type;
  typedef ::xsd::cxx::tree::optional< previewTime_type > previewTime_optional;
  typedef ::xsd::cxx::tree::traits< previewTime_type, char > previewTime_traits;

  const previewTime_optional&
  previewTime () const;

  previewTime_optional&
  previewTime ();

  void
  previewTime (const previewTime_type& x);

  void
  previewTime (const previewTime_optional& x);

  // previewId
  // 
  typedef ::xml_schema::unsigned_long previewId_type;
  typedef ::xsd::cxx::tree::optional< previewId_type > previewId_optional;
  typedef ::xsd::cxx::tree::traits< previewId_type, char > previewId_traits;

  const previewId_optional&
  previewId () const;

  previewId_optional&
  previewId ();

  void
  previewId (const previewId_type& x);

  void
  previewId (const previewId_optional& x);

  // quantity
  // 
  typedef ::xml_schema::integer quantity_type;
  typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

  const quantity_type&
  quantity () const;

  quantity_type&
  quantity ();

  void
  quantity (const quantity_type& x);

  // reserveOrder
  // 
  typedef ::xml_schema::boolean reserveOrder_type;
  typedef ::xsd::cxx::tree::optional< reserveOrder_type > reserveOrder_optional;
  typedef ::xsd::cxx::tree::traits< reserveOrder_type, char > reserveOrder_traits;

  const reserveOrder_optional&
  reserveOrder () const;

  reserveOrder_optional&
  reserveOrder ();

  void
  reserveOrder (const reserveOrder_type& x);

  void
  reserveOrder (const reserveOrder_optional& x);

  // reserveQuantity
  // 
  typedef ::xml_schema::integer reserveQuantity_type;
  typedef ::xsd::cxx::tree::optional< reserveQuantity_type > reserveQuantity_optional;
  typedef ::xsd::cxx::tree::traits< reserveQuantity_type, char > reserveQuantity_traits;

  const reserveQuantity_optional&
  reserveQuantity () const;

  reserveQuantity_optional&
  reserveQuantity ();

  void
  reserveQuantity (const reserveQuantity_type& x);

  void
  reserveQuantity (const reserveQuantity_optional& x);

  // orderTerm
  // 
  typedef ::OrderTerm orderTerm_type;
  typedef ::xsd::cxx::tree::optional< orderTerm_type > orderTerm_optional;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_optional&
  orderTerm () const;

  orderTerm_optional&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (const orderTerm_optional& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // limitPrice
  // 
  typedef ::xml_schema::decimal limitPrice_type;
  typedef ::xsd::cxx::tree::optional< limitPrice_type > limitPrice_optional;
  typedef ::xsd::cxx::tree::traits< limitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > limitPrice_traits;

  const limitPrice_optional&
  limitPrice () const;

  limitPrice_optional&
  limitPrice ();

  void
  limitPrice (const limitPrice_type& x);

  void
  limitPrice (const limitPrice_optional& x);

  // stopPrice
  // 
  typedef ::xml_schema::decimal stopPrice_type;
  typedef ::xsd::cxx::tree::optional< stopPrice_type > stopPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopPrice_traits;

  const stopPrice_optional&
  stopPrice () const;

  stopPrice_optional&
  stopPrice ();

  void
  stopPrice (const stopPrice_type& x);

  void
  stopPrice (const stopPrice_optional& x);

  // routingDestination
  // 
  typedef ::OrderRoutingDestination routingDestination_type;
  typedef ::xsd::cxx::tree::optional< routingDestination_type > routingDestination_optional;
  typedef ::xsd::cxx::tree::traits< routingDestination_type, char > routingDestination_traits;

  const routingDestination_optional&
  routingDestination () const;

  routingDestination_optional&
  routingDestination ();

  void
  routingDestination (const routingDestination_type& x);

  void
  routingDestination (const routingDestination_optional& x);

  void
  routingDestination (::std::auto_ptr< routingDestination_type > p);

  // Constructors.
  //
  BasicOrderResponse (const estimatedCommission_type&,
                      const estimatedTotalAmount_type&,
                      const quantity_type&);

  BasicOrderResponse (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  BasicOrderResponse (const BasicOrderResponse& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual BasicOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BasicOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  allOrNone_optional allOrNone_;
  ::xsd::cxx::tree::one< estimatedCommission_type > estimatedCommission_;
  ::xsd::cxx::tree::one< estimatedTotalAmount_type > estimatedTotalAmount_;
  messageList_sequence messageList_;
  orderNum_optional orderNum_;
  orderTime_optional orderTime_;
  previewTime_optional previewTime_;
  previewId_optional previewId_;
  ::xsd::cxx::tree::one< quantity_type > quantity_;
  reserveOrder_optional reserveOrder_;
  reserveQuantity_optional reserveQuantity_;
  orderTerm_optional orderTerm_;
  limitPrice_optional limitPrice_;
  stopPrice_optional stopPrice_;
  routingDestination_optional routingDestination_;
};

class ChangeEquityOrderResponse: public ::BasicOrderResponse
{
  public:
  // symbolDesc
  // 
  typedef ::xml_schema::string symbolDesc_type;
  typedef ::xsd::cxx::tree::traits< symbolDesc_type, char > symbolDesc_traits;

  const symbolDesc_type&
  symbolDesc () const;

  symbolDesc_type&
  symbolDesc ();

  void
  symbolDesc (const symbolDesc_type& x);

  void
  symbolDesc (::std::auto_ptr< symbolDesc_type > p);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // orderAction
  // 
  typedef ::EquityOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::EquityPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // Constructors.
  //
  ChangeEquityOrderResponse (const estimatedCommission_type&,
                             const estimatedTotalAmount_type&,
                             const quantity_type&,
                             const symbolDesc_type&,
                             const symbol_type&,
                             const orderAction_type&,
                             const priceType_type&);

  ChangeEquityOrderResponse (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  ChangeEquityOrderResponse (const ChangeEquityOrderResponse& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual ChangeEquityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ChangeEquityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbolDesc_type > symbolDesc_;
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
};

class ChangeOptionOrderRequest: public ::ChangeOrderBase
{
  public:
  // stopLimitPrice
  // 
  typedef ::xml_schema::decimal stopLimitPrice_type;
  typedef ::xsd::cxx::tree::optional< stopLimitPrice_type > stopLimitPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopLimitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopLimitPrice_traits;

  const stopLimitPrice_optional&
  stopLimitPrice () const;

  stopLimitPrice_optional&
  stopLimitPrice ();

  void
  stopLimitPrice (const stopLimitPrice_type& x);

  void
  stopLimitPrice (const stopLimitPrice_optional& x);

  // priceType
  // 
  typedef ::priceType1 priceType_type;
  typedef ::xsd::cxx::tree::optional< priceType_type > priceType_optional;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_optional&
  priceType () const;

  priceType_optional&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (const priceType_optional& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // orderTerm
  // 
  typedef ::orderTerm1 orderTerm_type;
  typedef ::xsd::cxx::tree::optional< orderTerm_type > orderTerm_optional;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_optional&
  orderTerm () const;

  orderTerm_optional&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (const orderTerm_optional& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // Constructors.
  //
  ChangeOptionOrderRequest (const accountId_type&,
                            const orderNum_type&);

  ChangeOptionOrderRequest (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  ChangeOptionOrderRequest (const ChangeOptionOrderRequest& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual ChangeOptionOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ChangeOptionOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stopLimitPrice_optional stopLimitPrice_;
  priceType_optional priceType_;
  orderTerm_optional orderTerm_;
};

class ChangeOptionOrderResponse: public ::BasicOrderResponse
{
  public:
  // stopLimitPrice
  // 
  typedef ::xml_schema::decimal stopLimitPrice_type;
  typedef ::xsd::cxx::tree::optional< stopLimitPrice_type > stopLimitPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopLimitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopLimitPrice_traits;

  const stopLimitPrice_optional&
  stopLimitPrice () const;

  stopLimitPrice_optional&
  stopLimitPrice ();

  void
  stopLimitPrice (const stopLimitPrice_type& x);

  void
  stopLimitPrice (const stopLimitPrice_optional& x);

  // optionSymbol
  // 
  typedef ::OptionSymbol optionSymbol_type;
  typedef ::xsd::cxx::tree::traits< optionSymbol_type, char > optionSymbol_traits;

  const optionSymbol_type&
  optionSymbol () const;

  optionSymbol_type&
  optionSymbol ();

  void
  optionSymbol (const optionSymbol_type& x);

  void
  optionSymbol (::std::auto_ptr< optionSymbol_type > p);

  // orderAction
  // 
  typedef ::OptionOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::OptionPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // Constructors.
  //
  ChangeOptionOrderResponse (const estimatedCommission_type&,
                             const estimatedTotalAmount_type&,
                             const quantity_type&,
                             const optionSymbol_type&,
                             const orderAction_type&,
                             const priceType_type&);

  ChangeOptionOrderResponse (const estimatedCommission_type&,
                             const estimatedTotalAmount_type&,
                             const quantity_type&,
                             ::std::auto_ptr< optionSymbol_type >&,
                             const orderAction_type&,
                             const priceType_type&);

  ChangeOptionOrderResponse (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  ChangeOptionOrderResponse (const ChangeOptionOrderResponse& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual ChangeOptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ChangeOptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stopLimitPrice_optional stopLimitPrice_;
  ::xsd::cxx::tree::one< optionSymbol_type > optionSymbol_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
};

class RequestBase: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // clientOrderId
  // 
  typedef ::xml_schema::string clientOrderId_type;
  typedef ::xsd::cxx::tree::optional< clientOrderId_type > clientOrderId_optional;
  typedef ::xsd::cxx::tree::traits< clientOrderId_type, char > clientOrderId_traits;

  const clientOrderId_optional&
  clientOrderId () const;

  clientOrderId_optional&
  clientOrderId ();

  void
  clientOrderId (const clientOrderId_type& x);

  void
  clientOrderId (const clientOrderId_optional& x);

  void
  clientOrderId (::std::auto_ptr< clientOrderId_type > p);

  // limitPrice
  // 
  typedef ::xml_schema::decimal limitPrice_type;
  typedef ::xsd::cxx::tree::optional< limitPrice_type > limitPrice_optional;
  typedef ::xsd::cxx::tree::traits< limitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > limitPrice_traits;

  const limitPrice_optional&
  limitPrice () const;

  limitPrice_optional&
  limitPrice ();

  void
  limitPrice (const limitPrice_type& x);

  void
  limitPrice (const limitPrice_optional& x);

  // previewId
  // 
  typedef ::xml_schema::integer previewId_type;
  typedef ::xsd::cxx::tree::optional< previewId_type > previewId_optional;
  typedef ::xsd::cxx::tree::traits< previewId_type, char > previewId_traits;

  const previewId_optional&
  previewId () const;

  previewId_optional&
  previewId ();

  void
  previewId (const previewId_type& x);

  void
  previewId (const previewId_optional& x);

  // stopPrice
  // 
  typedef ::xml_schema::decimal stopPrice_type;
  typedef ::xsd::cxx::tree::optional< stopPrice_type > stopPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopPrice_traits;

  const stopPrice_optional&
  stopPrice () const;

  stopPrice_optional&
  stopPrice ();

  void
  stopPrice (const stopPrice_type& x);

  void
  stopPrice (const stopPrice_optional& x);

  // Constructors.
  //
  RequestBase (const accountId_type&);

  RequestBase (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  RequestBase (const RequestBase& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual RequestBase*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~RequestBase ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  clientOrderId_optional clientOrderId_;
  limitPrice_optional limitPrice_;
  previewId_optional previewId_;
  stopPrice_optional stopPrice_;
};

class BasicOrderRequest: public ::RequestBase
{
  public:
  // allOrNone
  // 
  typedef ::allOrNone allOrNone_type;
  typedef ::xsd::cxx::tree::optional< allOrNone_type > allOrNone_optional;
  typedef ::xsd::cxx::tree::traits< allOrNone_type, char > allOrNone_traits;

  const allOrNone_optional&
  allOrNone () const;

  allOrNone_optional&
  allOrNone ();

  void
  allOrNone (const allOrNone_type& x);

  void
  allOrNone (const allOrNone_optional& x);

  void
  allOrNone (::std::auto_ptr< allOrNone_type > p);

  // quantity
  // 
  typedef ::xml_schema::positive_integer quantity_type;
  typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

  const quantity_type&
  quantity () const;

  quantity_type&
  quantity ();

  void
  quantity (const quantity_type& x);

  // reserveOrder
  // 
  typedef ::reserveOrder reserveOrder_type;
  typedef ::xsd::cxx::tree::optional< reserveOrder_type > reserveOrder_optional;
  typedef ::xsd::cxx::tree::traits< reserveOrder_type, char > reserveOrder_traits;

  const reserveOrder_optional&
  reserveOrder () const;

  reserveOrder_optional&
  reserveOrder ();

  void
  reserveOrder (const reserveOrder_type& x);

  void
  reserveOrder (const reserveOrder_optional& x);

  void
  reserveOrder (::std::auto_ptr< reserveOrder_type > p);

  // reserveQuantity
  // 
  typedef ::xml_schema::positive_integer reserveQuantity_type;
  typedef ::xsd::cxx::tree::optional< reserveQuantity_type > reserveQuantity_optional;
  typedef ::xsd::cxx::tree::traits< reserveQuantity_type, char > reserveQuantity_traits;

  const reserveQuantity_optional&
  reserveQuantity () const;

  reserveQuantity_optional&
  reserveQuantity ();

  void
  reserveQuantity (const reserveQuantity_type& x);

  void
  reserveQuantity (const reserveQuantity_optional& x);

  // Constructors.
  //
  BasicOrderRequest (const accountId_type&,
                     const quantity_type&);

  BasicOrderRequest (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  BasicOrderRequest (const BasicOrderRequest& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual BasicOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~BasicOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  allOrNone_optional allOrNone_;
  ::xsd::cxx::tree::one< quantity_type > quantity_;
  reserveOrder_optional reserveOrder_;
  reserveQuantity_optional reserveQuantity_;
};

class equityOrderRequest: public ::BasicOrderRequest
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // orderAction
  // 
  typedef ::EquityOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::EquityPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // routingDestination
  // 
  typedef ::routingDestination routingDestination_type;
  typedef ::xsd::cxx::tree::optional< routingDestination_type > routingDestination_optional;
  typedef ::xsd::cxx::tree::traits< routingDestination_type, char > routingDestination_traits;

  const routingDestination_optional&
  routingDestination () const;

  routingDestination_optional&
  routingDestination ();

  void
  routingDestination (const routingDestination_type& x);

  void
  routingDestination (const routingDestination_optional& x);

  void
  routingDestination (::std::auto_ptr< routingDestination_type > p);

  // marketSession
  // 
  typedef ::MarketSession marketSession_type;
  typedef ::xsd::cxx::tree::traits< marketSession_type, char > marketSession_traits;

  const marketSession_type&
  marketSession () const;

  marketSession_type&
  marketSession ();

  void
  marketSession (const marketSession_type& x);

  void
  marketSession (::std::auto_ptr< marketSession_type > p);

  // orderTerm
  // 
  typedef ::EquityOrderTerm orderTerm_type;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_type&
  orderTerm () const;

  orderTerm_type&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // Constructors.
  //
  equityOrderRequest (const accountId_type&,
                      const quantity_type&,
                      const symbol_type&,
                      const orderAction_type&,
                      const priceType_type&,
                      const marketSession_type&,
                      const orderTerm_type&);

  equityOrderRequest (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  equityOrderRequest (const equityOrderRequest& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual equityOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~equityOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
  routingDestination_optional routingDestination_;
  ::xsd::cxx::tree::one< marketSession_type > marketSession_;
  ::xsd::cxx::tree::one< orderTerm_type > orderTerm_;
};

class equityOrderResponse: public ::BasicOrderResponse
{
  public:
  // symbolDesc
  // 
  typedef ::xml_schema::string symbolDesc_type;
  typedef ::xsd::cxx::tree::traits< symbolDesc_type, char > symbolDesc_traits;

  const symbolDesc_type&
  symbolDesc () const;

  symbolDesc_type&
  symbolDesc ();

  void
  symbolDesc (const symbolDesc_type& x);

  void
  symbolDesc (::std::auto_ptr< symbolDesc_type > p);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // orderAction
  // 
  typedef ::EquityOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::EquityPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // Constructors.
  //
  equityOrderResponse (const estimatedCommission_type&,
                       const estimatedTotalAmount_type&,
                       const quantity_type&,
                       const symbolDesc_type&,
                       const symbol_type&,
                       const orderAction_type&,
                       const priceType_type&);

  equityOrderResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  equityOrderResponse (const equityOrderResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual equityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~equityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbolDesc_type > symbolDesc_;
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
};

class OrderAction: public ::xml_schema::string
{
  public:
  enum value
  {
    BUY,
    SELL,
    BUY_TO_COVER,
    SELL_SHORT,
    BUY_OPEN,
    SELL_OPEN,
    BUY_CLOSE,
    SELL_CLOSE
  };

  OrderAction (value v);

  OrderAction (const char* v);

  OrderAction (const ::std::string& v);

  OrderAction (const ::xml_schema::string& v);

  OrderAction (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderAction (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderAction (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderAction (const OrderAction& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual OrderAction*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderAction&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderAction_convert ();
  }

  protected:
  value
  _xsd_OrderAction_convert () const;

  public:
  static const char* const _xsd_OrderAction_literals_[8];
  static const value _xsd_OrderAction_indexes_[8];
};

class EquityOrderAction: public ::OrderAction
{
  public:
  typedef ::OrderAction::value value;

  EquityOrderAction (value v);

  EquityOrderAction (const char* v);

  EquityOrderAction (const ::std::string& v);

  EquityOrderAction (const ::OrderAction& v);

  EquityOrderAction (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  EquityOrderAction (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  EquityOrderAction (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  EquityOrderAction (const EquityOrderAction& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual EquityOrderAction*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EquityOrderAction&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_EquityOrderAction_convert ();
  }

  protected:
  value
  _xsd_EquityOrderAction_convert () const;

  public:
  static const char* const* _xsd_EquityOrderAction_literals_;
  static const value _xsd_EquityOrderAction_indexes_[4];
};

class PriceType: public ::xml_schema::string
{
  public:
  enum value
  {
    MARKET,
    LIMIT,
    STOP,
    STOP_LIMIT,
    TRAILING_STOP_CNST_BY_LOWER_TRIGGER,
    UPPER_TRIGGER_BY_TRAILING_STOP_CNST,
    TRAILING_STOP_PRCT_BY_LOWER_TRIGGER,
    UPPER_TRIGGER_BY_TRAILING_STOP_PRCT,
    TRAILING_STOP_CNST,
    TRAILING_STOP_PRCT,
    HIDDEN_STOP,
    HIDDEN_STOP_BY_LOWER_TRIGGER,
    UPPER_TRIGGER_BY_HIDDEN_STOP,
    NET_DEBIT,
    NET_CREDIT,
    NET_EVEN,
    MARKET_ON_OPEN,
    MARKET_ON_CLOSE,
    LIMIT_ON_OPEN,
    LIMIT_ON_CLOSE
  };

  PriceType (value v);

  PriceType (const char* v);

  PriceType (const ::std::string& v);

  PriceType (const ::xml_schema::string& v);

  PriceType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PriceType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PriceType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PriceType (const PriceType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual PriceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PriceType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_PriceType_convert ();
  }

  protected:
  value
  _xsd_PriceType_convert () const;

  public:
  static const char* const _xsd_PriceType_literals_[20];
  static const value _xsd_PriceType_indexes_[20];
};

class EquityPriceType: public ::PriceType
{
  public:
  typedef ::PriceType::value value;

  EquityPriceType (value v);

  EquityPriceType (const char* v);

  EquityPriceType (const ::std::string& v);

  EquityPriceType (const ::PriceType& v);

  EquityPriceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityPriceType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityPriceType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityPriceType (const EquityPriceType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual EquityPriceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EquityPriceType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_EquityPriceType_convert ();
  }

  protected:
  value
  _xsd_EquityPriceType_convert () const;

  public:
  static const char* const* _xsd_EquityPriceType_literals_;
  static const value _xsd_EquityPriceType_indexes_[5];
};

class OrderRoutingDestination: public ::xml_schema::string
{
  public:
  enum value
  {
    AUTO,
    ATIN,
    SELN,
    MKXT,
    REDI,
    INCA,
    ARCA,
    ISLD,
    BETA,
    SOES,
    ADP,
    RTEX,
    INST,
    BRUT,
    INET,
    NSDQ,
    NYSE,
    AMEX,
    BOX,
    CBOE,
    ISE,
    NOM,
    PHX
  };

  OrderRoutingDestination (value v);

  OrderRoutingDestination (const char* v);

  OrderRoutingDestination (const ::std::string& v);

  OrderRoutingDestination (const ::xml_schema::string& v);

  OrderRoutingDestination (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  OrderRoutingDestination (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  OrderRoutingDestination (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  OrderRoutingDestination (const OrderRoutingDestination& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual OrderRoutingDestination*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderRoutingDestination&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderRoutingDestination_convert ();
  }

  protected:
  value
  _xsd_OrderRoutingDestination_convert () const;

  public:
  static const char* const _xsd_OrderRoutingDestination_literals_[23];
  static const value _xsd_OrderRoutingDestination_indexes_[23];
};

class EquityOrderRoutingDestination: public ::OrderRoutingDestination
{
  public:
  typedef ::OrderRoutingDestination::value value;

  EquityOrderRoutingDestination (value v);

  EquityOrderRoutingDestination (const char* v);

  EquityOrderRoutingDestination (const ::std::string& v);

  EquityOrderRoutingDestination (const ::OrderRoutingDestination& v);

  EquityOrderRoutingDestination (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  EquityOrderRoutingDestination (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  EquityOrderRoutingDestination (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  EquityOrderRoutingDestination (const EquityOrderRoutingDestination& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual EquityOrderRoutingDestination*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EquityOrderRoutingDestination&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_EquityOrderRoutingDestination_convert ();
  }

  protected:
  value
  _xsd_EquityOrderRoutingDestination_convert () const;

  public:
  static const char* const* _xsd_EquityOrderRoutingDestination_literals_;
  static const value _xsd_EquityOrderRoutingDestination_indexes_[4];
};

class OrderTerm: public ::xml_schema::string
{
  public:
  enum value
  {
    GOOD_UNTIL_CANCEL,
    GOOD_FOR_DAY,
    GOOD_TILL_DATE,
    IMMEDIATE_OR_CANCEL,
    FILL_OR_KILL
  };

  OrderTerm (value v);

  OrderTerm (const char* v);

  OrderTerm (const ::std::string& v);

  OrderTerm (const ::xml_schema::string& v);

  OrderTerm (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderTerm (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderTerm (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderTerm (const OrderTerm& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual OrderTerm*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderTerm&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderTerm_convert ();
  }

  protected:
  value
  _xsd_OrderTerm_convert () const;

  public:
  static const char* const _xsd_OrderTerm_literals_[5];
  static const value _xsd_OrderTerm_indexes_[5];
};

class EquityOrderTerm: public ::OrderTerm
{
  public:
  typedef ::OrderTerm::value value;

  EquityOrderTerm (value v);

  EquityOrderTerm (const char* v);

  EquityOrderTerm (const ::std::string& v);

  EquityOrderTerm (const ::OrderTerm& v);

  EquityOrderTerm (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityOrderTerm (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityOrderTerm (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  EquityOrderTerm (const EquityOrderTerm& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual EquityOrderTerm*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EquityOrderTerm&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_EquityOrderTerm_convert ();
  }

  protected:
  value
  _xsd_EquityOrderTerm_convert () const;

  public:
  static const char* const* _xsd_EquityOrderTerm_literals_;
  static const value _xsd_EquityOrderTerm_indexes_[4];
};

class Month: public ::xml_schema::string
{
  public:
  enum value
  {
    JAN,
    FEB,
    MAR,
    APR,
    MAY,
    JUN,
    JUL,
    AUG,
    SEP,
    OCT,
    NOV,
    DEC
  };

  Month (value v);

  Month (const char* v);

  Month (const ::std::string& v);

  Month (const ::xml_schema::string& v);

  Month (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Month (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Month (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Month (const Month& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Month*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Month&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_Month_convert ();
  }

  protected:
  value
  _xsd_Month_convert () const;

  public:
  static const char* const _xsd_Month_literals_[12];
  static const value _xsd_Month_indexes_[12];
};

class OptionOrderRequest: public ::BasicOrderRequest
{
  public:
  // stopLimitPrice
  // 
  typedef ::xml_schema::decimal stopLimitPrice_type;
  typedef ::xsd::cxx::tree::optional< stopLimitPrice_type > stopLimitPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopLimitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopLimitPrice_traits;

  const stopLimitPrice_optional&
  stopLimitPrice () const;

  stopLimitPrice_optional&
  stopLimitPrice ();

  void
  stopLimitPrice (const stopLimitPrice_type& x);

  void
  stopLimitPrice (const stopLimitPrice_optional& x);

  // symbolInfo
  // 
  typedef ::OptionSymbol symbolInfo_type;
  typedef ::xsd::cxx::tree::optional< symbolInfo_type > symbolInfo_optional;
  typedef ::xsd::cxx::tree::traits< symbolInfo_type, char > symbolInfo_traits;

  const symbolInfo_optional&
  symbolInfo () const;

  symbolInfo_optional&
  symbolInfo ();

  void
  symbolInfo (const symbolInfo_type& x);

  void
  symbolInfo (const symbolInfo_optional& x);

  void
  symbolInfo (::std::auto_ptr< symbolInfo_type > p);

  // orderAction
  // 
  typedef ::OptionOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::OptionPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // routingDestination
  // 
  typedef ::routingDestination1 routingDestination_type;
  typedef ::xsd::cxx::tree::optional< routingDestination_type > routingDestination_optional;
  typedef ::xsd::cxx::tree::traits< routingDestination_type, char > routingDestination_traits;

  const routingDestination_optional&
  routingDestination () const;

  routingDestination_optional&
  routingDestination ();

  void
  routingDestination (const routingDestination_type& x);

  void
  routingDestination (const routingDestination_optional& x);

  void
  routingDestination (::std::auto_ptr< routingDestination_type > p);

  // orderTerm
  // 
  typedef ::OptionOrderTerm orderTerm_type;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_type&
  orderTerm () const;

  orderTerm_type&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // Constructors.
  //
  OptionOrderRequest (const accountId_type&,
                      const quantity_type&,
                      const orderAction_type&,
                      const priceType_type&,
                      const orderTerm_type&);

  OptionOrderRequest (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  OptionOrderRequest (const OptionOrderRequest& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual OptionOrderRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionOrderRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stopLimitPrice_optional stopLimitPrice_;
  symbolInfo_optional symbolInfo_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
  routingDestination_optional routingDestination_;
  ::xsd::cxx::tree::one< orderTerm_type > orderTerm_;
};

class OptionSymbol: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // callOrPut
  // 
  typedef ::CallOrPut callOrPut_type;
  typedef ::xsd::cxx::tree::traits< callOrPut_type, char > callOrPut_traits;

  const callOrPut_type&
  callOrPut () const;

  callOrPut_type&
  callOrPut ();

  void
  callOrPut (const callOrPut_type& x);

  void
  callOrPut (::std::auto_ptr< callOrPut_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_type&
  strikePrice () const;

  strikePrice_type&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  // expirationYear
  // 
  typedef ::xml_schema::integer expirationYear_type;
  typedef ::xsd::cxx::tree::traits< expirationYear_type, char > expirationYear_traits;

  const expirationYear_type&
  expirationYear () const;

  expirationYear_type&
  expirationYear ();

  void
  expirationYear (const expirationYear_type& x);

  // expirationMonth
  // 
  typedef ::xml_schema::integer expirationMonth_type;
  typedef ::xsd::cxx::tree::traits< expirationMonth_type, char > expirationMonth_traits;

  const expirationMonth_type&
  expirationMonth () const;

  expirationMonth_type&
  expirationMonth ();

  void
  expirationMonth (const expirationMonth_type& x);

  // expirationDay
  // 
  typedef ::xml_schema::integer expirationDay_type;
  typedef ::xsd::cxx::tree::traits< expirationDay_type, char > expirationDay_traits;

  const expirationDay_type&
  expirationDay () const;

  expirationDay_type&
  expirationDay ();

  void
  expirationDay (const expirationDay_type& x);

  // Constructors.
  //
  OptionSymbol (const symbol_type&,
                const callOrPut_type&,
                const strikePrice_type&,
                const expirationYear_type&,
                const expirationMonth_type&,
                const expirationDay_type&);

  OptionSymbol (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OptionSymbol (const OptionSymbol& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual OptionSymbol*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionSymbol ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< callOrPut_type > callOrPut_;
  ::xsd::cxx::tree::one< strikePrice_type > strikePrice_;
  ::xsd::cxx::tree::one< expirationYear_type > expirationYear_;
  ::xsd::cxx::tree::one< expirationMonth_type > expirationMonth_;
  ::xsd::cxx::tree::one< expirationDay_type > expirationDay_;
};

class OptionOrderResponse: public ::BasicOrderResponse
{
  public:
  // stopLimitPrice
  // 
  typedef ::xml_schema::decimal stopLimitPrice_type;
  typedef ::xsd::cxx::tree::optional< stopLimitPrice_type > stopLimitPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopLimitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopLimitPrice_traits;

  const stopLimitPrice_optional&
  stopLimitPrice () const;

  stopLimitPrice_optional&
  stopLimitPrice ();

  void
  stopLimitPrice (const stopLimitPrice_type& x);

  void
  stopLimitPrice (const stopLimitPrice_optional& x);

  // optionSymbol
  // 
  typedef ::OptionSymbol optionSymbol_type;
  typedef ::xsd::cxx::tree::traits< optionSymbol_type, char > optionSymbol_traits;

  const optionSymbol_type&
  optionSymbol () const;

  optionSymbol_type&
  optionSymbol ();

  void
  optionSymbol (const optionSymbol_type& x);

  void
  optionSymbol (::std::auto_ptr< optionSymbol_type > p);

  // orderAction
  // 
  typedef ::OptionOrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // priceType
  // 
  typedef ::OptionPriceType priceType_type;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_type&
  priceType () const;

  priceType_type&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // Constructors.
  //
  OptionOrderResponse (const estimatedCommission_type&,
                       const estimatedTotalAmount_type&,
                       const quantity_type&,
                       const optionSymbol_type&,
                       const orderAction_type&,
                       const priceType_type&);

  OptionOrderResponse (const estimatedCommission_type&,
                       const estimatedTotalAmount_type&,
                       const quantity_type&,
                       ::std::auto_ptr< optionSymbol_type >&,
                       const orderAction_type&,
                       const priceType_type&);

  OptionOrderResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  OptionOrderResponse (const OptionOrderResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual OptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  stopLimitPrice_optional stopLimitPrice_;
  ::xsd::cxx::tree::one< optionSymbol_type > optionSymbol_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< priceType_type > priceType_;
};

class OptionOrderAction: public ::OrderAction
{
  public:
  typedef ::OrderAction::value value;

  OptionOrderAction (value v);

  OptionOrderAction (const char* v);

  OptionOrderAction (const ::std::string& v);

  OptionOrderAction (const ::OrderAction& v);

  OptionOrderAction (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  OptionOrderAction (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  OptionOrderAction (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  OptionOrderAction (const OptionOrderAction& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual OptionOrderAction*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OptionOrderAction&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OptionOrderAction_convert ();
  }

  protected:
  value
  _xsd_OptionOrderAction_convert () const;

  public:
  static const char* const* _xsd_OptionOrderAction_literals_;
  static const value _xsd_OptionOrderAction_indexes_[4];
};

class OptionPriceType: public ::PriceType
{
  public:
  typedef ::PriceType::value value;

  OptionPriceType (value v);

  OptionPriceType (const char* v);

  OptionPriceType (const ::std::string& v);

  OptionPriceType (const ::PriceType& v);

  OptionPriceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionPriceType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionPriceType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionPriceType (const OptionPriceType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual OptionPriceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OptionPriceType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OptionPriceType_convert ();
  }

  protected:
  value
  _xsd_OptionPriceType_convert () const;

  public:
  static const char* const* _xsd_OptionPriceType_literals_;
  static const value _xsd_OptionPriceType_indexes_[4];
};

class OptionOrderRoutingDestination: public ::OrderRoutingDestination
{
  public:
  typedef ::OrderRoutingDestination::value value;

  OptionOrderRoutingDestination (value v);

  OptionOrderRoutingDestination (const char* v);

  OptionOrderRoutingDestination (const ::std::string& v);

  OptionOrderRoutingDestination (const ::OrderRoutingDestination& v);

  OptionOrderRoutingDestination (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  OptionOrderRoutingDestination (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  OptionOrderRoutingDestination (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  OptionOrderRoutingDestination (const OptionOrderRoutingDestination& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual OptionOrderRoutingDestination*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OptionOrderRoutingDestination&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OptionOrderRoutingDestination_convert ();
  }

  protected:
  value
  _xsd_OptionOrderRoutingDestination_convert () const;

  public:
  static const char* const* _xsd_OptionOrderRoutingDestination_literals_;
  static const value _xsd_OptionOrderRoutingDestination_indexes_[8];
};

class OptionOrderTerm: public ::OrderTerm
{
  public:
  typedef ::OrderTerm::value value;

  OptionOrderTerm (value v);

  OptionOrderTerm (const char* v);

  OptionOrderTerm (const ::std::string& v);

  OptionOrderTerm (const ::OrderTerm& v);

  OptionOrderTerm (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionOrderTerm (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionOrderTerm (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  OptionOrderTerm (const OptionOrderTerm& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual OptionOrderTerm*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OptionOrderTerm&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OptionOrderTerm_convert ();
  }

  protected:
  value
  _xsd_OptionOrderTerm_convert () const;

  public:
  static const char* const* _xsd_OptionOrderTerm_literals_;
  static const value _xsd_OptionOrderTerm_indexes_[4];
};

class int_or_empty: public ::xml_schema::string
{
  public:

  int_or_empty (const char* v);

  int_or_empty (const ::std::string& v);

  int_or_empty (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const int_or_empty& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual int_or_empty*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class empty_string: public ::xml_schema::string
{
  public:
  enum value
  {
    empty
  };

  empty_string (value v);

  empty_string (const char* v);

  empty_string (const ::std::string& v);

  empty_string (const ::xml_schema::string& v);

  empty_string (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const empty_string& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual empty_string*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  empty_string&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_empty_string_convert ();
  }

  protected:
  value
  _xsd_empty_string_convert () const;

  public:
  static const char* const _xsd_empty_string_literals_[1];
  static const value _xsd_empty_string_indexes_[1];
};

class OrderListResponse: public ::xml_schema::type
{
  public:
  // count
  // 
  typedef ::xml_schema::long_ count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // marker
  // 
  typedef ::xml_schema::string marker_type;
  typedef ::xsd::cxx::tree::optional< marker_type > marker_optional;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_optional&
  marker () const;

  marker_optional&
  marker ();

  void
  marker (const marker_type& x);

  void
  marker (const marker_optional& x);

  void
  marker (::std::auto_ptr< marker_type > p);

  // orderDetails
  // 
  typedef ::orderDetails orderDetails_type;
  typedef ::xsd::cxx::tree::traits< orderDetails_type, char > orderDetails_traits;

  const orderDetails_type&
  orderDetails () const;

  orderDetails_type&
  orderDetails ();

  void
  orderDetails (const orderDetails_type& x);

  void
  orderDetails (::std::auto_ptr< orderDetails_type > p);

  // Constructors.
  //
  OrderListResponse (const count_type&,
                     const orderDetails_type&);

  OrderListResponse (const count_type&,
                     ::std::auto_ptr< orderDetails_type >&);

  OrderListResponse (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  OrderListResponse (const OrderListResponse& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual OrderListResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OrderListResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< count_type > count_;
  marker_optional marker_;
  ::xsd::cxx::tree::one< orderDetails_type > orderDetails_;
};

class orderDetails: public ::xml_schema::type
{
  public:
  // OrderDetails
  // 
  typedef ::OrderDetails OrderDetails_type;
  typedef ::xsd::cxx::tree::sequence< OrderDetails_type > OrderDetails_sequence;
  typedef OrderDetails_sequence::iterator OrderDetails_iterator;
  typedef OrderDetails_sequence::const_iterator OrderDetails_const_iterator;
  typedef ::xsd::cxx::tree::traits< OrderDetails_type, char > OrderDetails_traits;

  const OrderDetails_sequence&
  OrderDetails () const;

  OrderDetails_sequence&
  OrderDetails ();

  void
  OrderDetails (const OrderDetails_sequence& s);

  // Constructors.
  //
  orderDetails ();

  orderDetails (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  orderDetails (const orderDetails& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual orderDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~orderDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  OrderDetails_sequence OrderDetails_;
};

class OrderDetails: public ::xml_schema::type
{
  public:
  // groupOrder
  // 
  typedef ::GroupOrder groupOrder_type;
  typedef ::xsd::cxx::tree::optional< groupOrder_type > groupOrder_optional;
  typedef ::xsd::cxx::tree::traits< groupOrder_type, char > groupOrder_traits;

  const groupOrder_optional&
  groupOrder () const;

  groupOrder_optional&
  groupOrder ();

  void
  groupOrder (const groupOrder_type& x);

  void
  groupOrder (const groupOrder_optional& x);

  void
  groupOrder (::std::auto_ptr< groupOrder_type > p);

  // order
  // 
  typedef ::order order_type;
  typedef ::xsd::cxx::tree::optional< order_type > order_optional;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_optional&
  order () const;

  order_optional&
  order ();

  void
  order (const order_type& x);

  void
  order (const order_optional& x);

  void
  order (::std::auto_ptr< order_type > p);

  // Constructors.
  //
  OrderDetails ();

  OrderDetails (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OrderDetails (const OrderDetails& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual OrderDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OrderDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  groupOrder_optional groupOrder_;
  order_optional order_;
};

class GroupOrder: public ::xml_schema::type
{
  public:
  // groupOrderId
  // 
  typedef ::xml_schema::integer groupOrderId_type;
  typedef ::xsd::cxx::tree::traits< groupOrderId_type, char > groupOrderId_traits;

  const groupOrderId_type&
  groupOrderId () const;

  groupOrderId_type&
  groupOrderId ();

  void
  groupOrderId (const groupOrderId_type& x);

  // groupOrderType
  // 
  typedef ::ViewOrderType groupOrderType_type;
  typedef ::xsd::cxx::tree::optional< groupOrderType_type > groupOrderType_optional;
  typedef ::xsd::cxx::tree::traits< groupOrderType_type, char > groupOrderType_traits;

  const groupOrderType_optional&
  groupOrderType () const;

  groupOrderType_optional&
  groupOrderType ();

  void
  groupOrderType (const groupOrderType_type& x);

  void
  groupOrderType (const groupOrderType_optional& x);

  void
  groupOrderType (::std::auto_ptr< groupOrderType_type > p);

  // totalOrderValue
  // 
  typedef ::xml_schema::decimal totalOrderValue_type;
  typedef ::xsd::cxx::tree::optional< totalOrderValue_type > totalOrderValue_optional;
  typedef ::xsd::cxx::tree::traits< totalOrderValue_type, char, ::xsd::cxx::tree::schema_type::decimal > totalOrderValue_traits;

  const totalOrderValue_optional&
  totalOrderValue () const;

  totalOrderValue_optional&
  totalOrderValue ();

  void
  totalOrderValue (const totalOrderValue_type& x);

  void
  totalOrderValue (const totalOrderValue_optional& x);

  // cumulativeEstimatedCommission
  // 
  typedef ::xml_schema::double_ cumulativeEstimatedCommission_type;
  typedef ::xsd::cxx::tree::optional< cumulativeEstimatedCommission_type > cumulativeEstimatedCommission_optional;
  typedef ::xsd::cxx::tree::traits< cumulativeEstimatedCommission_type, char, ::xsd::cxx::tree::schema_type::double_ > cumulativeEstimatedCommission_traits;

  const cumulativeEstimatedCommission_optional&
  cumulativeEstimatedCommission () const;

  cumulativeEstimatedCommission_optional&
  cumulativeEstimatedCommission ();

  void
  cumulativeEstimatedCommission (const cumulativeEstimatedCommission_type& x);

  void
  cumulativeEstimatedCommission (const cumulativeEstimatedCommission_optional& x);

  // cumulativeEstimatedFees
  // 
  typedef ::xml_schema::double_ cumulativeEstimatedFees_type;
  typedef ::xsd::cxx::tree::optional< cumulativeEstimatedFees_type > cumulativeEstimatedFees_optional;
  typedef ::xsd::cxx::tree::traits< cumulativeEstimatedFees_type, char, ::xsd::cxx::tree::schema_type::double_ > cumulativeEstimatedFees_traits;

  const cumulativeEstimatedFees_optional&
  cumulativeEstimatedFees () const;

  cumulativeEstimatedFees_optional&
  cumulativeEstimatedFees ();

  void
  cumulativeEstimatedFees (const cumulativeEstimatedFees_type& x);

  void
  cumulativeEstimatedFees (const cumulativeEstimatedFees_optional& x);

  // order
  // 
  typedef ::GroupOrderDetails order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  // Constructors.
  //
  GroupOrder (const groupOrderId_type&,
              const order_type&);

  GroupOrder (const groupOrderId_type&,
              ::std::auto_ptr< order_type >&);

  GroupOrder (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GroupOrder (const GroupOrder& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual GroupOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GroupOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< groupOrderId_type > groupOrderId_;
  groupOrderType_optional groupOrderType_;
  totalOrderValue_optional totalOrderValue_;
  cumulativeEstimatedCommission_optional cumulativeEstimatedCommission_;
  cumulativeEstimatedFees_optional cumulativeEstimatedFees_;
  ::xsd::cxx::tree::one< order_type > order_;
};

class GroupOrderDetails: public ::xml_schema::type
{
  public:
  // Order
  // 
  typedef ::order Order_type;
  typedef ::xsd::cxx::tree::sequence< Order_type > Order_sequence;
  typedef Order_sequence::iterator Order_iterator;
  typedef Order_sequence::const_iterator Order_const_iterator;
  typedef ::xsd::cxx::tree::traits< Order_type, char > Order_traits;

  const Order_sequence&
  Order () const;

  Order_sequence&
  Order ();

  void
  Order (const Order_sequence& s);

  // Constructors.
  //
  GroupOrderDetails ();

  GroupOrderDetails (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  GroupOrderDetails (const GroupOrderDetails& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual GroupOrderDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GroupOrderDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Order_sequence Order_;
};

class order: public ::xml_schema::type
{
  public:
  // orderId
  // 
  typedef ::xml_schema::integer orderId_type;
  typedef ::xsd::cxx::tree::traits< orderId_type, char > orderId_traits;

  const orderId_type&
  orderId () const;

  orderId_type&
  orderId ();

  void
  orderId (const orderId_type& x);

  // orderPlacedTime
  // 
  typedef ::xml_schema::long_ orderPlacedTime_type;
  typedef ::xsd::cxx::tree::traits< orderPlacedTime_type, char > orderPlacedTime_traits;

  const orderPlacedTime_type&
  orderPlacedTime () const;

  orderPlacedTime_type&
  orderPlacedTime ();

  void
  orderPlacedTime (const orderPlacedTime_type& x);

  // orderExecutedTime
  // 
  typedef ::xml_schema::long_ orderExecutedTime_type;
  typedef ::xsd::cxx::tree::optional< orderExecutedTime_type > orderExecutedTime_optional;
  typedef ::xsd::cxx::tree::traits< orderExecutedTime_type, char > orderExecutedTime_traits;

  const orderExecutedTime_optional&
  orderExecutedTime () const;

  orderExecutedTime_optional&
  orderExecutedTime ();

  void
  orderExecutedTime (const orderExecutedTime_type& x);

  void
  orderExecutedTime (const orderExecutedTime_optional& x);

  // orderValue
  // 
  typedef ::xml_schema::decimal orderValue_type;
  typedef ::xsd::cxx::tree::traits< orderValue_type, char, ::xsd::cxx::tree::schema_type::decimal > orderValue_traits;

  const orderValue_type&
  orderValue () const;

  orderValue_type&
  orderValue ();

  void
  orderValue (const orderValue_type& x);

  // orderStatus
  // 
  typedef ::OrderStatus orderStatus_type;
  typedef ::xsd::cxx::tree::traits< orderStatus_type, char > orderStatus_traits;

  const orderStatus_type&
  orderStatus () const;

  orderStatus_type&
  orderStatus ();

  void
  orderStatus (const orderStatus_type& x);

  void
  orderStatus (::std::auto_ptr< orderStatus_type > p);

  // orderType
  // 
  typedef ::ViewOrderType orderType_type;
  typedef ::xsd::cxx::tree::traits< orderType_type, char > orderType_traits;

  const orderType_type&
  orderType () const;

  orderType_type&
  orderType ();

  void
  orderType (const orderType_type& x);

  void
  orderType (::std::auto_ptr< orderType_type > p);

  // orderTerm
  // 
  typedef ::OrderTerm orderTerm_type;
  typedef ::xsd::cxx::tree::traits< orderTerm_type, char > orderTerm_traits;

  const orderTerm_type&
  orderTerm () const;

  orderTerm_type&
  orderTerm ();

  void
  orderTerm (const orderTerm_type& x);

  void
  orderTerm (::std::auto_ptr< orderTerm_type > p);

  // priceType
  // 
  typedef ::PriceType priceType_type;
  typedef ::xsd::cxx::tree::optional< priceType_type > priceType_optional;
  typedef ::xsd::cxx::tree::traits< priceType_type, char > priceType_traits;

  const priceType_optional&
  priceType () const;

  priceType_optional&
  priceType ();

  void
  priceType (const priceType_type& x);

  void
  priceType (const priceType_optional& x);

  void
  priceType (::std::auto_ptr< priceType_type > p);

  // limitPrice
  // 
  typedef ::xml_schema::decimal limitPrice_type;
  typedef ::xsd::cxx::tree::optional< limitPrice_type > limitPrice_optional;
  typedef ::xsd::cxx::tree::traits< limitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > limitPrice_traits;

  const limitPrice_optional&
  limitPrice () const;

  limitPrice_optional&
  limitPrice ();

  void
  limitPrice (const limitPrice_type& x);

  void
  limitPrice (const limitPrice_optional& x);

  // stopPrice
  // 
  typedef ::xml_schema::decimal stopPrice_type;
  typedef ::xsd::cxx::tree::optional< stopPrice_type > stopPrice_optional;
  typedef ::xsd::cxx::tree::traits< stopPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > stopPrice_traits;

  const stopPrice_optional&
  stopPrice () const;

  stopPrice_optional&
  stopPrice ();

  void
  stopPrice (const stopPrice_type& x);

  void
  stopPrice (const stopPrice_optional& x);

  // routingDestination
  // 
  typedef ::OrderRoutingDestination routingDestination_type;
  typedef ::xsd::cxx::tree::optional< routingDestination_type > routingDestination_optional;
  typedef ::xsd::cxx::tree::traits< routingDestination_type, char > routingDestination_traits;

  const routingDestination_optional&
  routingDestination () const;

  routingDestination_optional&
  routingDestination ();

  void
  routingDestination (const routingDestination_type& x);

  void
  routingDestination (const routingDestination_optional& x);

  void
  routingDestination (::std::auto_ptr< routingDestination_type > p);

  // legDetails
  // 
  typedef ::legDetails legDetails_type;
  typedef ::xsd::cxx::tree::traits< legDetails_type, char > legDetails_traits;

  const legDetails_type&
  legDetails () const;

  legDetails_type&
  legDetails ();

  void
  legDetails (const legDetails_type& x);

  void
  legDetails (::std::auto_ptr< legDetails_type > p);

  // bracketLimitPrice
  // 
  typedef ::xml_schema::decimal bracketLimitPrice_type;
  typedef ::xsd::cxx::tree::optional< bracketLimitPrice_type > bracketLimitPrice_optional;
  typedef ::xsd::cxx::tree::traits< bracketLimitPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > bracketLimitPrice_traits;

  const bracketLimitPrice_optional&
  bracketLimitPrice () const;

  bracketLimitPrice_optional&
  bracketLimitPrice ();

  void
  bracketLimitPrice (const bracketLimitPrice_type& x);

  void
  bracketLimitPrice (const bracketLimitPrice_optional& x);

  // initialStopPrice
  // 
  typedef ::xml_schema::decimal initialStopPrice_type;
  typedef ::xsd::cxx::tree::optional< initialStopPrice_type > initialStopPrice_optional;
  typedef ::xsd::cxx::tree::traits< initialStopPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > initialStopPrice_traits;

  const initialStopPrice_optional&
  initialStopPrice () const;

  initialStopPrice_optional&
  initialStopPrice ();

  void
  initialStopPrice (const initialStopPrice_type& x);

  void
  initialStopPrice (const initialStopPrice_optional& x);

  // trailPrice
  // 
  typedef ::xml_schema::decimal trailPrice_type;
  typedef ::xsd::cxx::tree::optional< trailPrice_type > trailPrice_optional;
  typedef ::xsd::cxx::tree::traits< trailPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > trailPrice_traits;

  const trailPrice_optional&
  trailPrice () const;

  trailPrice_optional&
  trailPrice ();

  void
  trailPrice (const trailPrice_type& x);

  void
  trailPrice (const trailPrice_optional& x);

  // triggerPrice
  // 
  typedef ::xml_schema::decimal triggerPrice_type;
  typedef ::xsd::cxx::tree::optional< triggerPrice_type > triggerPrice_optional;
  typedef ::xsd::cxx::tree::traits< triggerPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > triggerPrice_traits;

  const triggerPrice_optional&
  triggerPrice () const;

  triggerPrice_optional&
  triggerPrice ();

  void
  triggerPrice (const triggerPrice_type& x);

  void
  triggerPrice (const triggerPrice_optional& x);

  // conditionPrice
  // 
  typedef ::xml_schema::decimal conditionPrice_type;
  typedef ::xsd::cxx::tree::optional< conditionPrice_type > conditionPrice_optional;
  typedef ::xsd::cxx::tree::traits< conditionPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > conditionPrice_traits;

  const conditionPrice_optional&
  conditionPrice () const;

  conditionPrice_optional&
  conditionPrice ();

  void
  conditionPrice (const conditionPrice_type& x);

  void
  conditionPrice (const conditionPrice_optional& x);

  // conditionSymbol
  // 
  typedef ::xml_schema::string conditionSymbol_type;
  typedef ::xsd::cxx::tree::optional< conditionSymbol_type > conditionSymbol_optional;
  typedef ::xsd::cxx::tree::traits< conditionSymbol_type, char > conditionSymbol_traits;

  const conditionSymbol_optional&
  conditionSymbol () const;

  conditionSymbol_optional&
  conditionSymbol ();

  void
  conditionSymbol (const conditionSymbol_type& x);

  void
  conditionSymbol (const conditionSymbol_optional& x);

  void
  conditionSymbol (::std::auto_ptr< conditionSymbol_type > p);

  // conditionType
  // 
  typedef ::ConditionType conditionType_type;
  typedef ::xsd::cxx::tree::optional< conditionType_type > conditionType_optional;
  typedef ::xsd::cxx::tree::traits< conditionType_type, char > conditionType_traits;

  const conditionType_optional&
  conditionType () const;

  conditionType_optional&
  conditionType ();

  void
  conditionType (const conditionType_type& x);

  void
  conditionType (const conditionType_optional& x);

  void
  conditionType (::std::auto_ptr< conditionType_type > p);

  // conditionFollowPrice
  // 
  typedef ::ConditionFollowPrice conditionFollowPrice_type;
  typedef ::xsd::cxx::tree::optional< conditionFollowPrice_type > conditionFollowPrice_optional;
  typedef ::xsd::cxx::tree::traits< conditionFollowPrice_type, char > conditionFollowPrice_traits;

  const conditionFollowPrice_optional&
  conditionFollowPrice () const;

  conditionFollowPrice_optional&
  conditionFollowPrice ();

  void
  conditionFollowPrice (const conditionFollowPrice_type& x);

  void
  conditionFollowPrice (const conditionFollowPrice_optional& x);

  void
  conditionFollowPrice (::std::auto_ptr< conditionFollowPrice_type > p);

  // replacedByOrderId
  // 
  typedef ::xml_schema::integer replacedByOrderId_type;
  typedef ::xsd::cxx::tree::optional< replacedByOrderId_type > replacedByOrderId_optional;
  typedef ::xsd::cxx::tree::traits< replacedByOrderId_type, char > replacedByOrderId_traits;

  const replacedByOrderId_optional&
  replacedByOrderId () const;

  replacedByOrderId_optional&
  replacedByOrderId ();

  void
  replacedByOrderId (const replacedByOrderId_type& x);

  void
  replacedByOrderId (const replacedByOrderId_optional& x);

  // replacesOrderId
  // 
  typedef ::xml_schema::integer replacesOrderId_type;
  typedef ::xsd::cxx::tree::optional< replacesOrderId_type > replacesOrderId_optional;
  typedef ::xsd::cxx::tree::traits< replacesOrderId_type, char > replacesOrderId_traits;

  const replacesOrderId_optional&
  replacesOrderId () const;

  replacesOrderId_optional&
  replacesOrderId ();

  void
  replacesOrderId (const replacesOrderId_type& x);

  void
  replacesOrderId (const replacesOrderId_optional& x);

  // allOrNone
  // 
  typedef ::xml_schema::boolean allOrNone_type;
  typedef ::xsd::cxx::tree::optional< allOrNone_type > allOrNone_optional;
  typedef ::xsd::cxx::tree::traits< allOrNone_type, char > allOrNone_traits;

  const allOrNone_optional&
  allOrNone () const;

  allOrNone_optional&
  allOrNone ();

  void
  allOrNone (const allOrNone_type& x);

  void
  allOrNone (const allOrNone_optional& x);

  // Constructors.
  //
  order (const orderId_type&,
         const orderPlacedTime_type&,
         const orderValue_type&,
         const orderStatus_type&,
         const orderType_type&,
         const orderTerm_type&,
         const legDetails_type&);

  order (const orderId_type&,
         const orderPlacedTime_type&,
         const orderValue_type&,
         const orderStatus_type&,
         const orderType_type&,
         const orderTerm_type&,
         ::std::auto_ptr< legDetails_type >&);

  order (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  order (const order& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual order*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~order ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< orderId_type > orderId_;
  ::xsd::cxx::tree::one< orderPlacedTime_type > orderPlacedTime_;
  orderExecutedTime_optional orderExecutedTime_;
  ::xsd::cxx::tree::one< orderValue_type > orderValue_;
  ::xsd::cxx::tree::one< orderStatus_type > orderStatus_;
  ::xsd::cxx::tree::one< orderType_type > orderType_;
  ::xsd::cxx::tree::one< orderTerm_type > orderTerm_;
  priceType_optional priceType_;
  limitPrice_optional limitPrice_;
  stopPrice_optional stopPrice_;
  routingDestination_optional routingDestination_;
  ::xsd::cxx::tree::one< legDetails_type > legDetails_;
  bracketLimitPrice_optional bracketLimitPrice_;
  initialStopPrice_optional initialStopPrice_;
  trailPrice_optional trailPrice_;
  triggerPrice_optional triggerPrice_;
  conditionPrice_optional conditionPrice_;
  conditionSymbol_optional conditionSymbol_;
  conditionType_optional conditionType_;
  conditionFollowPrice_optional conditionFollowPrice_;
  replacedByOrderId_optional replacedByOrderId_;
  replacesOrderId_optional replacesOrderId_;
  allOrNone_optional allOrNone_;
};

class legDetails: public ::xml_schema::type
{
  public:
  // LegDetails
  // 
  typedef ::LegDetails LegDetails_type;
  typedef ::xsd::cxx::tree::sequence< LegDetails_type > LegDetails_sequence;
  typedef LegDetails_sequence::iterator LegDetails_iterator;
  typedef LegDetails_sequence::const_iterator LegDetails_const_iterator;
  typedef ::xsd::cxx::tree::traits< LegDetails_type, char > LegDetails_traits;

  const LegDetails_sequence&
  LegDetails () const;

  LegDetails_sequence&
  LegDetails ();

  void
  LegDetails (const LegDetails_sequence& s);

  // Constructors.
  //
  legDetails ();

  legDetails (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  legDetails (const legDetails& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual legDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~legDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  LegDetails_sequence LegDetails_;
};

class LegDetails: public ::xml_schema::type
{
  public:
  // legNumber
  // 
  typedef ::xml_schema::long_ legNumber_type;
  typedef ::xsd::cxx::tree::traits< legNumber_type, char > legNumber_traits;

  const legNumber_type&
  legNumber () const;

  legNumber_type&
  legNumber ();

  void
  legNumber (const legNumber_type& x);

  // symbolInfo
  // 
  typedef ::SymbolInfo symbolInfo_type;
  typedef ::xsd::cxx::tree::traits< symbolInfo_type, char > symbolInfo_traits;

  const symbolInfo_type&
  symbolInfo () const;

  symbolInfo_type&
  symbolInfo ();

  void
  symbolInfo (const symbolInfo_type& x);

  void
  symbolInfo (::std::auto_ptr< symbolInfo_type > p);

  // symbolDescription
  // 
  typedef ::xml_schema::string symbolDescription_type;
  typedef ::xsd::cxx::tree::traits< symbolDescription_type, char > symbolDescription_traits;

  const symbolDescription_type&
  symbolDescription () const;

  symbolDescription_type&
  symbolDescription ();

  void
  symbolDescription (const symbolDescription_type& x);

  void
  symbolDescription (::std::auto_ptr< symbolDescription_type > p);

  // orderAction
  // 
  typedef ::OrderAction orderAction_type;
  typedef ::xsd::cxx::tree::traits< orderAction_type, char > orderAction_traits;

  const orderAction_type&
  orderAction () const;

  orderAction_type&
  orderAction ();

  void
  orderAction (const orderAction_type& x);

  void
  orderAction (::std::auto_ptr< orderAction_type > p);

  // orderedQuantity
  // 
  typedef ::xml_schema::integer orderedQuantity_type;
  typedef ::xsd::cxx::tree::traits< orderedQuantity_type, char > orderedQuantity_traits;

  const orderedQuantity_type&
  orderedQuantity () const;

  orderedQuantity_type&
  orderedQuantity ();

  void
  orderedQuantity (const orderedQuantity_type& x);

  // filledQuantity
  // 
  typedef ::xml_schema::integer filledQuantity_type;
  typedef ::xsd::cxx::tree::optional< filledQuantity_type > filledQuantity_optional;
  typedef ::xsd::cxx::tree::traits< filledQuantity_type, char > filledQuantity_traits;

  const filledQuantity_optional&
  filledQuantity () const;

  filledQuantity_optional&
  filledQuantity ();

  void
  filledQuantity (const filledQuantity_type& x);

  void
  filledQuantity (const filledQuantity_optional& x);

  // executedPrice
  // 
  typedef ::xml_schema::decimal executedPrice_type;
  typedef ::xsd::cxx::tree::optional< executedPrice_type > executedPrice_optional;
  typedef ::xsd::cxx::tree::traits< executedPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > executedPrice_traits;

  const executedPrice_optional&
  executedPrice () const;

  executedPrice_optional&
  executedPrice ();

  void
  executedPrice (const executedPrice_type& x);

  void
  executedPrice (const executedPrice_optional& x);

  // estimatedCommission
  // 
  typedef ::xml_schema::decimal estimatedCommission_type;
  typedef ::xsd::cxx::tree::traits< estimatedCommission_type, char, ::xsd::cxx::tree::schema_type::decimal > estimatedCommission_traits;

  const estimatedCommission_type&
  estimatedCommission () const;

  estimatedCommission_type&
  estimatedCommission ();

  void
  estimatedCommission (const estimatedCommission_type& x);

  // estimatedFees
  // 
  typedef ::xml_schema::decimal estimatedFees_type;
  typedef ::xsd::cxx::tree::traits< estimatedFees_type, char, ::xsd::cxx::tree::schema_type::decimal > estimatedFees_traits;

  const estimatedFees_type&
  estimatedFees () const;

  estimatedFees_type&
  estimatedFees ();

  void
  estimatedFees (const estimatedFees_type& x);

  // reserveQuantity
  // 
  typedef ::xml_schema::integer reserveQuantity_type;
  typedef ::xsd::cxx::tree::optional< reserveQuantity_type > reserveQuantity_optional;
  typedef ::xsd::cxx::tree::traits< reserveQuantity_type, char > reserveQuantity_traits;

  const reserveQuantity_optional&
  reserveQuantity () const;

  reserveQuantity_optional&
  reserveQuantity ();

  void
  reserveQuantity (const reserveQuantity_type& x);

  void
  reserveQuantity (const reserveQuantity_optional& x);

  // Constructors.
  //
  LegDetails (const legNumber_type&,
              const symbolInfo_type&,
              const symbolDescription_type&,
              const orderAction_type&,
              const orderedQuantity_type&,
              const estimatedCommission_type&,
              const estimatedFees_type&);

  LegDetails (const legNumber_type&,
              ::std::auto_ptr< symbolInfo_type >&,
              const symbolDescription_type&,
              const orderAction_type&,
              const orderedQuantity_type&,
              const estimatedCommission_type&,
              const estimatedFees_type&);

  LegDetails (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  LegDetails (const LegDetails& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual LegDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~LegDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< legNumber_type > legNumber_;
  ::xsd::cxx::tree::one< symbolInfo_type > symbolInfo_;
  ::xsd::cxx::tree::one< symbolDescription_type > symbolDescription_;
  ::xsd::cxx::tree::one< orderAction_type > orderAction_;
  ::xsd::cxx::tree::one< orderedQuantity_type > orderedQuantity_;
  filledQuantity_optional filledQuantity_;
  executedPrice_optional executedPrice_;
  ::xsd::cxx::tree::one< estimatedCommission_type > estimatedCommission_;
  ::xsd::cxx::tree::one< estimatedFees_type > estimatedFees_;
  reserveQuantity_optional reserveQuantity_;
};

class SymbolInfo: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // callPut
  // 
  typedef ::CallOrPut callPut_type;
  typedef ::xsd::cxx::tree::optional< callPut_type > callPut_optional;
  typedef ::xsd::cxx::tree::traits< callPut_type, char > callPut_traits;

  const callPut_optional&
  callPut () const;

  callPut_optional&
  callPut ();

  void
  callPut (const callPut_type& x);

  void
  callPut (const callPut_optional& x);

  void
  callPut (::std::auto_ptr< callPut_type > p);

  // expYear
  // 
  typedef ::xml_schema::int_ expYear_type;
  typedef ::xsd::cxx::tree::optional< expYear_type > expYear_optional;
  typedef ::xsd::cxx::tree::traits< expYear_type, char > expYear_traits;

  const expYear_optional&
  expYear () const;

  expYear_optional&
  expYear ();

  void
  expYear (const expYear_type& x);

  void
  expYear (const expYear_optional& x);

  // expMonth
  // 
  typedef ::xml_schema::int_ expMonth_type;
  typedef ::xsd::cxx::tree::optional< expMonth_type > expMonth_optional;
  typedef ::xsd::cxx::tree::traits< expMonth_type, char > expMonth_traits;

  const expMonth_optional&
  expMonth () const;

  expMonth_optional&
  expMonth ();

  void
  expMonth (const expMonth_type& x);

  void
  expMonth (const expMonth_optional& x);

  // expDay
  // 
  typedef ::xml_schema::int_ expDay_type;
  typedef ::xsd::cxx::tree::optional< expDay_type > expDay_optional;
  typedef ::xsd::cxx::tree::traits< expDay_type, char > expDay_traits;

  const expDay_optional&
  expDay () const;

  expDay_optional&
  expDay ();

  void
  expDay (const expDay_type& x);

  void
  expDay (const expDay_optional& x);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // Constructors.
  //
  SymbolInfo (const symbol_type&);

  SymbolInfo (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SymbolInfo (const SymbolInfo& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SymbolInfo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SymbolInfo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  callPut_optional callPut_;
  expYear_optional expYear_;
  expMonth_optional expMonth_;
  expDay_optional expDay_;
  strikePrice_optional strikePrice_;
};

class integer_or_empty: public ::xml_schema::string
{
  public:

  integer_or_empty (const char* v);

  integer_or_empty (const ::std::string& v);

  integer_or_empty (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const integer_or_empty& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual integer_or_empty*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class SymbolBase: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // type
  // 
  typedef ::OrderType type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  SymbolBase (const symbol_type&,
              const type_type&);

  SymbolBase (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  SymbolBase (const SymbolBase& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual SymbolBase*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~SymbolBase ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class boolean_or_empty: public ::xml_schema::string
{
  public:

  boolean_or_empty (const char* v);

  boolean_or_empty (const ::std::string& v);

  boolean_or_empty (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  boolean_or_empty (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  boolean_or_empty (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  boolean_or_empty (const boolean_or_empty& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual boolean_or_empty*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class MarketSession: public ::xml_schema::string
{
  public:
  enum value
  {
    REGULAR,
    EXTENDED
  };

  MarketSession (value v);

  MarketSession (const char* v);

  MarketSession (const ::std::string& v);

  MarketSession (const ::xml_schema::string& v);

  MarketSession (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MarketSession (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MarketSession (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  MarketSession (const MarketSession& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual MarketSession*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MarketSession&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_MarketSession_convert ();
  }

  protected:
  value
  _xsd_MarketSession_convert () const;

  public:
  static const char* const _xsd_MarketSession_literals_[2];
  static const value _xsd_MarketSession_indexes_[2];
};

class OrderType: public ::xml_schema::string
{
  public:
  enum value
  {
    BASIC_EQUITY,
    BASIC_OPTION
  };

  OrderType (value v);

  OrderType (const char* v);

  OrderType (const ::std::string& v);

  OrderType (const ::xml_schema::string& v);

  OrderType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  OrderType (const OrderType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual OrderType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderType_convert ();
  }

  protected:
  value
  _xsd_OrderType_convert () const;

  public:
  static const char* const _xsd_OrderType_literals_[2];
  static const value _xsd_OrderType_indexes_[2];
};

class CallOrPut: public ::xml_schema::string
{
  public:
  enum value
  {
    CALL,
    PUT
  };

  CallOrPut (value v);

  CallOrPut (const char* v);

  CallOrPut (const ::std::string& v);

  CallOrPut (const ::xml_schema::string& v);

  CallOrPut (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CallOrPut (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CallOrPut (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CallOrPut (const CallOrPut& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual CallOrPut*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CallOrPut&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_CallOrPut_convert ();
  }

  protected:
  value
  _xsd_CallOrPut_convert () const;

  public:
  static const char* const _xsd_CallOrPut_literals_[2];
  static const value _xsd_CallOrPut_indexes_[2];
};

class ConditionType: public ::xml_schema::string
{
  public:
  enum value
  {
    CONTINGENT_GTE,
    CONTINGENT_LTE
  };

  ConditionType (value v);

  ConditionType (const char* v);

  ConditionType (const ::std::string& v);

  ConditionType (const ::xml_schema::string& v);

  ConditionType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ConditionType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ConditionType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ConditionType (const ConditionType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ConditionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConditionType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_ConditionType_convert ();
  }

  protected:
  value
  _xsd_ConditionType_convert () const;

  public:
  static const char* const _xsd_ConditionType_literals_[2];
  static const value _xsd_ConditionType_indexes_[2];
};

class ConditionFollowPrice: public ::xml_schema::string
{
  public:
  enum value
  {
    ASK,
    BID,
    LAST
  };

  ConditionFollowPrice (value v);

  ConditionFollowPrice (const char* v);

  ConditionFollowPrice (const ::std::string& v);

  ConditionFollowPrice (const ::xml_schema::string& v);

  ConditionFollowPrice (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ConditionFollowPrice (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ConditionFollowPrice (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ConditionFollowPrice (const ConditionFollowPrice& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ConditionFollowPrice*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConditionFollowPrice&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_ConditionFollowPrice_convert ();
  }

  protected:
  value
  _xsd_ConditionFollowPrice_convert () const;

  public:
  static const char* const _xsd_ConditionFollowPrice_literals_[3];
  static const value _xsd_ConditionFollowPrice_indexes_[3];
};

class OrderStatus: public ::xml_schema::string
{
  public:
  enum value
  {
    OPEN,
    EXECUTED,
    CANCELLED,
    CANCEL_REQUESTED,
    EXPIRED,
    REJECTED
  };

  OrderStatus (value v);

  OrderStatus (const char* v);

  OrderStatus (const ::std::string& v);

  OrderStatus (const ::xml_schema::string& v);

  OrderStatus (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderStatus (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderStatus (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  OrderStatus (const OrderStatus& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual OrderStatus*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderStatus&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderStatus_convert ();
  }

  protected:
  value
  _xsd_OrderStatus_convert () const;

  public:
  static const char* const _xsd_OrderStatus_literals_[6];
  static const value _xsd_OrderStatus_indexes_[6];
};

class ViewOrderType: public ::xml_schema::string
{
  public:
  enum value
  {
    EQ,
    OPTN,
    ADVANCE_EQ,
    ADVANCE_OPTN,
    SPREADS,
    BUY_WRITES,
    CONTINGENT,
    ONE_CANCELS_ALL,
    ONE_TRIGGERS_ALL,
    ONE_TRIGGERS_OCO,
    BRACKETED
  };

  ViewOrderType (value v);

  ViewOrderType (const char* v);

  ViewOrderType (const ::std::string& v);

  ViewOrderType (const ::xml_schema::string& v);

  ViewOrderType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ViewOrderType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ViewOrderType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ViewOrderType (const ViewOrderType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ViewOrderType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ViewOrderType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_ViewOrderType_convert ();
  }

  protected:
  value
  _xsd_ViewOrderType_convert () const;

  public:
  static const char* const _xsd_ViewOrderType_literals_[11];
  static const value _xsd_ViewOrderType_indexes_[11];
};

class ETAppMessages: public ::xml_schema::type
{
  public:
  // msgDesc
  // 
  typedef ::xml_schema::string msgDesc_type;
  typedef ::xsd::cxx::tree::traits< msgDesc_type, char > msgDesc_traits;

  const msgDesc_type&
  msgDesc () const;

  msgDesc_type&
  msgDesc ();

  void
  msgDesc (const msgDesc_type& x);

  void
  msgDesc (::std::auto_ptr< msgDesc_type > p);

  // msgCode
  // 
  typedef ::xml_schema::int_ msgCode_type;
  typedef ::xsd::cxx::tree::traits< msgCode_type, char > msgCode_traits;

  const msgCode_type&
  msgCode () const;

  msgCode_type&
  msgCode ();

  void
  msgCode (const msgCode_type& x);

  // Constructors.
  //
  ETAppMessages (const msgDesc_type&,
                 const msgCode_type&);

  ETAppMessages (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ETAppMessages (const ETAppMessages& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ETAppMessages*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ETAppMessages ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< msgDesc_type > msgDesc_;
  ::xsd::cxx::tree::one< msgCode_type > msgCode_;
};

class ETMessages: public ::xml_schema::type
{
  public:
  // message
  // 
  typedef ::ETAppMessages message_type;
  typedef ::xsd::cxx::tree::sequence< message_type > message_sequence;
  typedef message_sequence::iterator message_iterator;
  typedef message_sequence::const_iterator message_const_iterator;
  typedef ::xsd::cxx::tree::traits< message_type, char > message_traits;

  const message_sequence&
  message () const;

  message_sequence&
  message ();

  void
  message (const message_sequence& s);

  // Constructors.
  //
  ETMessages ();

  ETMessages (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  ETMessages (const ETMessages& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual ETMessages*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ETMessages ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  message_sequence message_;
};

class ETAppMessagesWrapper: public ::xml_schema::type
{
  public:
  // message
  // 
  typedef ::ETAppMessages message_type;
  typedef ::xsd::cxx::tree::traits< message_type, char > message_traits;

  const message_type&
  message () const;

  message_type&
  message ();

  void
  message (const message_type& x);

  void
  message (::std::auto_ptr< message_type > p);

  // Constructors.
  //
  ETAppMessagesWrapper (const message_type&);

  ETAppMessagesWrapper (::std::auto_ptr< message_type >&);

  ETAppMessagesWrapper (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ETAppMessagesWrapper (const ETAppMessagesWrapper& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ETAppMessagesWrapper*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ETAppMessagesWrapper ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< message_type > message_;
};

class cancelOrder: public ::xml_schema::type
{
  public:
  // cancelOrderRequest
  // 
  typedef ::CancelOrderRequest cancelOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< cancelOrderRequest_type, char > cancelOrderRequest_traits;

  const cancelOrderRequest_type&
  cancelOrderRequest () const;

  cancelOrderRequest_type&
  cancelOrderRequest ();

  void
  cancelOrderRequest (const cancelOrderRequest_type& x);

  void
  cancelOrderRequest (::std::auto_ptr< cancelOrderRequest_type > p);

  // Constructors.
  //
  cancelOrder (const cancelOrderRequest_type&);

  cancelOrder (::std::auto_ptr< cancelOrderRequest_type >&);

  cancelOrder (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  cancelOrder (const cancelOrder& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual cancelOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cancelOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cancelOrderRequest_type > cancelOrderRequest_;
};

class CancelOrderResponse: public ::xml_schema::type
{
  public:
  // cancelResponse
  // 
  typedef ::CancelResponse cancelResponse_type;
  typedef ::xsd::cxx::tree::traits< cancelResponse_type, char > cancelResponse_traits;

  const cancelResponse_type&
  cancelResponse () const;

  cancelResponse_type&
  cancelResponse ();

  void
  cancelResponse (const cancelResponse_type& x);

  void
  cancelResponse (::std::auto_ptr< cancelResponse_type > p);

  // Constructors.
  //
  CancelOrderResponse (const cancelResponse_type&);

  CancelOrderResponse (::std::auto_ptr< cancelResponse_type >&);

  CancelOrderResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  CancelOrderResponse (const CancelOrderResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual CancelOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CancelOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cancelResponse_type > cancelResponse_;
};

class previewChangeEquityOrder: public ::xml_schema::type
{
  public:
  // changeEquityOrderRequest
  // 
  typedef ::ChangeEquityOrderRequest changeEquityOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< changeEquityOrderRequest_type, char > changeEquityOrderRequest_traits;

  const changeEquityOrderRequest_type&
  changeEquityOrderRequest () const;

  changeEquityOrderRequest_type&
  changeEquityOrderRequest ();

  void
  changeEquityOrderRequest (const changeEquityOrderRequest_type& x);

  void
  changeEquityOrderRequest (::std::auto_ptr< changeEquityOrderRequest_type > p);

  // Constructors.
  //
  previewChangeEquityOrder (const changeEquityOrderRequest_type&);

  previewChangeEquityOrder (::std::auto_ptr< changeEquityOrderRequest_type >&);

  previewChangeEquityOrder (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  previewChangeEquityOrder (const previewChangeEquityOrder& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual previewChangeEquityOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~previewChangeEquityOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< changeEquityOrderRequest_type > changeEquityOrderRequest_;
};

class placeChangeEquityOrder: public ::xml_schema::type
{
  public:
  // changeEquityOrderRequest
  // 
  typedef ::ChangeEquityOrderRequest changeEquityOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< changeEquityOrderRequest_type, char > changeEquityOrderRequest_traits;

  const changeEquityOrderRequest_type&
  changeEquityOrderRequest () const;

  changeEquityOrderRequest_type&
  changeEquityOrderRequest ();

  void
  changeEquityOrderRequest (const changeEquityOrderRequest_type& x);

  void
  changeEquityOrderRequest (::std::auto_ptr< changeEquityOrderRequest_type > p);

  // Constructors.
  //
  placeChangeEquityOrder (const changeEquityOrderRequest_type&);

  placeChangeEquityOrder (::std::auto_ptr< changeEquityOrderRequest_type >&);

  placeChangeEquityOrder (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  placeChangeEquityOrder (const placeChangeEquityOrder& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual placeChangeEquityOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~placeChangeEquityOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< changeEquityOrderRequest_type > changeEquityOrderRequest_;
};

class priceType: public ::xml_schema::string
{
  public:
  enum value
  {
    MARKET,
    LIMIT,
    STOP,
    STOP_LIMIT,
    MARKET_ON_CLOSE
  };

  priceType (value v);

  priceType (const char* v);

  priceType (const ::std::string& v);

  priceType (const ::xml_schema::string& v);

  priceType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  priceType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  priceType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  priceType (const priceType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual priceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  priceType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_priceType_convert ();
  }

  protected:
  value
  _xsd_priceType_convert () const;

  public:
  static const char* const _xsd_priceType_literals_[5];
  static const value _xsd_priceType_indexes_[5];
};

class orderTerm: public ::xml_schema::string
{
  public:
  enum value
  {
    GOOD_UNTIL_CANCEL,
    GOOD_FOR_DAY,
    IMMEDIATE_OR_CANCEL,
    FILL_OR_KILL
  };

  orderTerm (value v);

  orderTerm (const char* v);

  orderTerm (const ::std::string& v);

  orderTerm (const ::xml_schema::string& v);

  orderTerm (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  orderTerm (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  orderTerm (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  orderTerm (const orderTerm& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual orderTerm*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  orderTerm&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_orderTerm_convert ();
  }

  protected:
  value
  _xsd_orderTerm_convert () const;

  public:
  static const char* const _xsd_orderTerm_literals_[4];
  static const value _xsd_orderTerm_indexes_[4];
};

class PreviewChangeEquityOrderResponse: public ::xml_schema::type
{
  public:
  // equityOrderResponse
  // 
  typedef ::ChangeEquityOrderResponse equityOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< equityOrderResponse_type, char > equityOrderResponse_traits;

  const equityOrderResponse_type&
  equityOrderResponse () const;

  equityOrderResponse_type&
  equityOrderResponse ();

  void
  equityOrderResponse (const equityOrderResponse_type& x);

  void
  equityOrderResponse (::std::auto_ptr< equityOrderResponse_type > p);

  // Constructors.
  //
  PreviewChangeEquityOrderResponse (const equityOrderResponse_type&);

  PreviewChangeEquityOrderResponse (::std::auto_ptr< equityOrderResponse_type >&);

  PreviewChangeEquityOrderResponse (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  PreviewChangeEquityOrderResponse (const PreviewChangeEquityOrderResponse& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual PreviewChangeEquityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewChangeEquityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< equityOrderResponse_type > equityOrderResponse_;
};

class PlaceChangeEquityOrderResponse: public ::xml_schema::type
{
  public:
  // equityOrderResponse
  // 
  typedef ::ChangeEquityOrderResponse equityOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< equityOrderResponse_type, char > equityOrderResponse_traits;

  const equityOrderResponse_type&
  equityOrderResponse () const;

  equityOrderResponse_type&
  equityOrderResponse ();

  void
  equityOrderResponse (const equityOrderResponse_type& x);

  void
  equityOrderResponse (::std::auto_ptr< equityOrderResponse_type > p);

  // Constructors.
  //
  PlaceChangeEquityOrderResponse (const equityOrderResponse_type&);

  PlaceChangeEquityOrderResponse (::std::auto_ptr< equityOrderResponse_type >&);

  PlaceChangeEquityOrderResponse (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  PlaceChangeEquityOrderResponse (const PlaceChangeEquityOrderResponse& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual PlaceChangeEquityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceChangeEquityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< equityOrderResponse_type > equityOrderResponse_;
};

class previewChangeOptionOrder: public ::xml_schema::type
{
  public:
  // changeOptionOrderRequest
  // 
  typedef ::ChangeOptionOrderRequest changeOptionOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< changeOptionOrderRequest_type, char > changeOptionOrderRequest_traits;

  const changeOptionOrderRequest_type&
  changeOptionOrderRequest () const;

  changeOptionOrderRequest_type&
  changeOptionOrderRequest ();

  void
  changeOptionOrderRequest (const changeOptionOrderRequest_type& x);

  void
  changeOptionOrderRequest (::std::auto_ptr< changeOptionOrderRequest_type > p);

  // Constructors.
  //
  previewChangeOptionOrder (const changeOptionOrderRequest_type&);

  previewChangeOptionOrder (::std::auto_ptr< changeOptionOrderRequest_type >&);

  previewChangeOptionOrder (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  previewChangeOptionOrder (const previewChangeOptionOrder& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual previewChangeOptionOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~previewChangeOptionOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< changeOptionOrderRequest_type > changeOptionOrderRequest_;
};

class placeChangeOptionOrder: public ::xml_schema::type
{
  public:
  // changeOptionOrderRequest
  // 
  typedef ::ChangeOptionOrderRequest changeOptionOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< changeOptionOrderRequest_type, char > changeOptionOrderRequest_traits;

  const changeOptionOrderRequest_type&
  changeOptionOrderRequest () const;

  changeOptionOrderRequest_type&
  changeOptionOrderRequest ();

  void
  changeOptionOrderRequest (const changeOptionOrderRequest_type& x);

  void
  changeOptionOrderRequest (::std::auto_ptr< changeOptionOrderRequest_type > p);

  // Constructors.
  //
  placeChangeOptionOrder (const changeOptionOrderRequest_type&);

  placeChangeOptionOrder (::std::auto_ptr< changeOptionOrderRequest_type >&);

  placeChangeOptionOrder (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  placeChangeOptionOrder (const placeChangeOptionOrder& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual placeChangeOptionOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~placeChangeOptionOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< changeOptionOrderRequest_type > changeOptionOrderRequest_;
};

class priceType1: public ::xml_schema::string
{
  public:
  enum value
  {
    MARKET,
    LIMIT,
    STOP,
    STOP_LIMIT
  };

  priceType1 (value v);

  priceType1 (const char* v);

  priceType1 (const ::std::string& v);

  priceType1 (const ::xml_schema::string& v);

  priceType1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  priceType1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  priceType1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  priceType1 (const priceType1& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual priceType1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  priceType1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_priceType1_convert ();
  }

  protected:
  value
  _xsd_priceType1_convert () const;

  public:
  static const char* const _xsd_priceType1_literals_[4];
  static const value _xsd_priceType1_indexes_[4];
};

class orderTerm1: public ::xml_schema::string
{
  public:
  enum value
  {
    GOOD_UNTIL_CANCEL,
    GOOD_FOR_DAY,
    IMMEDIATE_OR_CANCEL,
    FILL_OR_KILL
  };

  orderTerm1 (value v);

  orderTerm1 (const char* v);

  orderTerm1 (const ::std::string& v);

  orderTerm1 (const ::xml_schema::string& v);

  orderTerm1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  orderTerm1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  orderTerm1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  orderTerm1 (const orderTerm1& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual orderTerm1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  orderTerm1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_orderTerm1_convert ();
  }

  protected:
  value
  _xsd_orderTerm1_convert () const;

  public:
  static const char* const _xsd_orderTerm1_literals_[4];
  static const value _xsd_orderTerm1_indexes_[4];
};

class PreviewChangeOptionOrderResponse: public ::xml_schema::type
{
  public:
  // optionOrderResponse
  // 
  typedef ::ChangeOptionOrderResponse optionOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< optionOrderResponse_type, char > optionOrderResponse_traits;

  const optionOrderResponse_type&
  optionOrderResponse () const;

  optionOrderResponse_type&
  optionOrderResponse ();

  void
  optionOrderResponse (const optionOrderResponse_type& x);

  void
  optionOrderResponse (::std::auto_ptr< optionOrderResponse_type > p);

  // Constructors.
  //
  PreviewChangeOptionOrderResponse (const optionOrderResponse_type&);

  PreviewChangeOptionOrderResponse (::std::auto_ptr< optionOrderResponse_type >&);

  PreviewChangeOptionOrderResponse (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  PreviewChangeOptionOrderResponse (const PreviewChangeOptionOrderResponse& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual PreviewChangeOptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewChangeOptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< optionOrderResponse_type > optionOrderResponse_;
};

class PlaceChangeOptionOrderResponse: public ::xml_schema::type
{
  public:
  // optionOrderResponse
  // 
  typedef ::ChangeOptionOrderResponse optionOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< optionOrderResponse_type, char > optionOrderResponse_traits;

  const optionOrderResponse_type&
  optionOrderResponse () const;

  optionOrderResponse_type&
  optionOrderResponse ();

  void
  optionOrderResponse (const optionOrderResponse_type& x);

  void
  optionOrderResponse (::std::auto_ptr< optionOrderResponse_type > p);

  // Constructors.
  //
  PlaceChangeOptionOrderResponse (const optionOrderResponse_type&);

  PlaceChangeOptionOrderResponse (::std::auto_ptr< optionOrderResponse_type >&);

  PlaceChangeOptionOrderResponse (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  PlaceChangeOptionOrderResponse (const PlaceChangeOptionOrderResponse& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual PlaceChangeOptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceChangeOptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< optionOrderResponse_type > optionOrderResponse_;
};

class routingDestination: public ::xml_schema::string
{
  public:
  enum value
  {
    AUTO,
    ARCA,
    NSDQ,
    NYSE
  };

  routingDestination (value v);

  routingDestination (const char* v);

  routingDestination (const ::std::string& v);

  routingDestination (const ::xml_schema::string& v);

  routingDestination (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  routingDestination (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  routingDestination (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  routingDestination (const routingDestination& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual routingDestination*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  routingDestination&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_routingDestination_convert ();
  }

  protected:
  value
  _xsd_routingDestination_convert () const;

  public:
  static const char* const _xsd_routingDestination_literals_[4];
  static const value _xsd_routingDestination_indexes_[4];
};

class PreviewEquityOrder: public ::xml_schema::type
{
  public:
  // EquityOrderRequest
  // 
  typedef ::equityOrderRequest EquityOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< EquityOrderRequest_type, char > EquityOrderRequest_traits;

  const EquityOrderRequest_type&
  EquityOrderRequest () const;

  EquityOrderRequest_type&
  EquityOrderRequest ();

  void
  EquityOrderRequest (const EquityOrderRequest_type& x);

  void
  EquityOrderRequest (::std::auto_ptr< EquityOrderRequest_type > p);

  // Constructors.
  //
  PreviewEquityOrder (const EquityOrderRequest_type&);

  PreviewEquityOrder (::std::auto_ptr< EquityOrderRequest_type >&);

  PreviewEquityOrder (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  PreviewEquityOrder (const PreviewEquityOrder& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual PreviewEquityOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewEquityOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< EquityOrderRequest_type > EquityOrderRequest_;
};

class PreviewEquityOrderResponse: public ::xml_schema::type
{
  public:
  // equityOrderResponse
  // 
  typedef ::equityOrderResponse equityOrderResponse_type;
  typedef ::xsd::cxx::tree::optional< equityOrderResponse_type > equityOrderResponse_optional;
  typedef ::xsd::cxx::tree::traits< equityOrderResponse_type, char > equityOrderResponse_traits;

  const equityOrderResponse_optional&
  equityOrderResponse () const;

  equityOrderResponse_optional&
  equityOrderResponse ();

  void
  equityOrderResponse (const equityOrderResponse_type& x);

  void
  equityOrderResponse (const equityOrderResponse_optional& x);

  void
  equityOrderResponse (::std::auto_ptr< equityOrderResponse_type > p);

  // Constructors.
  //
  PreviewEquityOrderResponse ();

  PreviewEquityOrderResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  PreviewEquityOrderResponse (const PreviewEquityOrderResponse& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual PreviewEquityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewEquityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  equityOrderResponse_optional equityOrderResponse_;
};

class PlaceEquityOrder: public ::xml_schema::type
{
  public:
  // EquityOrderRequest
  // 
  typedef ::equityOrderRequest EquityOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< EquityOrderRequest_type, char > EquityOrderRequest_traits;

  const EquityOrderRequest_type&
  EquityOrderRequest () const;

  EquityOrderRequest_type&
  EquityOrderRequest ();

  void
  EquityOrderRequest (const EquityOrderRequest_type& x);

  void
  EquityOrderRequest (::std::auto_ptr< EquityOrderRequest_type > p);

  // Constructors.
  //
  PlaceEquityOrder (const EquityOrderRequest_type&);

  PlaceEquityOrder (::std::auto_ptr< EquityOrderRequest_type >&);

  PlaceEquityOrder (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  PlaceEquityOrder (const PlaceEquityOrder& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual PlaceEquityOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceEquityOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< EquityOrderRequest_type > EquityOrderRequest_;
};

class PlaceEquityOrderResponse: public ::xml_schema::type
{
  public:
  // equityOrderResponse
  // 
  typedef ::equityOrderResponse equityOrderResponse_type;
  typedef ::xsd::cxx::tree::optional< equityOrderResponse_type > equityOrderResponse_optional;
  typedef ::xsd::cxx::tree::traits< equityOrderResponse_type, char > equityOrderResponse_traits;

  const equityOrderResponse_optional&
  equityOrderResponse () const;

  equityOrderResponse_optional&
  equityOrderResponse ();

  void
  equityOrderResponse (const equityOrderResponse_type& x);

  void
  equityOrderResponse (const equityOrderResponse_optional& x);

  void
  equityOrderResponse (::std::auto_ptr< equityOrderResponse_type > p);

  // Constructors.
  //
  PlaceEquityOrderResponse ();

  PlaceEquityOrderResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  PlaceEquityOrderResponse (const PlaceEquityOrderResponse& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual PlaceEquityOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceEquityOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  equityOrderResponse_optional equityOrderResponse_;
};

class routingDestination1: public ::xml_schema::string
{
  public:
  enum value
  {
    AUTO,
    AMEX,
    BOX,
    CBOE,
    ISE,
    NOM,
    NYSE,
    PHX
  };

  routingDestination1 (value v);

  routingDestination1 (const char* v);

  routingDestination1 (const ::std::string& v);

  routingDestination1 (const ::xml_schema::string& v);

  routingDestination1 (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  routingDestination1 (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  routingDestination1 (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  routingDestination1 (const routingDestination1& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual routingDestination1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  routingDestination1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_routingDestination1_convert ();
  }

  protected:
  value
  _xsd_routingDestination1_convert () const;

  public:
  static const char* const _xsd_routingDestination1_literals_[8];
  static const value _xsd_routingDestination1_indexes_[8];
};

class PreviewOptionOrder: public ::xml_schema::type
{
  public:
  // OptionOrderRequest
  // 
  typedef ::OptionOrderRequest OptionOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< OptionOrderRequest_type, char > OptionOrderRequest_traits;

  const OptionOrderRequest_type&
  OptionOrderRequest () const;

  OptionOrderRequest_type&
  OptionOrderRequest ();

  void
  OptionOrderRequest (const OptionOrderRequest_type& x);

  void
  OptionOrderRequest (::std::auto_ptr< OptionOrderRequest_type > p);

  // Constructors.
  //
  PreviewOptionOrder (const OptionOrderRequest_type&);

  PreviewOptionOrder (::std::auto_ptr< OptionOrderRequest_type >&);

  PreviewOptionOrder (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  PreviewOptionOrder (const PreviewOptionOrder& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual PreviewOptionOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewOptionOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< OptionOrderRequest_type > OptionOrderRequest_;
};

class PreviewOptionOrderResponse: public ::xml_schema::type
{
  public:
  // optionOrderResponse
  // 
  typedef ::OptionOrderResponse optionOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< optionOrderResponse_type, char > optionOrderResponse_traits;

  const optionOrderResponse_type&
  optionOrderResponse () const;

  optionOrderResponse_type&
  optionOrderResponse ();

  void
  optionOrderResponse (const optionOrderResponse_type& x);

  void
  optionOrderResponse (::std::auto_ptr< optionOrderResponse_type > p);

  // Constructors.
  //
  PreviewOptionOrderResponse (const optionOrderResponse_type&);

  PreviewOptionOrderResponse (::std::auto_ptr< optionOrderResponse_type >&);

  PreviewOptionOrderResponse (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  PreviewOptionOrderResponse (const PreviewOptionOrderResponse& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual PreviewOptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PreviewOptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< optionOrderResponse_type > optionOrderResponse_;
};

class PlaceOptionOrder: public ::xml_schema::type
{
  public:
  // OptionOrderRequest
  // 
  typedef ::OptionOrderRequest OptionOrderRequest_type;
  typedef ::xsd::cxx::tree::traits< OptionOrderRequest_type, char > OptionOrderRequest_traits;

  const OptionOrderRequest_type&
  OptionOrderRequest () const;

  OptionOrderRequest_type&
  OptionOrderRequest ();

  void
  OptionOrderRequest (const OptionOrderRequest_type& x);

  void
  OptionOrderRequest (::std::auto_ptr< OptionOrderRequest_type > p);

  // Constructors.
  //
  PlaceOptionOrder (const OptionOrderRequest_type&);

  PlaceOptionOrder (::std::auto_ptr< OptionOrderRequest_type >&);

  PlaceOptionOrder (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  PlaceOptionOrder (const PlaceOptionOrder& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual PlaceOptionOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceOptionOrder ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< OptionOrderRequest_type > OptionOrderRequest_;
};

class PlaceOptionOrderResponse: public ::xml_schema::type
{
  public:
  // optionOrderResponse
  // 
  typedef ::OptionOrderResponse optionOrderResponse_type;
  typedef ::xsd::cxx::tree::traits< optionOrderResponse_type, char > optionOrderResponse_traits;

  const optionOrderResponse_type&
  optionOrderResponse () const;

  optionOrderResponse_type&
  optionOrderResponse ();

  void
  optionOrderResponse (const optionOrderResponse_type& x);

  void
  optionOrderResponse (::std::auto_ptr< optionOrderResponse_type > p);

  // Constructors.
  //
  PlaceOptionOrderResponse (const optionOrderResponse_type&);

  PlaceOptionOrderResponse (::std::auto_ptr< optionOrderResponse_type >&);

  PlaceOptionOrderResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  PlaceOptionOrderResponse (const PlaceOptionOrderResponse& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual PlaceOptionOrderResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlaceOptionOrderResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< optionOrderResponse_type > optionOrderResponse_;
};

class OrderListRequest: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // marker
  // 
  typedef ::xml_schema::string marker_type;
  typedef ::xsd::cxx::tree::optional< marker_type > marker_optional;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_optional&
  marker () const;

  marker_optional&
  marker ();

  void
  marker (const marker_type& x);

  void
  marker (const marker_optional& x);

  void
  marker (::std::auto_ptr< marker_type > p);

  // count
  // 
  typedef ::int_or_empty count_type;
  typedef ::xsd::cxx::tree::optional< count_type > count_optional;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_optional&
  count () const;

  count_optional&
  count ();

  void
  count (const count_type& x);

  void
  count (const count_optional& x);

  void
  count (::std::auto_ptr< count_type > p);

  static const count_type&
  count_default_value ();

  // Constructors.
  //
  OrderListRequest (const accountId_type&);

  OrderListRequest (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  OrderListRequest (const OrderListRequest& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual OrderListRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OrderListRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  marker_optional marker_;
  count_optional count_;
  static const count_type count_default_value_;
};

class GetOrderListResponse: public ::xml_schema::type
{
  public:
  // orderListResponse
  // 
  typedef ::OrderListResponse orderListResponse_type;
  typedef ::xsd::cxx::tree::optional< orderListResponse_type > orderListResponse_optional;
  typedef ::xsd::cxx::tree::traits< orderListResponse_type, char > orderListResponse_traits;

  const orderListResponse_optional&
  orderListResponse () const;

  orderListResponse_optional&
  orderListResponse ();

  void
  orderListResponse (const orderListResponse_type& x);

  void
  orderListResponse (const orderListResponse_optional& x);

  void
  orderListResponse (::std::auto_ptr< orderListResponse_type > p);

  // Constructors.
  //
  GetOrderListResponse ();

  GetOrderListResponse (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  GetOrderListResponse (const GetOrderListResponse& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual GetOrderListResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GetOrderListResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  orderListResponse_optional orderListResponse_;
};

class allOrNone: public ::xml_schema::string
{
  public:
  enum value
  {
    false_,
    true_
  };

  allOrNone (value v);

  allOrNone (const char* v);

  allOrNone (const ::std::string& v);

  allOrNone (const ::xml_schema::string& v);

  allOrNone (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  allOrNone (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  allOrNone (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  allOrNone (const allOrNone& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual allOrNone*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  allOrNone&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_allOrNone_convert ();
  }

  protected:
  value
  _xsd_allOrNone_convert () const;

  public:
  static const char* const _xsd_allOrNone_literals_[2];
  static const value _xsd_allOrNone_indexes_[2];
};

class reserveOrder: public ::xml_schema::string
{
  public:
  enum value
  {
    false_,
    true_
  };

  reserveOrder (value v);

  reserveOrder (const char* v);

  reserveOrder (const ::std::string& v);

  reserveOrder (const ::xml_schema::string& v);

  reserveOrder (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  reserveOrder (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  reserveOrder (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  reserveOrder (const reserveOrder& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual reserveOrder*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  reserveOrder&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_reserveOrder_convert ();
  }

  protected:
  value
  _xsd_reserveOrder_convert () const;

  public:
  static const char* const _xsd_reserveOrder_literals_[2];
  static const value _xsd_reserveOrder_indexes_[2];
};

class allOrNone1: public ::xml_schema::string
{
  public:
  enum value
  {
    false_,
    true_
  };

  allOrNone1 (value v);

  allOrNone1 (const char* v);

  allOrNone1 (const ::std::string& v);

  allOrNone1 (const ::xml_schema::string& v);

  allOrNone1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  allOrNone1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  allOrNone1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  allOrNone1 (const allOrNone1& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual allOrNone1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  allOrNone1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_allOrNone1_convert ();
  }

  protected:
  value
  _xsd_allOrNone1_convert () const;

  public:
  static const char* const _xsd_allOrNone1_literals_[2];
  static const value _xsd_allOrNone1_indexes_[2];
};

class reserveOrder1: public ::xml_schema::string
{
  public:
  enum value
  {
    false_,
    true_
  };

  reserveOrder1 (value v);

  reserveOrder1 (const char* v);

  reserveOrder1 (const ::std::string& v);

  reserveOrder1 (const ::xml_schema::string& v);

  reserveOrder1 (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  reserveOrder1 (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  reserveOrder1 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  reserveOrder1 (const reserveOrder1& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual reserveOrder1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  reserveOrder1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_reserveOrder1_convert ();
  }

  protected:
  value
  _xsd_reserveOrder1_convert () const;

  public:
  static const char* const _xsd_reserveOrder1_literals_[2];
  static const value _xsd_reserveOrder1_indexes_[2];
};

class Error: public ::xml_schema::type
{
  public:
  // ErrorCode
  // 
  typedef ::xml_schema::int_ ErrorCode_type;
  typedef ::xsd::cxx::tree::traits< ErrorCode_type, char > ErrorCode_traits;

  const ErrorCode_type&
  ErrorCode () const;

  ErrorCode_type&
  ErrorCode ();

  void
  ErrorCode (const ErrorCode_type& x);

  // ErrorMessage
  // 
  typedef ::xml_schema::string ErrorMessage_type;
  typedef ::xsd::cxx::tree::traits< ErrorMessage_type, char > ErrorMessage_traits;

  const ErrorMessage_type&
  ErrorMessage () const;

  ErrorMessage_type&
  ErrorMessage ();

  void
  ErrorMessage (const ErrorMessage_type& x);

  void
  ErrorMessage (::std::auto_ptr< ErrorMessage_type > p);

  // httpCode
  // 
  typedef ::xml_schema::int_ httpCode_type;
  typedef ::xsd::cxx::tree::optional< httpCode_type > httpCode_optional;
  typedef ::xsd::cxx::tree::traits< httpCode_type, char > httpCode_traits;

  const httpCode_optional&
  httpCode () const;

  httpCode_optional&
  httpCode ();

  void
  httpCode (const httpCode_type& x);

  void
  httpCode (const httpCode_optional& x);

  // Constructors.
  //
  Error (const ErrorCode_type&,
         const ErrorMessage_type&);

  Error (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Error (const Error& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Error*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Error ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ErrorCode_type > ErrorCode_;
  ::xsd::cxx::tree::one< ErrorMessage_type > ErrorMessage_;
  httpCode_optional httpCode_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::cancelOrder >
cancelOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CancelOrderResponse >
CancelOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeEquityOrder >
previewChangeEquityOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeEquityOrder >
placeChangeEquityOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeEquityOrderResponse >
PreviewChangeEquityOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeEquityOrderResponse >
PlaceChangeEquityOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::previewChangeOptionOrder >
previewChangeOptionOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::placeChangeOptionOrder >
placeChangeOptionOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewChangeOptionOrderResponse >
PreviewChangeOptionOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceChangeOptionOrderResponse >
PlaceChangeOptionOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrder >
PreviewEquityOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewEquityOrderResponse >
PreviewEquityOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrder >
PlaceEquityOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceEquityOrderResponse >
PlaceEquityOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrder >
PreviewOptionOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PreviewOptionOrderResponse >
PreviewOptionOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrder >
PlaceOptionOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PlaceOptionOrderResponse >
PlaceOptionOrderResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::xml_schema::string >
accountId (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OrderListRequest >
OrderListRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::GetOrderListResponse >
GetOrderListResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::xml_schema::string >
reqId (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::xml_schema::string >
reqId (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::xml_schema::string >
reqId (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
reqId (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::ETMessages >
ETMessages_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ETMessages >
ETMessages_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ETMessages >
ETMessages_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ETMessages >
ETMessages_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Error >
Error_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
cancelOrder_ (::std::ostream& os,
              const ::cancelOrder& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

void
cancelOrder_ (::std::ostream& os,
              const ::cancelOrder& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

void
cancelOrder_ (::std::ostream& os,
              const ::cancelOrder& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
cancelOrder_ (::xercesc::XMLFormatTarget& ft,
              const ::cancelOrder& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

void
cancelOrder_ (::xercesc::XMLFormatTarget& ft,
              const ::cancelOrder& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

void
cancelOrder_ (::xercesc::XMLFormatTarget& ft,
              const ::cancelOrder& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
cancelOrder_ (::xercesc::DOMDocument& d,
              const ::cancelOrder& x,
              ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
cancelOrder_ (const ::cancelOrder& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const CancelOrderRequest&);

// Serialize to std::ostream.
//

void
CancelOrderResponse_ (::std::ostream& os,
                      const ::CancelOrderResponse& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
CancelOrderResponse_ (::std::ostream& os,
                      const ::CancelOrderResponse& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
CancelOrderResponse_ (::std::ostream& os,
                      const ::CancelOrderResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
CancelOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CancelOrderResponse& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
CancelOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CancelOrderResponse& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
CancelOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                      const ::CancelOrderResponse& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
CancelOrderResponse_ (::xercesc::DOMDocument& d,
                      const ::CancelOrderResponse& x,
                      ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
CancelOrderResponse_ (const ::CancelOrderResponse& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const CancelResponse&);

// Serialize to std::ostream.
//

void
previewChangeEquityOrder_ (::std::ostream& os,
                           const ::previewChangeEquityOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeEquityOrder_ (::std::ostream& os,
                           const ::previewChangeEquityOrder& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeEquityOrder_ (::std::ostream& os,
                           const ::previewChangeEquityOrder& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
previewChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeEquityOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeEquityOrder& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeEquityOrder& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
previewChangeEquityOrder_ (::xercesc::DOMDocument& d,
                           const ::previewChangeEquityOrder& x,
                           ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
previewChangeEquityOrder_ (const ::previewChangeEquityOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
placeChangeEquityOrder_ (::std::ostream& os,
                         const ::placeChangeEquityOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeEquityOrder_ (::std::ostream& os,
                         const ::placeChangeEquityOrder& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeEquityOrder_ (::std::ostream& os,
                         const ::placeChangeEquityOrder& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
placeChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeEquityOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeEquityOrder& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeEquityOrder& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
placeChangeEquityOrder_ (::xercesc::DOMDocument& d,
                         const ::placeChangeEquityOrder& x,
                         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
placeChangeEquityOrder_ (const ::placeChangeEquityOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ChangeOrderBase&);

void
operator<< (::xercesc::DOMElement&, const ChangeEquityOrderRequest&);

// Serialize to std::ostream.
//

void
PreviewChangeEquityOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeEquityOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeEquityOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeEquityOrderResponse& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewChangeEquityOrderResponse_ (::xercesc::DOMDocument& d,
                                   const ::PreviewChangeEquityOrderResponse& x,
                                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewChangeEquityOrderResponse_ (const ::PreviewChangeEquityOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceChangeEquityOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeEquityOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeEquityOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeEquityOrderResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceChangeEquityOrderResponse_ (::xercesc::DOMDocument& d,
                                 const ::PlaceChangeEquityOrderResponse& x,
                                 ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceChangeEquityOrderResponse_ (const ::PlaceChangeEquityOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ResultBase&);

void
operator<< (::xercesc::DOMElement&, const BasicOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const ChangeEquityOrderResponse&);

// Serialize to std::ostream.
//

void
previewChangeOptionOrder_ (::std::ostream& os,
                           const ::previewChangeOptionOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeOptionOrder_ (::std::ostream& os,
                           const ::previewChangeOptionOrder& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeOptionOrder_ (::std::ostream& os,
                           const ::previewChangeOptionOrder& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
previewChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeOptionOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeOptionOrder& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
previewChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                           const ::previewChangeOptionOrder& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
previewChangeOptionOrder_ (::xercesc::DOMDocument& d,
                           const ::previewChangeOptionOrder& x,
                           ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
previewChangeOptionOrder_ (const ::previewChangeOptionOrder& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
placeChangeOptionOrder_ (::std::ostream& os,
                         const ::placeChangeOptionOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeOptionOrder_ (::std::ostream& os,
                         const ::placeChangeOptionOrder& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeOptionOrder_ (::std::ostream& os,
                         const ::placeChangeOptionOrder& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
placeChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeOptionOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeOptionOrder& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

void
placeChangeOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                         const ::placeChangeOptionOrder& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
placeChangeOptionOrder_ (::xercesc::DOMDocument& d,
                         const ::placeChangeOptionOrder& x,
                         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
placeChangeOptionOrder_ (const ::placeChangeOptionOrder& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ChangeOptionOrderRequest&);

// Serialize to std::ostream.
//

void
PreviewChangeOptionOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeOptionOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeOptionOrderResponse_ (::std::ostream& os,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

void
PreviewChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                   const ::PreviewChangeOptionOrderResponse& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewChangeOptionOrderResponse_ (::xercesc::DOMDocument& d,
                                   const ::PreviewChangeOptionOrderResponse& x,
                                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewChangeOptionOrderResponse_ (const ::PreviewChangeOptionOrderResponse& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceChangeOptionOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeOptionOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeOptionOrderResponse_ (::std::ostream& os,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

void
PlaceChangeOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                                 const ::PlaceChangeOptionOrderResponse& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceChangeOptionOrderResponse_ (::xercesc::DOMDocument& d,
                                 const ::PlaceChangeOptionOrderResponse& x,
                                 ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceChangeOptionOrderResponse_ (const ::PlaceChangeOptionOrderResponse& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ChangeOptionOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const RequestBase&);

void
operator<< (::xercesc::DOMElement&, const BasicOrderRequest&);

void
operator<< (::xercesc::DOMElement&, const equityOrderRequest&);

void
operator<< (::xercesc::DOMElement&, const equityOrderResponse&);

// Serialize to std::ostream.
//

void
PreviewEquityOrder_ (::std::ostream& os,
                     const ::PreviewEquityOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewEquityOrder_ (::std::ostream& os,
                     const ::PreviewEquityOrder& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewEquityOrder_ (::std::ostream& os,
                     const ::PreviewEquityOrder& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewEquityOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewEquityOrder& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewEquityOrder& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewEquityOrder_ (::xercesc::DOMDocument& d,
                     const ::PreviewEquityOrder& x,
                     ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewEquityOrder_ (const ::PreviewEquityOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PreviewEquityOrderResponse_ (::std::ostream& os,
                             const ::PreviewEquityOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewEquityOrderResponse_ (::std::ostream& os,
                             const ::PreviewEquityOrderResponse& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewEquityOrderResponse_ (::std::ostream& os,
                             const ::PreviewEquityOrderResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewEquityOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewEquityOrderResponse& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewEquityOrderResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewEquityOrderResponse_ (::xercesc::DOMDocument& d,
                             const ::PreviewEquityOrderResponse& x,
                             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewEquityOrderResponse_ (const ::PreviewEquityOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceEquityOrder_ (::std::ostream& os,
                   const ::PlaceEquityOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceEquityOrder_ (::std::ostream& os,
                   const ::PlaceEquityOrder& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceEquityOrder_ (::std::ostream& os,
                   const ::PlaceEquityOrder& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceEquityOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceEquityOrder& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceEquityOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceEquityOrder& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceEquityOrder_ (::xercesc::DOMDocument& d,
                   const ::PlaceEquityOrder& x,
                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceEquityOrder_ (const ::PlaceEquityOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceEquityOrderResponse_ (::std::ostream& os,
                           const ::PlaceEquityOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceEquityOrderResponse_ (::std::ostream& os,
                           const ::PlaceEquityOrderResponse& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceEquityOrderResponse_ (::std::ostream& os,
                           const ::PlaceEquityOrderResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceEquityOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceEquityOrderResponse& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceEquityOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceEquityOrderResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceEquityOrderResponse_ (::xercesc::DOMDocument& d,
                           const ::PlaceEquityOrderResponse& x,
                           ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceEquityOrderResponse_ (const ::PlaceEquityOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const OrderAction&);

void
operator<< (::xercesc::DOMAttr&, const OrderAction&);

void
operator<< (::xml_schema::list_stream&,
            const OrderAction&);

void
operator<< (::xercesc::DOMElement&, const EquityOrderAction&);

void
operator<< (::xercesc::DOMAttr&, const EquityOrderAction&);

void
operator<< (::xml_schema::list_stream&,
            const EquityOrderAction&);

void
operator<< (::xercesc::DOMElement&, const PriceType&);

void
operator<< (::xercesc::DOMAttr&, const PriceType&);

void
operator<< (::xml_schema::list_stream&,
            const PriceType&);

void
operator<< (::xercesc::DOMElement&, const EquityPriceType&);

void
operator<< (::xercesc::DOMAttr&, const EquityPriceType&);

void
operator<< (::xml_schema::list_stream&,
            const EquityPriceType&);

void
operator<< (::xercesc::DOMElement&, const OrderRoutingDestination&);

void
operator<< (::xercesc::DOMAttr&, const OrderRoutingDestination&);

void
operator<< (::xml_schema::list_stream&,
            const OrderRoutingDestination&);

void
operator<< (::xercesc::DOMElement&, const EquityOrderRoutingDestination&);

void
operator<< (::xercesc::DOMAttr&, const EquityOrderRoutingDestination&);

void
operator<< (::xml_schema::list_stream&,
            const EquityOrderRoutingDestination&);

void
operator<< (::xercesc::DOMElement&, const OrderTerm&);

void
operator<< (::xercesc::DOMAttr&, const OrderTerm&);

void
operator<< (::xml_schema::list_stream&,
            const OrderTerm&);

void
operator<< (::xercesc::DOMElement&, const EquityOrderTerm&);

void
operator<< (::xercesc::DOMAttr&, const EquityOrderTerm&);

void
operator<< (::xml_schema::list_stream&,
            const EquityOrderTerm&);

void
operator<< (::xercesc::DOMElement&, const Month&);

void
operator<< (::xercesc::DOMAttr&, const Month&);

void
operator<< (::xml_schema::list_stream&,
            const Month&);

void
operator<< (::xercesc::DOMElement&, const OptionOrderRequest&);

void
operator<< (::xercesc::DOMElement&, const OptionSymbol&);

void
operator<< (::xercesc::DOMElement&, const OptionOrderResponse&);

// Serialize to std::ostream.
//

void
PreviewOptionOrder_ (::std::ostream& os,
                     const ::PreviewOptionOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewOptionOrder_ (::std::ostream& os,
                     const ::PreviewOptionOrder& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewOptionOrder_ (::std::ostream& os,
                     const ::PreviewOptionOrder& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewOptionOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewOptionOrder& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

void
PreviewOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                     const ::PreviewOptionOrder& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewOptionOrder_ (::xercesc::DOMDocument& d,
                     const ::PreviewOptionOrder& x,
                     ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewOptionOrder_ (const ::PreviewOptionOrder& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PreviewOptionOrderResponse_ (::std::ostream& os,
                             const ::PreviewOptionOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewOptionOrderResponse_ (::std::ostream& os,
                             const ::PreviewOptionOrderResponse& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewOptionOrderResponse_ (::std::ostream& os,
                             const ::PreviewOptionOrderResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PreviewOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewOptionOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewOptionOrderResponse& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

void
PreviewOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                             const ::PreviewOptionOrderResponse& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PreviewOptionOrderResponse_ (::xercesc::DOMDocument& d,
                             const ::PreviewOptionOrderResponse& x,
                             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PreviewOptionOrderResponse_ (const ::PreviewOptionOrderResponse& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceOptionOrder_ (::std::ostream& os,
                   const ::PlaceOptionOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceOptionOrder_ (::std::ostream& os,
                   const ::PlaceOptionOrder& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceOptionOrder_ (::std::ostream& os,
                   const ::PlaceOptionOrder& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceOptionOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceOptionOrder& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
PlaceOptionOrder_ (::xercesc::XMLFormatTarget& ft,
                   const ::PlaceOptionOrder& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceOptionOrder_ (::xercesc::DOMDocument& d,
                   const ::PlaceOptionOrder& x,
                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceOptionOrder_ (const ::PlaceOptionOrder& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
PlaceOptionOrderResponse_ (::std::ostream& os,
                           const ::PlaceOptionOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceOptionOrderResponse_ (::std::ostream& os,
                           const ::PlaceOptionOrderResponse& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceOptionOrderResponse_ (::std::ostream& os,
                           const ::PlaceOptionOrderResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
PlaceOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceOptionOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceOptionOrderResponse& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

void
PlaceOptionOrderResponse_ (::xercesc::XMLFormatTarget& ft,
                           const ::PlaceOptionOrderResponse& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
PlaceOptionOrderResponse_ (::xercesc::DOMDocument& d,
                           const ::PlaceOptionOrderResponse& x,
                           ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
PlaceOptionOrderResponse_ (const ::PlaceOptionOrderResponse& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const OptionOrderAction&);

void
operator<< (::xercesc::DOMAttr&, const OptionOrderAction&);

void
operator<< (::xml_schema::list_stream&,
            const OptionOrderAction&);

void
operator<< (::xercesc::DOMElement&, const OptionPriceType&);

void
operator<< (::xercesc::DOMAttr&, const OptionPriceType&);

void
operator<< (::xml_schema::list_stream&,
            const OptionPriceType&);

void
operator<< (::xercesc::DOMElement&, const OptionOrderRoutingDestination&);

void
operator<< (::xercesc::DOMAttr&, const OptionOrderRoutingDestination&);

void
operator<< (::xml_schema::list_stream&,
            const OptionOrderRoutingDestination&);

void
operator<< (::xercesc::DOMElement&, const OptionOrderTerm&);

void
operator<< (::xercesc::DOMAttr&, const OptionOrderTerm&);

void
operator<< (::xml_schema::list_stream&,
            const OptionOrderTerm&);

// Serialize to std::ostream.
//

void
accountId (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

void
accountId (::std::ostream& os,
           const ::xml_schema::string& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

void
accountId (::std::ostream& os,
           const ::xml_schema::string& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
accountId (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

void
accountId (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

void
accountId (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
accountId (::xercesc::DOMDocument& d,
           const ::xml_schema::string& x,
           ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
accountId (const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const int_or_empty&);

void
operator<< (::xercesc::DOMAttr&, const int_or_empty&);

void
operator<< (::xml_schema::list_stream&,
            const int_or_empty&);

void
operator<< (::xercesc::DOMElement&, const empty_string&);

void
operator<< (::xercesc::DOMAttr&, const empty_string&);

void
operator<< (::xml_schema::list_stream&,
            const empty_string&);

// Serialize to std::ostream.
//

void
OrderListRequest_ (::std::ostream& os,
                   const ::OrderListRequest& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
OrderListRequest_ (::std::ostream& os,
                   const ::OrderListRequest& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
OrderListRequest_ (::std::ostream& os,
                   const ::OrderListRequest& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
OrderListRequest_ (::xercesc::XMLFormatTarget& ft,
                   const ::OrderListRequest& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
OrderListRequest_ (::xercesc::XMLFormatTarget& ft,
                   const ::OrderListRequest& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

void
OrderListRequest_ (::xercesc::XMLFormatTarget& ft,
                   const ::OrderListRequest& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
OrderListRequest_ (::xercesc::DOMDocument& d,
                   const ::OrderListRequest& x,
                   ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
OrderListRequest_ (const ::OrderListRequest& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
GetOrderListResponse_ (::std::ostream& os,
                       const ::GetOrderListResponse& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

void
GetOrderListResponse_ (::std::ostream& os,
                       const ::GetOrderListResponse& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

void
GetOrderListResponse_ (::std::ostream& os,
                       const ::GetOrderListResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
GetOrderListResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::GetOrderListResponse& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

void
GetOrderListResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::GetOrderListResponse& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

void
GetOrderListResponse_ (::xercesc::XMLFormatTarget& ft,
                       const ::GetOrderListResponse& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
GetOrderListResponse_ (::xercesc::DOMDocument& d,
                       const ::GetOrderListResponse& x,
                       ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
GetOrderListResponse_ (const ::GetOrderListResponse& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const OrderListResponse&);

void
operator<< (::xercesc::DOMElement&, const orderDetails&);

void
operator<< (::xercesc::DOMElement&, const OrderDetails&);

void
operator<< (::xercesc::DOMElement&, const GroupOrder&);

void
operator<< (::xercesc::DOMElement&, const GroupOrderDetails&);

void
operator<< (::xercesc::DOMElement&, const order&);

void
operator<< (::xercesc::DOMElement&, const legDetails&);

void
operator<< (::xercesc::DOMElement&, const LegDetails&);

void
operator<< (::xercesc::DOMElement&, const SymbolInfo&);

void
operator<< (::xercesc::DOMElement&, const integer_or_empty&);

void
operator<< (::xercesc::DOMAttr&, const integer_or_empty&);

void
operator<< (::xml_schema::list_stream&,
            const integer_or_empty&);

void
operator<< (::xercesc::DOMElement&, const SymbolBase&);

void
operator<< (::xercesc::DOMElement&, const boolean_or_empty&);

void
operator<< (::xercesc::DOMAttr&, const boolean_or_empty&);

void
operator<< (::xml_schema::list_stream&,
            const boolean_or_empty&);

void
operator<< (::xercesc::DOMElement&, const MarketSession&);

void
operator<< (::xercesc::DOMAttr&, const MarketSession&);

void
operator<< (::xml_schema::list_stream&,
            const MarketSession&);

void
operator<< (::xercesc::DOMElement&, const OrderType&);

void
operator<< (::xercesc::DOMAttr&, const OrderType&);

void
operator<< (::xml_schema::list_stream&,
            const OrderType&);

void
operator<< (::xercesc::DOMElement&, const CallOrPut&);

void
operator<< (::xercesc::DOMAttr&, const CallOrPut&);

void
operator<< (::xml_schema::list_stream&,
            const CallOrPut&);

void
operator<< (::xercesc::DOMElement&, const ConditionType&);

void
operator<< (::xercesc::DOMAttr&, const ConditionType&);

void
operator<< (::xml_schema::list_stream&,
            const ConditionType&);

void
operator<< (::xercesc::DOMElement&, const ConditionFollowPrice&);

void
operator<< (::xercesc::DOMAttr&, const ConditionFollowPrice&);

void
operator<< (::xml_schema::list_stream&,
            const ConditionFollowPrice&);

void
operator<< (::xercesc::DOMElement&, const OrderStatus&);

void
operator<< (::xercesc::DOMAttr&, const OrderStatus&);

void
operator<< (::xml_schema::list_stream&,
            const OrderStatus&);

void
operator<< (::xercesc::DOMElement&, const ViewOrderType&);

void
operator<< (::xercesc::DOMAttr&, const ViewOrderType&);

void
operator<< (::xml_schema::list_stream&,
            const ViewOrderType&);

// Serialize to std::ostream.
//

void
reqId (::std::ostream& os,
       const ::xml_schema::string& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
reqId (::std::ostream& os,
       const ::xml_schema::string& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
reqId (::std::ostream& os,
       const ::xml_schema::string& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
reqId (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::string& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
reqId (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::string& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
reqId (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::string& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
reqId (::xercesc::DOMDocument& d,
       const ::xml_schema::string& x,
       ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
reqId (const ::xml_schema::string& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
ETMessages_ (::std::ostream& os,
             const ::ETMessages& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
ETMessages_ (::std::ostream& os,
             const ::ETMessages& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
ETMessages_ (::std::ostream& os,
             const ::ETMessages& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
ETMessages_ (::xercesc::XMLFormatTarget& ft,
             const ::ETMessages& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
ETMessages_ (::xercesc::XMLFormatTarget& ft,
             const ::ETMessages& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
ETMessages_ (::xercesc::XMLFormatTarget& ft,
             const ::ETMessages& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
ETMessages_ (::xercesc::DOMDocument& d,
             const ::ETMessages& x,
             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
ETMessages_ (const ::ETMessages& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ETAppMessages&);

void
operator<< (::xercesc::DOMElement&, const ETMessages&);

// Serialize to std::ostream.
//

void
Error_ (::std::ostream& os,
        const ::Error& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
Error_ (::std::ostream& os,
        const ::Error& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
Error_ (::std::ostream& os,
        const ::Error& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
Error_ (::xercesc::XMLFormatTarget& ft,
        const ::Error& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
Error_ (::xercesc::XMLFormatTarget& ft,
        const ::Error& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
Error_ (::xercesc::XMLFormatTarget& ft,
        const ::Error& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
Error_ (::xercesc::DOMDocument& d,
        const ::Error& x,
        ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
Error_ (const ::Error& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const ETAppMessagesWrapper&);

void
operator<< (::xercesc::DOMElement&, const cancelOrder&);

void
operator<< (::xercesc::DOMElement&, const CancelOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const previewChangeEquityOrder&);

void
operator<< (::xercesc::DOMElement&, const placeChangeEquityOrder&);

void
operator<< (::xercesc::DOMElement&, const priceType&);

void
operator<< (::xercesc::DOMAttr&, const priceType&);

void
operator<< (::xml_schema::list_stream&,
            const priceType&);

void
operator<< (::xercesc::DOMElement&, const orderTerm&);

void
operator<< (::xercesc::DOMAttr&, const orderTerm&);

void
operator<< (::xml_schema::list_stream&,
            const orderTerm&);

void
operator<< (::xercesc::DOMElement&, const PreviewChangeEquityOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const PlaceChangeEquityOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const previewChangeOptionOrder&);

void
operator<< (::xercesc::DOMElement&, const placeChangeOptionOrder&);

void
operator<< (::xercesc::DOMElement&, const priceType1&);

void
operator<< (::xercesc::DOMAttr&, const priceType1&);

void
operator<< (::xml_schema::list_stream&,
            const priceType1&);

void
operator<< (::xercesc::DOMElement&, const orderTerm1&);

void
operator<< (::xercesc::DOMAttr&, const orderTerm1&);

void
operator<< (::xml_schema::list_stream&,
            const orderTerm1&);

void
operator<< (::xercesc::DOMElement&, const PreviewChangeOptionOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const PlaceChangeOptionOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const routingDestination&);

void
operator<< (::xercesc::DOMAttr&, const routingDestination&);

void
operator<< (::xml_schema::list_stream&,
            const routingDestination&);

void
operator<< (::xercesc::DOMElement&, const PreviewEquityOrder&);

void
operator<< (::xercesc::DOMElement&, const PreviewEquityOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const PlaceEquityOrder&);

void
operator<< (::xercesc::DOMElement&, const PlaceEquityOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const routingDestination1&);

void
operator<< (::xercesc::DOMAttr&, const routingDestination1&);

void
operator<< (::xml_schema::list_stream&,
            const routingDestination1&);

void
operator<< (::xercesc::DOMElement&, const PreviewOptionOrder&);

void
operator<< (::xercesc::DOMElement&, const PreviewOptionOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const PlaceOptionOrder&);

void
operator<< (::xercesc::DOMElement&, const PlaceOptionOrderResponse&);

void
operator<< (::xercesc::DOMElement&, const OrderListRequest&);

void
operator<< (::xercesc::DOMElement&, const GetOrderListResponse&);

void
operator<< (::xercesc::DOMElement&, const allOrNone&);

void
operator<< (::xercesc::DOMAttr&, const allOrNone&);

void
operator<< (::xml_schema::list_stream&,
            const allOrNone&);

void
operator<< (::xercesc::DOMElement&, const reserveOrder&);

void
operator<< (::xercesc::DOMAttr&, const reserveOrder&);

void
operator<< (::xml_schema::list_stream&,
            const reserveOrder&);

void
operator<< (::xercesc::DOMElement&, const allOrNone1&);

void
operator<< (::xercesc::DOMAttr&, const allOrNone1&);

void
operator<< (::xml_schema::list_stream&,
            const allOrNone1&);

void
operator<< (::xercesc::DOMElement&, const reserveOrder1&);

void
operator<< (::xercesc::DOMAttr&, const reserveOrder1&);

void
operator<< (::xml_schema::list_stream&,
            const reserveOrder1&);

void
operator<< (::xercesc::DOMElement&, const Error&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_FILES_ORDER_SVC_HXX
