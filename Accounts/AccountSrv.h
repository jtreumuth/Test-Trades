// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef ACCOUNT_SRV_H
#define ACCOUNT_SRV_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class accountPositions;
class accountPosition;
class productId;
class alerts;
class alert;
class cashAccountBalance;
class balance;
class marginAccountBalance;
class accountDTBalance;
class account;
class longOrShort;
class marginable;
class alertCategory;
class alertReadFlag;
class dayTraderStatus;
class marginLevel;
class optionLevel;
class callPut;
class expYear;
class expMonth;
class expDay;
class symbol;
class int_or_empty;
class empty_string;
class accountStatus;
class transactionsRequest;
class AccountPositionsResponse;
class AlertsResponse;
class DeleteAlertResponse;
class AlertDetailsResponse;
class AccountBalanceResponse;
class AccountListResponse;
class Error;
class accountPositionsRequest;
class accountIdList;
class transactionDetails;
class transactions;
class callPut1;
class transaction;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class accountPositions: public ::xml_schema::type
{
  public:
  // AccountPosition
  // 
  typedef ::accountPosition AccountPosition_type;
  typedef ::xsd::cxx::tree::sequence< AccountPosition_type > AccountPosition_sequence;
  typedef AccountPosition_sequence::iterator AccountPosition_iterator;
  typedef AccountPosition_sequence::const_iterator AccountPosition_const_iterator;
  typedef ::xsd::cxx::tree::traits< AccountPosition_type, char > AccountPosition_traits;

  const AccountPosition_sequence&
  AccountPosition () const;

  AccountPosition_sequence&
  AccountPosition ();

  void
  AccountPosition (const AccountPosition_sequence& s);

  // Constructors.
  //
  accountPositions ();

  accountPositions (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  accountPositions (const accountPositions& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual accountPositions*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountPositions ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AccountPosition_sequence AccountPosition_;
};

class accountPosition: public ::xml_schema::type
{
  public:
  // costBasis
  // 
  typedef ::xml_schema::decimal costBasis_type;
  typedef ::xsd::cxx::tree::optional< costBasis_type > costBasis_optional;
  typedef ::xsd::cxx::tree::traits< costBasis_type, char, ::xsd::cxx::tree::schema_type::decimal > costBasis_traits;

  const costBasis_optional&
  costBasis () const;

  costBasis_optional&
  costBasis ();

  void
  costBasis (const costBasis_type& x);

  void
  costBasis (const costBasis_optional& x);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_type&
  description () const;

  description_type&
  description ();

  void
  description (const description_type& x);

  void
  description (::std::auto_ptr< description_type > p);

  // longOrShort
  // 
  typedef ::longOrShort longOrShort_type;
  typedef ::xsd::cxx::tree::traits< longOrShort_type, char > longOrShort_traits;

  const longOrShort_type&
  longOrShort () const;

  longOrShort_type&
  longOrShort ();

  void
  longOrShort (const longOrShort_type& x);

  void
  longOrShort (::std::auto_ptr< longOrShort_type > p);

  // marginable
  // 
  typedef ::xml_schema::boolean marginable_type;
  typedef ::xsd::cxx::tree::optional< marginable_type > marginable_optional;
  typedef ::xsd::cxx::tree::traits< marginable_type, char > marginable_traits;

  const marginable_optional&
  marginable () const;

  marginable_optional&
  marginable ();

  void
  marginable (const marginable_type& x);

  void
  marginable (const marginable_optional& x);

  // productId
  // 
  typedef ::productId productId_type;
  typedef ::xsd::cxx::tree::traits< productId_type, char > productId_traits;

  const productId_type&
  productId () const;

  productId_type&
  productId ();

  void
  productId (const productId_type& x);

  void
  productId (::std::auto_ptr< productId_type > p);

  // qty
  // 
  typedef ::xml_schema::decimal qty_type;
  typedef ::xsd::cxx::tree::traits< qty_type, char, ::xsd::cxx::tree::schema_type::decimal > qty_traits;

  const qty_type&
  qty () const;

  qty_type&
  qty ();

  void
  qty (const qty_type& x);

  // marketValue
  // 
  typedef ::xml_schema::decimal marketValue_type;
  typedef ::xsd::cxx::tree::traits< marketValue_type, char, ::xsd::cxx::tree::schema_type::decimal > marketValue_traits;

  const marketValue_type&
  marketValue () const;

  marketValue_type&
  marketValue ();

  void
  marketValue (const marketValue_type& x);

  // Constructors.
  //
  accountPosition (const description_type&,
                   const longOrShort_type&,
                   const productId_type&,
                   const qty_type&,
                   const marketValue_type&);

  accountPosition (const description_type&,
                   const longOrShort_type&,
                   ::std::auto_ptr< productId_type >&,
                   const qty_type&,
                   const marketValue_type&);

  accountPosition (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  accountPosition (const accountPosition& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual accountPosition*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountPosition ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  costBasis_optional costBasis_;
  ::xsd::cxx::tree::one< description_type > description_;
  ::xsd::cxx::tree::one< longOrShort_type > longOrShort_;
  marginable_optional marginable_;
  ::xsd::cxx::tree::one< productId_type > productId_;
  ::xsd::cxx::tree::one< qty_type > qty_;
  ::xsd::cxx::tree::one< marketValue_type > marketValue_;
};

class productId: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::symbol symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // typeCode
  // 
  typedef ::xml_schema::string typeCode_type;
  typedef ::xsd::cxx::tree::optional< typeCode_type > typeCode_optional;
  typedef ::xsd::cxx::tree::traits< typeCode_type, char > typeCode_traits;

  const typeCode_optional&
  typeCode () const;

  typeCode_optional&
  typeCode ();

  void
  typeCode (const typeCode_type& x);

  void
  typeCode (const typeCode_optional& x);

  void
  typeCode (::std::auto_ptr< typeCode_type > p);

  // callPut
  // 
  typedef ::callPut callPut_type;
  typedef ::xsd::cxx::tree::optional< callPut_type > callPut_optional;
  typedef ::xsd::cxx::tree::traits< callPut_type, char > callPut_traits;

  const callPut_optional&
  callPut () const;

  callPut_optional&
  callPut ();

  void
  callPut (const callPut_type& x);

  void
  callPut (const callPut_optional& x);

  void
  callPut (::std::auto_ptr< callPut_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // expYear
  // 
  typedef ::expYear expYear_type;
  typedef ::xsd::cxx::tree::optional< expYear_type > expYear_optional;
  typedef ::xsd::cxx::tree::traits< expYear_type, char > expYear_traits;

  const expYear_optional&
  expYear () const;

  expYear_optional&
  expYear ();

  void
  expYear (const expYear_type& x);

  void
  expYear (const expYear_optional& x);

  void
  expYear (::std::auto_ptr< expYear_type > p);

  // expMonth
  // 
  typedef ::expMonth expMonth_type;
  typedef ::xsd::cxx::tree::optional< expMonth_type > expMonth_optional;
  typedef ::xsd::cxx::tree::traits< expMonth_type, char > expMonth_traits;

  const expMonth_optional&
  expMonth () const;

  expMonth_optional&
  expMonth ();

  void
  expMonth (const expMonth_type& x);

  void
  expMonth (const expMonth_optional& x);

  void
  expMonth (::std::auto_ptr< expMonth_type > p);

  // expDay
  // 
  typedef ::expDay expDay_type;
  typedef ::xsd::cxx::tree::optional< expDay_type > expDay_optional;
  typedef ::xsd::cxx::tree::traits< expDay_type, char > expDay_traits;

  const expDay_optional&
  expDay () const;

  expDay_optional&
  expDay ();

  void
  expDay (const expDay_type& x);

  void
  expDay (const expDay_optional& x);

  void
  expDay (::std::auto_ptr< expDay_type > p);

  // Constructors.
  //
  productId ();

  productId (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  productId (const productId& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual productId*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~productId ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  symbol_optional symbol_;
  typeCode_optional typeCode_;
  callPut_optional callPut_;
  strikePrice_optional strikePrice_;
  expYear_optional expYear_;
  expMonth_optional expMonth_;
  expDay_optional expDay_;
};

class alerts: public ::xml_schema::type
{
  public:
  // Alert
  // 
  typedef ::alert Alert_type;
  typedef ::xsd::cxx::tree::sequence< Alert_type > Alert_sequence;
  typedef Alert_sequence::iterator Alert_iterator;
  typedef Alert_sequence::const_iterator Alert_const_iterator;
  typedef ::xsd::cxx::tree::traits< Alert_type, char > Alert_traits;

  const Alert_sequence&
  Alert () const;

  Alert_sequence&
  Alert ();

  void
  Alert (const Alert_sequence& s);

  // Constructors.
  //
  alerts ();

  alerts (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  alerts (const alerts& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual alerts*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~alerts ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Alert_sequence Alert_;
};

class alert: public ::xml_schema::type
{
  public:
  // dateTime
  // 
  typedef ::xml_schema::long_ dateTime_type;
  typedef ::xsd::cxx::tree::traits< dateTime_type, char > dateTime_traits;

  const dateTime_type&
  dateTime () const;

  dateTime_type&
  dateTime ();

  void
  dateTime (const dateTime_type& x);

  // alertId
  // 
  typedef ::xml_schema::long_ alertId_type;
  typedef ::xsd::cxx::tree::traits< alertId_type, char > alertId_traits;

  const alertId_type&
  alertId () const;

  alertId_type&
  alertId ();

  void
  alertId (const alertId_type& x);

  // subject
  // 
  typedef ::xml_schema::string subject_type;
  typedef ::xsd::cxx::tree::optional< subject_type > subject_optional;
  typedef ::xsd::cxx::tree::traits< subject_type, char > subject_traits;

  const subject_optional&
  subject () const;

  subject_optional&
  subject ();

  void
  subject (const subject_type& x);

  void
  subject (const subject_optional& x);

  void
  subject (::std::auto_ptr< subject_type > p);

  // category
  // 
  typedef ::alertCategory category_type;
  typedef ::xsd::cxx::tree::optional< category_type > category_optional;
  typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

  const category_optional&
  category () const;

  category_optional&
  category ();

  void
  category (const category_type& x);

  void
  category (const category_optional& x);

  void
  category (::std::auto_ptr< category_type > p);

  // readFlag
  // 
  typedef ::alertReadFlag readFlag_type;
  typedef ::xsd::cxx::tree::optional< readFlag_type > readFlag_optional;
  typedef ::xsd::cxx::tree::traits< readFlag_type, char > readFlag_traits;

  const readFlag_optional&
  readFlag () const;

  readFlag_optional&
  readFlag ();

  void
  readFlag (const readFlag_type& x);

  void
  readFlag (const readFlag_optional& x);

  void
  readFlag (::std::auto_ptr< readFlag_type > p);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // Constructors.
  //
  alert (const dateTime_type&,
         const alertId_type&);

  alert (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  alert (const alert& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual alert*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~alert ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< dateTime_type > dateTime_;
  ::xsd::cxx::tree::one< alertId_type > alertId_;
  subject_optional subject_;
  category_optional category_;
  readFlag_optional readFlag_;
  symbol_optional symbol_;
};

class cashAccountBalance: public ::xml_schema::type
{
  public:
  // cashAvailableForInvestment
  // 
  typedef ::xml_schema::decimal cashAvailableForInvestment_type;
  typedef ::xsd::cxx::tree::traits< cashAvailableForInvestment_type, char, ::xsd::cxx::tree::schema_type::decimal > cashAvailableForInvestment_traits;

  const cashAvailableForInvestment_type&
  cashAvailableForInvestment () const;

  cashAvailableForInvestment_type&
  cashAvailableForInvestment ();

  void
  cashAvailableForInvestment (const cashAvailableForInvestment_type& x);

  // cashBalance
  // 
  typedef ::xml_schema::decimal cashBalance_type;
  typedef ::xsd::cxx::tree::traits< cashBalance_type, char, ::xsd::cxx::tree::schema_type::decimal > cashBalance_traits;

  const cashBalance_type&
  cashBalance () const;

  cashBalance_type&
  cashBalance ();

  void
  cashBalance (const cashBalance_type& x);

  // settledCashForInvestment
  // 
  typedef ::xml_schema::decimal settledCashForInvestment_type;
  typedef ::xsd::cxx::tree::traits< settledCashForInvestment_type, char, ::xsd::cxx::tree::schema_type::decimal > settledCashForInvestment_traits;

  const settledCashForInvestment_type&
  settledCashForInvestment () const;

  settledCashForInvestment_type&
  settledCashForInvestment ();

  void
  settledCashForInvestment (const settledCashForInvestment_type& x);

  // unSettledCashForInvestment
  // 
  typedef ::xml_schema::decimal unSettledCashForInvestment_type;
  typedef ::xsd::cxx::tree::traits< unSettledCashForInvestment_type, char, ::xsd::cxx::tree::schema_type::decimal > unSettledCashForInvestment_traits;

  const unSettledCashForInvestment_type&
  unSettledCashForInvestment () const;

  unSettledCashForInvestment_type&
  unSettledCashForInvestment ();

  void
  unSettledCashForInvestment (const unSettledCashForInvestment_type& x);

  // Constructors.
  //
  cashAccountBalance (const cashAvailableForInvestment_type&,
                      const cashBalance_type&,
                      const settledCashForInvestment_type&,
                      const unSettledCashForInvestment_type&);

  cashAccountBalance (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  cashAccountBalance (const cashAccountBalance& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual cashAccountBalance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cashAccountBalance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cashAvailableForInvestment_type > cashAvailableForInvestment_;
  ::xsd::cxx::tree::one< cashBalance_type > cashBalance_;
  ::xsd::cxx::tree::one< settledCashForInvestment_type > settledCashForInvestment_;
  ::xsd::cxx::tree::one< unSettledCashForInvestment_type > unSettledCashForInvestment_;
};

class balance: public ::xml_schema::type
{
  public:
  // cashAvailableForWithdrawal
  // 
  typedef ::xml_schema::decimal cashAvailableForWithdrawal_type;
  typedef ::xsd::cxx::tree::optional< cashAvailableForWithdrawal_type > cashAvailableForWithdrawal_optional;
  typedef ::xsd::cxx::tree::traits< cashAvailableForWithdrawal_type, char, ::xsd::cxx::tree::schema_type::decimal > cashAvailableForWithdrawal_traits;

  const cashAvailableForWithdrawal_optional&
  cashAvailableForWithdrawal () const;

  cashAvailableForWithdrawal_optional&
  cashAvailableForWithdrawal ();

  void
  cashAvailableForWithdrawal (const cashAvailableForWithdrawal_type& x);

  void
  cashAvailableForWithdrawal (const cashAvailableForWithdrawal_optional& x);

  // cashCall
  // 
  typedef ::xml_schema::decimal cashCall_type;
  typedef ::xsd::cxx::tree::optional< cashCall_type > cashCall_optional;
  typedef ::xsd::cxx::tree::traits< cashCall_type, char, ::xsd::cxx::tree::schema_type::decimal > cashCall_traits;

  const cashCall_optional&
  cashCall () const;

  cashCall_optional&
  cashCall ();

  void
  cashCall (const cashCall_type& x);

  void
  cashCall (const cashCall_optional& x);

  // fundsWithheldFromPurchasePower
  // 
  typedef ::xml_schema::decimal fundsWithheldFromPurchasePower_type;
  typedef ::xsd::cxx::tree::optional< fundsWithheldFromPurchasePower_type > fundsWithheldFromPurchasePower_optional;
  typedef ::xsd::cxx::tree::traits< fundsWithheldFromPurchasePower_type, char, ::xsd::cxx::tree::schema_type::decimal > fundsWithheldFromPurchasePower_traits;

  const fundsWithheldFromPurchasePower_optional&
  fundsWithheldFromPurchasePower () const;

  fundsWithheldFromPurchasePower_optional&
  fundsWithheldFromPurchasePower ();

  void
  fundsWithheldFromPurchasePower (const fundsWithheldFromPurchasePower_type& x);

  void
  fundsWithheldFromPurchasePower (const fundsWithheldFromPurchasePower_optional& x);

  // fundsWithheldFromWithdrawal
  // 
  typedef ::xml_schema::decimal fundsWithheldFromWithdrawal_type;
  typedef ::xsd::cxx::tree::optional< fundsWithheldFromWithdrawal_type > fundsWithheldFromWithdrawal_optional;
  typedef ::xsd::cxx::tree::traits< fundsWithheldFromWithdrawal_type, char, ::xsd::cxx::tree::schema_type::decimal > fundsWithheldFromWithdrawal_traits;

  const fundsWithheldFromWithdrawal_optional&
  fundsWithheldFromWithdrawal () const;

  fundsWithheldFromWithdrawal_optional&
  fundsWithheldFromWithdrawal ();

  void
  fundsWithheldFromWithdrawal (const fundsWithheldFromWithdrawal_type& x);

  void
  fundsWithheldFromWithdrawal (const fundsWithheldFromWithdrawal_optional& x);

  // netAccountValue
  // 
  typedef ::xml_schema::decimal netAccountValue_type;
  typedef ::xsd::cxx::tree::optional< netAccountValue_type > netAccountValue_optional;
  typedef ::xsd::cxx::tree::traits< netAccountValue_type, char, ::xsd::cxx::tree::schema_type::decimal > netAccountValue_traits;

  const netAccountValue_optional&
  netAccountValue () const;

  netAccountValue_optional&
  netAccountValue ();

  void
  netAccountValue (const netAccountValue_type& x);

  void
  netAccountValue (const netAccountValue_optional& x);

  // netCash
  // 
  typedef ::xml_schema::decimal netCash_type;
  typedef ::xsd::cxx::tree::optional< netCash_type > netCash_optional;
  typedef ::xsd::cxx::tree::traits< netCash_type, char, ::xsd::cxx::tree::schema_type::decimal > netCash_traits;

  const netCash_optional&
  netCash () const;

  netCash_optional&
  netCash ();

  void
  netCash (const netCash_type& x);

  void
  netCash (const netCash_optional& x);

  // sweepDepositAmount
  // 
  typedef ::xml_schema::decimal sweepDepositAmount_type;
  typedef ::xsd::cxx::tree::optional< sweepDepositAmount_type > sweepDepositAmount_optional;
  typedef ::xsd::cxx::tree::traits< sweepDepositAmount_type, char, ::xsd::cxx::tree::schema_type::decimal > sweepDepositAmount_traits;

  const sweepDepositAmount_optional&
  sweepDepositAmount () const;

  sweepDepositAmount_optional&
  sweepDepositAmount ();

  void
  sweepDepositAmount (const sweepDepositAmount_type& x);

  void
  sweepDepositAmount (const sweepDepositAmount_optional& x);

  // totalLongValue
  // 
  typedef ::xml_schema::decimal totalLongValue_type;
  typedef ::xsd::cxx::tree::optional< totalLongValue_type > totalLongValue_optional;
  typedef ::xsd::cxx::tree::traits< totalLongValue_type, char, ::xsd::cxx::tree::schema_type::decimal > totalLongValue_traits;

  const totalLongValue_optional&
  totalLongValue () const;

  totalLongValue_optional&
  totalLongValue ();

  void
  totalLongValue (const totalLongValue_type& x);

  void
  totalLongValue (const totalLongValue_optional& x);

  // totalSecuritiesMktValue
  // 
  typedef ::xml_schema::decimal totalSecuritiesMktValue_type;
  typedef ::xsd::cxx::tree::optional< totalSecuritiesMktValue_type > totalSecuritiesMktValue_optional;
  typedef ::xsd::cxx::tree::traits< totalSecuritiesMktValue_type, char, ::xsd::cxx::tree::schema_type::decimal > totalSecuritiesMktValue_traits;

  const totalSecuritiesMktValue_optional&
  totalSecuritiesMktValue () const;

  totalSecuritiesMktValue_optional&
  totalSecuritiesMktValue ();

  void
  totalSecuritiesMktValue (const totalSecuritiesMktValue_type& x);

  void
  totalSecuritiesMktValue (const totalSecuritiesMktValue_optional& x);

  // Constructors.
  //
  balance ();

  balance (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  balance (const balance& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual balance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~balance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  cashAvailableForWithdrawal_optional cashAvailableForWithdrawal_;
  cashCall_optional cashCall_;
  fundsWithheldFromPurchasePower_optional fundsWithheldFromPurchasePower_;
  fundsWithheldFromWithdrawal_optional fundsWithheldFromWithdrawal_;
  netAccountValue_optional netAccountValue_;
  netCash_optional netCash_;
  sweepDepositAmount_optional sweepDepositAmount_;
  totalLongValue_optional totalLongValue_;
  totalSecuritiesMktValue_optional totalSecuritiesMktValue_;
};

class marginAccountBalance: public ::xml_schema::type
{
  public:
  // dtBalance
  // 
  typedef ::accountDTBalance dtBalance_type;
  typedef ::xsd::cxx::tree::optional< dtBalance_type > dtBalance_optional;
  typedef ::xsd::cxx::tree::traits< dtBalance_type, char > dtBalance_traits;

  const dtBalance_optional&
  dtBalance () const;

  dtBalance_optional&
  dtBalance ();

  void
  dtBalance (const dtBalance_type& x);

  void
  dtBalance (const dtBalance_optional& x);

  void
  dtBalance (::std::auto_ptr< dtBalance_type > p);

  // fedCall
  // 
  typedef ::xml_schema::decimal fedCall_type;
  typedef ::xsd::cxx::tree::optional< fedCall_type > fedCall_optional;
  typedef ::xsd::cxx::tree::traits< fedCall_type, char, ::xsd::cxx::tree::schema_type::decimal > fedCall_traits;

  const fedCall_optional&
  fedCall () const;

  fedCall_optional&
  fedCall ();

  void
  fedCall (const fedCall_type& x);

  void
  fedCall (const fedCall_optional& x);

  // marginBalance
  // 
  typedef ::xml_schema::decimal marginBalance_type;
  typedef ::xsd::cxx::tree::optional< marginBalance_type > marginBalance_optional;
  typedef ::xsd::cxx::tree::traits< marginBalance_type, char, ::xsd::cxx::tree::schema_type::decimal > marginBalance_traits;

  const marginBalance_optional&
  marginBalance () const;

  marginBalance_optional&
  marginBalance ();

  void
  marginBalance (const marginBalance_type& x);

  void
  marginBalance (const marginBalance_optional& x);

  // marginBalanceWithdrawal
  // 
  typedef ::xml_schema::decimal marginBalanceWithdrawal_type;
  typedef ::xsd::cxx::tree::optional< marginBalanceWithdrawal_type > marginBalanceWithdrawal_optional;
  typedef ::xsd::cxx::tree::traits< marginBalanceWithdrawal_type, char, ::xsd::cxx::tree::schema_type::decimal > marginBalanceWithdrawal_traits;

  const marginBalanceWithdrawal_optional&
  marginBalanceWithdrawal () const;

  marginBalanceWithdrawal_optional&
  marginBalanceWithdrawal ();

  void
  marginBalanceWithdrawal (const marginBalanceWithdrawal_type& x);

  void
  marginBalanceWithdrawal (const marginBalanceWithdrawal_optional& x);

  // marginEquity
  // 
  typedef ::xml_schema::decimal marginEquity_type;
  typedef ::xsd::cxx::tree::optional< marginEquity_type > marginEquity_optional;
  typedef ::xsd::cxx::tree::traits< marginEquity_type, char, ::xsd::cxx::tree::schema_type::decimal > marginEquity_traits;

  const marginEquity_optional&
  marginEquity () const;

  marginEquity_optional&
  marginEquity ();

  void
  marginEquity (const marginEquity_type& x);

  void
  marginEquity (const marginEquity_optional& x);

  // marginEquityPct
  // 
  typedef ::xml_schema::decimal marginEquityPct_type;
  typedef ::xsd::cxx::tree::optional< marginEquityPct_type > marginEquityPct_optional;
  typedef ::xsd::cxx::tree::traits< marginEquityPct_type, char, ::xsd::cxx::tree::schema_type::decimal > marginEquityPct_traits;

  const marginEquityPct_optional&
  marginEquityPct () const;

  marginEquityPct_optional&
  marginEquityPct ();

  void
  marginEquityPct (const marginEquityPct_type& x);

  void
  marginEquityPct (const marginEquityPct_optional& x);

  // marginableSecurities
  // 
  typedef ::xml_schema::decimal marginableSecurities_type;
  typedef ::xsd::cxx::tree::optional< marginableSecurities_type > marginableSecurities_optional;
  typedef ::xsd::cxx::tree::traits< marginableSecurities_type, char, ::xsd::cxx::tree::schema_type::decimal > marginableSecurities_traits;

  const marginableSecurities_optional&
  marginableSecurities () const;

  marginableSecurities_optional&
  marginableSecurities ();

  void
  marginableSecurities (const marginableSecurities_type& x);

  void
  marginableSecurities (const marginableSecurities_optional& x);

  // maxAvailableForWithdrawal
  // 
  typedef ::xml_schema::decimal maxAvailableForWithdrawal_type;
  typedef ::xsd::cxx::tree::optional< maxAvailableForWithdrawal_type > maxAvailableForWithdrawal_optional;
  typedef ::xsd::cxx::tree::traits< maxAvailableForWithdrawal_type, char, ::xsd::cxx::tree::schema_type::decimal > maxAvailableForWithdrawal_traits;

  const maxAvailableForWithdrawal_optional&
  maxAvailableForWithdrawal () const;

  maxAvailableForWithdrawal_optional&
  maxAvailableForWithdrawal ();

  void
  maxAvailableForWithdrawal (const maxAvailableForWithdrawal_type& x);

  void
  maxAvailableForWithdrawal (const maxAvailableForWithdrawal_optional& x);

  // minEquityCall
  // 
  typedef ::xml_schema::decimal minEquityCall_type;
  typedef ::xsd::cxx::tree::optional< minEquityCall_type > minEquityCall_optional;
  typedef ::xsd::cxx::tree::traits< minEquityCall_type, char, ::xsd::cxx::tree::schema_type::decimal > minEquityCall_traits;

  const minEquityCall_optional&
  minEquityCall () const;

  minEquityCall_optional&
  minEquityCall ();

  void
  minEquityCall (const minEquityCall_type& x);

  void
  minEquityCall (const minEquityCall_optional& x);

  // nonMarginableSecuritiesAndOptions
  // 
  typedef ::xml_schema::decimal nonMarginableSecuritiesAndOptions_type;
  typedef ::xsd::cxx::tree::optional< nonMarginableSecuritiesAndOptions_type > nonMarginableSecuritiesAndOptions_optional;
  typedef ::xsd::cxx::tree::traits< nonMarginableSecuritiesAndOptions_type, char, ::xsd::cxx::tree::schema_type::decimal > nonMarginableSecuritiesAndOptions_traits;

  const nonMarginableSecuritiesAndOptions_optional&
  nonMarginableSecuritiesAndOptions () const;

  nonMarginableSecuritiesAndOptions_optional&
  nonMarginableSecuritiesAndOptions ();

  void
  nonMarginableSecuritiesAndOptions (const nonMarginableSecuritiesAndOptions_type& x);

  void
  nonMarginableSecuritiesAndOptions (const nonMarginableSecuritiesAndOptions_optional& x);

  // totalShortValue
  // 
  typedef ::xml_schema::decimal totalShortValue_type;
  typedef ::xsd::cxx::tree::optional< totalShortValue_type > totalShortValue_optional;
  typedef ::xsd::cxx::tree::traits< totalShortValue_type, char, ::xsd::cxx::tree::schema_type::decimal > totalShortValue_traits;

  const totalShortValue_optional&
  totalShortValue () const;

  totalShortValue_optional&
  totalShortValue ();

  void
  totalShortValue (const totalShortValue_type& x);

  void
  totalShortValue (const totalShortValue_optional& x);

  // shortReserve
  // 
  typedef ::xml_schema::decimal shortReserve_type;
  typedef ::xsd::cxx::tree::optional< shortReserve_type > shortReserve_optional;
  typedef ::xsd::cxx::tree::traits< shortReserve_type, char, ::xsd::cxx::tree::schema_type::decimal > shortReserve_traits;

  const shortReserve_optional&
  shortReserve () const;

  shortReserve_optional&
  shortReserve ();

  void
  shortReserve (const shortReserve_type& x);

  void
  shortReserve (const shortReserve_optional& x);

  // Constructors.
  //
  marginAccountBalance ();

  marginAccountBalance (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  marginAccountBalance (const marginAccountBalance& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual marginAccountBalance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~marginAccountBalance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  dtBalance_optional dtBalance_;
  fedCall_optional fedCall_;
  marginBalance_optional marginBalance_;
  marginBalanceWithdrawal_optional marginBalanceWithdrawal_;
  marginEquity_optional marginEquity_;
  marginEquityPct_optional marginEquityPct_;
  marginableSecurities_optional marginableSecurities_;
  maxAvailableForWithdrawal_optional maxAvailableForWithdrawal_;
  minEquityCall_optional minEquityCall_;
  nonMarginableSecuritiesAndOptions_optional nonMarginableSecuritiesAndOptions_;
  totalShortValue_optional totalShortValue_;
  shortReserve_optional shortReserve_;
};

class accountDTBalance: public ::xml_schema::type
{
  public:
  // dtCashBalance
  // 
  typedef ::xml_schema::decimal dtCashBalance_type;
  typedef ::xsd::cxx::tree::traits< dtCashBalance_type, char, ::xsd::cxx::tree::schema_type::decimal > dtCashBalance_traits;

  const dtCashBalance_type&
  dtCashBalance () const;

  dtCashBalance_type&
  dtCashBalance ();

  void
  dtCashBalance (const dtCashBalance_type& x);

  // dtMarginBalance
  // 
  typedef ::xml_schema::decimal dtMarginBalance_type;
  typedef ::xsd::cxx::tree::traits< dtMarginBalance_type, char, ::xsd::cxx::tree::schema_type::decimal > dtMarginBalance_traits;

  const dtMarginBalance_type&
  dtMarginBalance () const;

  dtMarginBalance_type&
  dtMarginBalance ();

  void
  dtMarginBalance (const dtMarginBalance_type& x);

  // dtMarginableSecurities
  // 
  typedef ::xml_schema::decimal dtMarginableSecurities_type;
  typedef ::xsd::cxx::tree::traits< dtMarginableSecurities_type, char, ::xsd::cxx::tree::schema_type::decimal > dtMarginableSecurities_traits;

  const dtMarginableSecurities_type&
  dtMarginableSecurities () const;

  dtMarginableSecurities_type&
  dtMarginableSecurities ();

  void
  dtMarginableSecurities (const dtMarginableSecurities_type& x);

  // dtNonMarginableSecuritiesAndOptions
  // 
  typedef ::xml_schema::decimal dtNonMarginableSecuritiesAndOptions_type;
  typedef ::xsd::cxx::tree::traits< dtNonMarginableSecuritiesAndOptions_type, char, ::xsd::cxx::tree::schema_type::decimal > dtNonMarginableSecuritiesAndOptions_traits;

  const dtNonMarginableSecuritiesAndOptions_type&
  dtNonMarginableSecuritiesAndOptions () const;

  dtNonMarginableSecuritiesAndOptions_type&
  dtNonMarginableSecuritiesAndOptions ();

  void
  dtNonMarginableSecuritiesAndOptions (const dtNonMarginableSecuritiesAndOptions_type& x);

  // dtStatus
  // 
  typedef ::dayTraderStatus dtStatus_type;
  typedef ::xsd::cxx::tree::optional< dtStatus_type > dtStatus_optional;
  typedef ::xsd::cxx::tree::traits< dtStatus_type, char > dtStatus_traits;

  const dtStatus_optional&
  dtStatus () const;

  dtStatus_optional&
  dtStatus ();

  void
  dtStatus (const dtStatus_type& x);

  void
  dtStatus (const dtStatus_optional& x);

  void
  dtStatus (::std::auto_ptr< dtStatus_type > p);

  // Constructors.
  //
  accountDTBalance (const dtCashBalance_type&,
                    const dtMarginBalance_type&,
                    const dtMarginableSecurities_type&,
                    const dtNonMarginableSecuritiesAndOptions_type&);

  accountDTBalance (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  accountDTBalance (const accountDTBalance& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual accountDTBalance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountDTBalance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< dtCashBalance_type > dtCashBalance_;
  ::xsd::cxx::tree::one< dtMarginBalance_type > dtMarginBalance_;
  ::xsd::cxx::tree::one< dtMarginableSecurities_type > dtMarginableSecurities_;
  ::xsd::cxx::tree::one< dtNonMarginableSecuritiesAndOptions_type > dtNonMarginableSecuritiesAndOptions_;
  dtStatus_optional dtStatus_;
};

class account: public ::xml_schema::type
{
  public:
  // accountDesc
  // 
  typedef ::xml_schema::string accountDesc_type;
  typedef ::xsd::cxx::tree::traits< accountDesc_type, char > accountDesc_traits;

  const accountDesc_type&
  accountDesc () const;

  accountDesc_type&
  accountDesc ();

  void
  accountDesc (const accountDesc_type& x);

  void
  accountDesc (::std::auto_ptr< accountDesc_type > p);

  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // marginLevel
  // 
  typedef ::marginLevel marginLevel_type;
  typedef ::xsd::cxx::tree::optional< marginLevel_type > marginLevel_optional;
  typedef ::xsd::cxx::tree::traits< marginLevel_type, char > marginLevel_traits;

  const marginLevel_optional&
  marginLevel () const;

  marginLevel_optional&
  marginLevel ();

  void
  marginLevel (const marginLevel_type& x);

  void
  marginLevel (const marginLevel_optional& x);

  void
  marginLevel (::std::auto_ptr< marginLevel_type > p);

  // netAccountValue
  // 
  typedef ::xml_schema::decimal netAccountValue_type;
  typedef ::xsd::cxx::tree::traits< netAccountValue_type, char, ::xsd::cxx::tree::schema_type::decimal > netAccountValue_traits;

  const netAccountValue_type&
  netAccountValue () const;

  netAccountValue_type&
  netAccountValue ();

  void
  netAccountValue (const netAccountValue_type& x);

  // registrationType
  // 
  typedef ::xml_schema::string registrationType_type;
  typedef ::xsd::cxx::tree::traits< registrationType_type, char > registrationType_traits;

  const registrationType_type&
  registrationType () const;

  registrationType_type&
  registrationType ();

  void
  registrationType (const registrationType_type& x);

  void
  registrationType (::std::auto_ptr< registrationType_type > p);

  // Constructors.
  //
  account (const accountDesc_type&,
           const accountId_type&,
           const netAccountValue_type&,
           const registrationType_type&);

  account (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  account (const account& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual account*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~account ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountDesc_type > accountDesc_;
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  marginLevel_optional marginLevel_;
  ::xsd::cxx::tree::one< netAccountValue_type > netAccountValue_;
  ::xsd::cxx::tree::one< registrationType_type > registrationType_;
};

class longOrShort: public ::xml_schema::string
{
  public:
  enum value
  {
    LONG,
    SHORT
  };

  longOrShort (value v);

  longOrShort (const char* v);

  longOrShort (const ::std::string& v);

  longOrShort (const ::xml_schema::string& v);

  longOrShort (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  longOrShort (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  longOrShort (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  longOrShort (const longOrShort& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual longOrShort*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  longOrShort&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_longOrShort_convert ();
  }

  protected:
  value
  _xsd_longOrShort_convert () const;

  public:
  static const char* const _xsd_longOrShort_literals_[2];
  static const value _xsd_longOrShort_indexes_[2];
};

class marginable: public ::xml_schema::string
{
  public:
  enum value
  {
    MARGINABLE,
    NON_MARGINABLE
  };

  marginable (value v);

  marginable (const char* v);

  marginable (const ::std::string& v);

  marginable (const ::xml_schema::string& v);

  marginable (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  marginable (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  marginable (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  marginable (const marginable& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual marginable*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  marginable&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_marginable_convert ();
  }

  protected:
  value
  _xsd_marginable_convert () const;

  public:
  static const char* const _xsd_marginable_literals_[2];
  static const value _xsd_marginable_indexes_[2];
};

class alertCategory: public ::xml_schema::string
{
  public:
  enum value
  {
    ACCOUNTS,
    TRADING
  };

  alertCategory (value v);

  alertCategory (const char* v);

  alertCategory (const ::std::string& v);

  alertCategory (const ::xml_schema::string& v);

  alertCategory (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertCategory (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertCategory (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertCategory (const alertCategory& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual alertCategory*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  alertCategory&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_alertCategory_convert ();
  }

  protected:
  value
  _xsd_alertCategory_convert () const;

  public:
  static const char* const _xsd_alertCategory_literals_[2];
  static const value _xsd_alertCategory_indexes_[2];
};

class alertReadFlag: public ::xml_schema::string
{
  public:
  enum value
  {
    UNREAD,
    READ
  };

  alertReadFlag (value v);

  alertReadFlag (const char* v);

  alertReadFlag (const ::std::string& v);

  alertReadFlag (const ::xml_schema::string& v);

  alertReadFlag (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertReadFlag (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertReadFlag (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  alertReadFlag (const alertReadFlag& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual alertReadFlag*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  alertReadFlag&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_alertReadFlag_convert ();
  }

  protected:
  value
  _xsd_alertReadFlag_convert () const;

  public:
  static const char* const _xsd_alertReadFlag_literals_[2];
  static const value _xsd_alertReadFlag_indexes_[2];
};

class dayTraderStatus: public ::xml_schema::string
{
  public:
  enum value
  {
    NOT_QUALIFIED,
    QUALIFIED_4X,
    MARGIN_CALL_2XD,
    MARGIN_CALL_1XD,
    MIN_EQUITY_CALL_1XK,
    QUALIFIED_RESTRICTION,
    CASH_ONLY
  };

  dayTraderStatus (value v);

  dayTraderStatus (const char* v);

  dayTraderStatus (const ::std::string& v);

  dayTraderStatus (const ::xml_schema::string& v);

  dayTraderStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  dayTraderStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  dayTraderStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  dayTraderStatus (const dayTraderStatus& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual dayTraderStatus*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  dayTraderStatus&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_dayTraderStatus_convert ();
  }

  protected:
  value
  _xsd_dayTraderStatus_convert () const;

  public:
  static const char* const _xsd_dayTraderStatus_literals_[7];
  static const value _xsd_dayTraderStatus_indexes_[7];
};

class marginLevel: public ::xml_schema::string
{
  public:
  enum value
  {
    MARGIN,
    CASH,
    PM
  };

  marginLevel (value v);

  marginLevel (const char* v);

  marginLevel (const ::std::string& v);

  marginLevel (const ::xml_schema::string& v);

  marginLevel (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  marginLevel (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  marginLevel (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  marginLevel (const marginLevel& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual marginLevel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  marginLevel&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_marginLevel_convert ();
  }

  protected:
  value
  _xsd_marginLevel_convert () const;

  public:
  static const char* const _xsd_marginLevel_literals_[3];
  static const value _xsd_marginLevel_indexes_[3];
};

class optionLevel: public ::xml_schema::string
{
  public:
  enum value
  {
    LEVEL_1,
    LEVEL_2,
    LEVEL_3,
    LEVEL_4
  };

  optionLevel (value v);

  optionLevel (const char* v);

  optionLevel (const ::std::string& v);

  optionLevel (const ::xml_schema::string& v);

  optionLevel (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  optionLevel (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  optionLevel (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  optionLevel (const optionLevel& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual optionLevel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  optionLevel&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_optionLevel_convert ();
  }

  protected:
  value
  _xsd_optionLevel_convert () const;

  public:
  static const char* const _xsd_optionLevel_literals_[4];
  static const value _xsd_optionLevel_indexes_[4];
};

class callPut: public ::xml_schema::string
{
  public:
  enum value
  {
    CALL,
    PUT
  };

  callPut (value v);

  callPut (const char* v);

  callPut (const ::std::string& v);

  callPut (const ::xml_schema::string& v);

  callPut (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  callPut (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  callPut (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  callPut (const callPut& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual callPut*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  callPut&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_callPut_convert ();
  }

  protected:
  value
  _xsd_callPut_convert () const;

  public:
  static const char* const _xsd_callPut_literals_[2];
  static const value _xsd_callPut_indexes_[2];
};

class expYear: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  expYear (const ::xml_schema::int_&);

  expYear (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  expYear (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  expYear (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  expYear (const expYear& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual expYear*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~expYear ();
};

class expMonth: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  expMonth (const ::xml_schema::int_&);

  expMonth (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  expMonth (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  expMonth (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  expMonth (const expMonth& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual expMonth*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~expMonth ();
};

class expDay: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  expDay (const ::xml_schema::int_&);

  expDay (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  expDay (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  expDay (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  expDay (const expDay& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual expDay*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~expDay ();
};

class symbol: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  symbol ();

  symbol (const char*);

  symbol (const ::std::string&);

  symbol (const ::xml_schema::string&);

  symbol (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  symbol (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  symbol (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  symbol (const symbol& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual symbol*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~symbol ();
};

class int_or_empty: public ::xml_schema::string
{
  public:

  int_or_empty (const char* v);

  int_or_empty (const ::std::string& v);

  int_or_empty (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  int_or_empty (const int_or_empty& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual int_or_empty*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class empty_string: public ::xml_schema::string
{
  public:
  enum value
  {
    empty
  };

  empty_string (value v);

  empty_string (const char* v);

  empty_string (const ::std::string& v);

  empty_string (const ::xml_schema::string& v);

  empty_string (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const empty_string& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual empty_string*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  empty_string&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_empty_string_convert ();
  }

  protected:
  value
  _xsd_empty_string_convert () const;

  public:
  static const char* const _xsd_empty_string_literals_[1];
  static const value _xsd_empty_string_indexes_[1];
};

class accountStatus: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::optional< accountId_type > accountId_optional;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_optional&
  accountId () const;

  accountId_optional&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (const accountId_optional& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // errorMessage
  // 
  typedef ::xml_schema::string errorMessage_type;
  typedef ::xsd::cxx::tree::optional< errorMessage_type > errorMessage_optional;
  typedef ::xsd::cxx::tree::traits< errorMessage_type, char > errorMessage_traits;

  const errorMessage_optional&
  errorMessage () const;

  errorMessage_optional&
  errorMessage ();

  void
  errorMessage (const errorMessage_type& x);

  void
  errorMessage (const errorMessage_optional& x);

  void
  errorMessage (::std::auto_ptr< errorMessage_type > p);

  // Constructors.
  //
  accountStatus ();

  accountStatus (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  accountStatus (const accountStatus& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual accountStatus*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountStatus ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  accountId_optional accountId_;
  errorMessage_optional errorMessage_;
};

class transactionsRequest: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::optional< accountId_type > accountId_optional;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_optional&
  accountId () const;

  accountId_optional&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (const accountId_optional& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // count
  // 
  typedef ::xml_schema::int_ count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // fromDate
  // 
  typedef ::xml_schema::string fromDate_type;
  typedef ::xsd::cxx::tree::optional< fromDate_type > fromDate_optional;
  typedef ::xsd::cxx::tree::traits< fromDate_type, char > fromDate_traits;

  const fromDate_optional&
  fromDate () const;

  fromDate_optional&
  fromDate ();

  void
  fromDate (const fromDate_type& x);

  void
  fromDate (const fromDate_optional& x);

  void
  fromDate (::std::auto_ptr< fromDate_type > p);

  // fromDateInMiliSec
  // 
  typedef ::xml_schema::long_ fromDateInMiliSec_type;
  typedef ::xsd::cxx::tree::traits< fromDateInMiliSec_type, char > fromDateInMiliSec_traits;

  const fromDateInMiliSec_type&
  fromDateInMiliSec () const;

  fromDateInMiliSec_type&
  fromDateInMiliSec ();

  void
  fromDateInMiliSec (const fromDateInMiliSec_type& x);

  // marker
  // 
  typedef ::xml_schema::long_ marker_type;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_type&
  marker () const;

  marker_type&
  marker ();

  void
  marker (const marker_type& x);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // toDate
  // 
  typedef ::xml_schema::string toDate_type;
  typedef ::xsd::cxx::tree::optional< toDate_type > toDate_optional;
  typedef ::xsd::cxx::tree::traits< toDate_type, char > toDate_traits;

  const toDate_optional&
  toDate () const;

  toDate_optional&
  toDate ();

  void
  toDate (const toDate_type& x);

  void
  toDate (const toDate_optional& x);

  void
  toDate (::std::auto_ptr< toDate_type > p);

  // toDateInMiliSec
  // 
  typedef ::xml_schema::long_ toDateInMiliSec_type;
  typedef ::xsd::cxx::tree::traits< toDateInMiliSec_type, char > toDateInMiliSec_traits;

  const toDateInMiliSec_type&
  toDateInMiliSec () const;

  toDateInMiliSec_type&
  toDateInMiliSec ();

  void
  toDateInMiliSec (const toDateInMiliSec_type& x);

  // tranGroup
  // 
  typedef ::xml_schema::string tranGroup_type;
  typedef ::xsd::cxx::tree::optional< tranGroup_type > tranGroup_optional;
  typedef ::xsd::cxx::tree::traits< tranGroup_type, char > tranGroup_traits;

  const tranGroup_optional&
  tranGroup () const;

  tranGroup_optional&
  tranGroup ();

  void
  tranGroup (const tranGroup_type& x);

  void
  tranGroup (const tranGroup_optional& x);

  void
  tranGroup (::std::auto_ptr< tranGroup_type > p);

  // typeCode
  // 
  typedef ::xml_schema::string typeCode_type;
  typedef ::xsd::cxx::tree::optional< typeCode_type > typeCode_optional;
  typedef ::xsd::cxx::tree::traits< typeCode_type, char > typeCode_traits;

  const typeCode_optional&
  typeCode () const;

  typeCode_optional&
  typeCode ();

  void
  typeCode (const typeCode_type& x);

  void
  typeCode (const typeCode_optional& x);

  void
  typeCode (::std::auto_ptr< typeCode_type > p);

  // Constructors.
  //
  transactionsRequest (const count_type&,
                       const fromDateInMiliSec_type&,
                       const marker_type&,
                       const toDateInMiliSec_type&);

  transactionsRequest (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  transactionsRequest (const transactionsRequest& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual transactionsRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~transactionsRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  accountId_optional accountId_;
  ::xsd::cxx::tree::one< count_type > count_;
  fromDate_optional fromDate_;
  ::xsd::cxx::tree::one< fromDateInMiliSec_type > fromDateInMiliSec_;
  ::xsd::cxx::tree::one< marker_type > marker_;
  symbol_optional symbol_;
  toDate_optional toDate_;
  ::xsd::cxx::tree::one< toDateInMiliSec_type > toDateInMiliSec_;
  tranGroup_optional tranGroup_;
  typeCode_optional typeCode_;
};

class AccountPositionsResponse: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // count
  // 
  typedef ::xml_schema::int_ count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // marker
  // 
  typedef ::xml_schema::string marker_type;
  typedef ::xsd::cxx::tree::optional< marker_type > marker_optional;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_optional&
  marker () const;

  marker_optional&
  marker ();

  void
  marker (const marker_type& x);

  void
  marker (const marker_optional& x);

  void
  marker (::std::auto_ptr< marker_type > p);

  // AccountPositions
  // 
  typedef ::accountPositions AccountPositions_type;
  typedef ::xsd::cxx::tree::optional< AccountPositions_type > AccountPositions_optional;
  typedef ::xsd::cxx::tree::traits< AccountPositions_type, char > AccountPositions_traits;

  const AccountPositions_optional&
  AccountPositions () const;

  AccountPositions_optional&
  AccountPositions ();

  void
  AccountPositions (const AccountPositions_type& x);

  void
  AccountPositions (const AccountPositions_optional& x);

  void
  AccountPositions (::std::auto_ptr< AccountPositions_type > p);

  // Constructors.
  //
  AccountPositionsResponse (const accountId_type&,
                            const count_type&);

  AccountPositionsResponse (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  AccountPositionsResponse (const AccountPositionsResponse& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual AccountPositionsResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AccountPositionsResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  ::xsd::cxx::tree::one< count_type > count_;
  marker_optional marker_;
  AccountPositions_optional AccountPositions_;
};

class AlertsResponse: public ::xml_schema::type
{
  public:
  // Alerts
  // 
  typedef ::alerts Alerts_type;
  typedef ::xsd::cxx::tree::optional< Alerts_type > Alerts_optional;
  typedef ::xsd::cxx::tree::traits< Alerts_type, char > Alerts_traits;

  const Alerts_optional&
  Alerts () const;

  Alerts_optional&
  Alerts ();

  void
  Alerts (const Alerts_type& x);

  void
  Alerts (const Alerts_optional& x);

  void
  Alerts (::std::auto_ptr< Alerts_type > p);

  // Constructors.
  //
  AlertsResponse ();

  AlertsResponse (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  AlertsResponse (const AlertsResponse& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual AlertsResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AlertsResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Alerts_optional Alerts_;
};

class DeleteAlertResponse: public ::xml_schema::type
{
  public:
  // result
  // 
  typedef ::xml_schema::string result_type;
  typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

  const result_type&
  result () const;

  result_type&
  result ();

  void
  result (const result_type& x);

  void
  result (::std::auto_ptr< result_type > p);

  // Constructors.
  //
  DeleteAlertResponse (const result_type&);

  DeleteAlertResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  DeleteAlertResponse (const DeleteAlertResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual DeleteAlertResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DeleteAlertResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< result_type > result_;
};

class AlertDetailsResponse: public ::xml_schema::type
{
  public:
  // createDate
  // 
  typedef ::xml_schema::long_ createDate_type;
  typedef ::xsd::cxx::tree::traits< createDate_type, char > createDate_traits;

  const createDate_type&
  createDate () const;

  createDate_type&
  createDate ();

  void
  createDate (const createDate_type& x);

  // alertId
  // 
  typedef ::xml_schema::long_ alertId_type;
  typedef ::xsd::cxx::tree::traits< alertId_type, char > alertId_traits;

  const alertId_type&
  alertId () const;

  alertId_type&
  alertId ();

  void
  alertId (const alertId_type& x);

  // msgText
  // 
  typedef ::xml_schema::string msgText_type;
  typedef ::xsd::cxx::tree::optional< msgText_type > msgText_optional;
  typedef ::xsd::cxx::tree::traits< msgText_type, char > msgText_traits;

  const msgText_optional&
  msgText () const;

  msgText_optional&
  msgText ();

  void
  msgText (const msgText_type& x);

  void
  msgText (const msgText_optional& x);

  void
  msgText (::std::auto_ptr< msgText_type > p);

  // readDate
  // 
  typedef ::xml_schema::long_ readDate_type;
  typedef ::xsd::cxx::tree::traits< readDate_type, char > readDate_traits;

  const readDate_type&
  readDate () const;

  readDate_type&
  readDate ();

  void
  readDate (const readDate_type& x);

  // subject
  // 
  typedef ::xml_schema::string subject_type;
  typedef ::xsd::cxx::tree::optional< subject_type > subject_optional;
  typedef ::xsd::cxx::tree::traits< subject_type, char > subject_traits;

  const subject_optional&
  subject () const;

  subject_optional&
  subject ();

  void
  subject (const subject_type& x);

  void
  subject (const subject_optional& x);

  void
  subject (::std::auto_ptr< subject_type > p);

  // Constructors.
  //
  AlertDetailsResponse (const createDate_type&,
                        const alertId_type&,
                        const readDate_type&);

  AlertDetailsResponse (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  AlertDetailsResponse (const AlertDetailsResponse& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual AlertDetailsResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AlertDetailsResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< createDate_type > createDate_;
  ::xsd::cxx::tree::one< alertId_type > alertId_;
  msgText_optional msgText_;
  ::xsd::cxx::tree::one< readDate_type > readDate_;
  subject_optional subject_;
};

class AccountBalanceResponse: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // accountType
  // 
  typedef ::marginLevel accountType_type;
  typedef ::xsd::cxx::tree::traits< accountType_type, char > accountType_traits;

  const accountType_type&
  accountType () const;

  accountType_type&
  accountType ();

  void
  accountType (const accountType_type& x);

  void
  accountType (::std::auto_ptr< accountType_type > p);

  // optionLevel
  // 
  typedef ::optionLevel optionLevel_type;
  typedef ::xsd::cxx::tree::optional< optionLevel_type > optionLevel_optional;
  typedef ::xsd::cxx::tree::traits< optionLevel_type, char > optionLevel_traits;

  const optionLevel_optional&
  optionLevel () const;

  optionLevel_optional&
  optionLevel ();

  void
  optionLevel (const optionLevel_type& x);

  void
  optionLevel (const optionLevel_optional& x);

  void
  optionLevel (::std::auto_ptr< optionLevel_type > p);

  // accountBalance
  // 
  typedef ::balance accountBalance_type;
  typedef ::xsd::cxx::tree::traits< accountBalance_type, char > accountBalance_traits;

  const accountBalance_type&
  accountBalance () const;

  accountBalance_type&
  accountBalance ();

  void
  accountBalance (const accountBalance_type& x);

  void
  accountBalance (::std::auto_ptr< accountBalance_type > p);

  // cashAccountBalance
  // 
  typedef ::cashAccountBalance cashAccountBalance_type;
  typedef ::xsd::cxx::tree::optional< cashAccountBalance_type > cashAccountBalance_optional;
  typedef ::xsd::cxx::tree::traits< cashAccountBalance_type, char > cashAccountBalance_traits;

  const cashAccountBalance_optional&
  cashAccountBalance () const;

  cashAccountBalance_optional&
  cashAccountBalance ();

  void
  cashAccountBalance (const cashAccountBalance_type& x);

  void
  cashAccountBalance (const cashAccountBalance_optional& x);

  void
  cashAccountBalance (::std::auto_ptr< cashAccountBalance_type > p);

  // marginAccountBalance
  // 
  typedef ::marginAccountBalance marginAccountBalance_type;
  typedef ::xsd::cxx::tree::optional< marginAccountBalance_type > marginAccountBalance_optional;
  typedef ::xsd::cxx::tree::traits< marginAccountBalance_type, char > marginAccountBalance_traits;

  const marginAccountBalance_optional&
  marginAccountBalance () const;

  marginAccountBalance_optional&
  marginAccountBalance ();

  void
  marginAccountBalance (const marginAccountBalance_type& x);

  void
  marginAccountBalance (const marginAccountBalance_optional& x);

  void
  marginAccountBalance (::std::auto_ptr< marginAccountBalance_type > p);

  // Constructors.
  //
  AccountBalanceResponse (const accountId_type&,
                          const accountType_type&,
                          const accountBalance_type&);

  AccountBalanceResponse (const accountId_type&,
                          const accountType_type&,
                          ::std::auto_ptr< accountBalance_type >&);

  AccountBalanceResponse (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  AccountBalanceResponse (const AccountBalanceResponse& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual AccountBalanceResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AccountBalanceResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  ::xsd::cxx::tree::one< accountType_type > accountType_;
  optionLevel_optional optionLevel_;
  ::xsd::cxx::tree::one< accountBalance_type > accountBalance_;
  cashAccountBalance_optional cashAccountBalance_;
  marginAccountBalance_optional marginAccountBalance_;
};

class AccountListResponse: public ::xml_schema::type
{
  public:
  // Account
  // 
  typedef ::account Account_type;
  typedef ::xsd::cxx::tree::sequence< Account_type > Account_sequence;
  typedef Account_sequence::iterator Account_iterator;
  typedef Account_sequence::const_iterator Account_const_iterator;
  typedef ::xsd::cxx::tree::traits< Account_type, char > Account_traits;

  const Account_sequence&
  Account () const;

  Account_sequence&
  Account ();

  void
  Account (const Account_sequence& s);

  // Constructors.
  //
  AccountListResponse ();

  AccountListResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  AccountListResponse (const AccountListResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual AccountListResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~AccountListResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Account_sequence Account_;
};

class Error: public ::xml_schema::type
{
  public:
  // ErrorCode
  // 
  typedef ::xml_schema::int_ ErrorCode_type;
  typedef ::xsd::cxx::tree::traits< ErrorCode_type, char > ErrorCode_traits;

  const ErrorCode_type&
  ErrorCode () const;

  ErrorCode_type&
  ErrorCode ();

  void
  ErrorCode (const ErrorCode_type& x);

  // ErrorMessage
  // 
  typedef ::xml_schema::string ErrorMessage_type;
  typedef ::xsd::cxx::tree::traits< ErrorMessage_type, char > ErrorMessage_traits;

  const ErrorMessage_type&
  ErrorMessage () const;

  ErrorMessage_type&
  ErrorMessage ();

  void
  ErrorMessage (const ErrorMessage_type& x);

  void
  ErrorMessage (::std::auto_ptr< ErrorMessage_type > p);

  // httpCode
  // 
  typedef ::xml_schema::int_ httpCode_type;
  typedef ::xsd::cxx::tree::optional< httpCode_type > httpCode_optional;
  typedef ::xsd::cxx::tree::traits< httpCode_type, char > httpCode_traits;

  const httpCode_optional&
  httpCode () const;

  httpCode_optional&
  httpCode ();

  void
  httpCode (const httpCode_type& x);

  void
  httpCode (const httpCode_optional& x);

  // Constructors.
  //
  Error (const ErrorCode_type&,
         const ErrorMessage_type&);

  Error (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Error (const Error& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Error*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Error ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ErrorCode_type > ErrorCode_;
  ::xsd::cxx::tree::one< ErrorMessage_type > ErrorMessage_;
  httpCode_optional httpCode_;
};

class accountPositionsRequest: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // count
  // 
  typedef ::int_or_empty count_type;
  typedef ::xsd::cxx::tree::optional< count_type > count_optional;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_optional&
  count () const;

  count_optional&
  count ();

  void
  count (const count_type& x);

  void
  count (const count_optional& x);

  void
  count (::std::auto_ptr< count_type > p);

  static const count_type&
  count_default_value ();

  // marker
  // 
  typedef ::xml_schema::string marker_type;
  typedef ::xsd::cxx::tree::optional< marker_type > marker_optional;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_optional&
  marker () const;

  marker_optional&
  marker ();

  void
  marker (const marker_type& x);

  void
  marker (const marker_optional& x);

  void
  marker (::std::auto_ptr< marker_type > p);

  // symbol
  // 
  typedef ::symbol symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // typeCode
  // 
  typedef ::xml_schema::string typeCode_type;
  typedef ::xsd::cxx::tree::optional< typeCode_type > typeCode_optional;
  typedef ::xsd::cxx::tree::traits< typeCode_type, char > typeCode_traits;

  const typeCode_optional&
  typeCode () const;

  typeCode_optional&
  typeCode ();

  void
  typeCode (const typeCode_type& x);

  void
  typeCode (const typeCode_optional& x);

  void
  typeCode (::std::auto_ptr< typeCode_type > p);

  // callPut
  // 
  typedef ::callPut1 callPut_type;
  typedef ::xsd::cxx::tree::optional< callPut_type > callPut_optional;
  typedef ::xsd::cxx::tree::traits< callPut_type, char > callPut_traits;

  const callPut_optional&
  callPut () const;

  callPut_optional&
  callPut ();

  void
  callPut (const callPut_type& x);

  void
  callPut (const callPut_optional& x);

  void
  callPut (::std::auto_ptr< callPut_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // expYear
  // 
  typedef ::int_or_empty expYear_type;
  typedef ::xsd::cxx::tree::optional< expYear_type > expYear_optional;
  typedef ::xsd::cxx::tree::traits< expYear_type, char > expYear_traits;

  const expYear_optional&
  expYear () const;

  expYear_optional&
  expYear ();

  void
  expYear (const expYear_type& x);

  void
  expYear (const expYear_optional& x);

  void
  expYear (::std::auto_ptr< expYear_type > p);

  // expMonth
  // 
  typedef ::int_or_empty expMonth_type;
  typedef ::xsd::cxx::tree::optional< expMonth_type > expMonth_optional;
  typedef ::xsd::cxx::tree::traits< expMonth_type, char > expMonth_traits;

  const expMonth_optional&
  expMonth () const;

  expMonth_optional&
  expMonth ();

  void
  expMonth (const expMonth_type& x);

  void
  expMonth (const expMonth_optional& x);

  void
  expMonth (::std::auto_ptr< expMonth_type > p);

  // expDay
  // 
  typedef ::int_or_empty expDay_type;
  typedef ::xsd::cxx::tree::optional< expDay_type > expDay_optional;
  typedef ::xsd::cxx::tree::traits< expDay_type, char > expDay_traits;

  const expDay_optional&
  expDay () const;

  expDay_optional&
  expDay ();

  void
  expDay (const expDay_type& x);

  void
  expDay (const expDay_optional& x);

  void
  expDay (::std::auto_ptr< expDay_type > p);

  // Constructors.
  //
  accountPositionsRequest (const accountId_type&);

  accountPositionsRequest (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  accountPositionsRequest (const accountPositionsRequest& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual accountPositionsRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountPositionsRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  count_optional count_;
  static const count_type count_default_value_;
  marker_optional marker_;
  symbol_optional symbol_;
  typeCode_optional typeCode_;
  callPut_optional callPut_;
  strikePrice_optional strikePrice_;
  expYear_optional expYear_;
  expMonth_optional expMonth_;
  expDay_optional expDay_;
};

class accountIdList: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::sequence< accountId_type > accountId_sequence;
  typedef accountId_sequence::iterator accountId_iterator;
  typedef accountId_sequence::const_iterator accountId_const_iterator;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_sequence&
  accountId () const;

  accountId_sequence&
  accountId ();

  void
  accountId (const accountId_sequence& s);

  // Constructors.
  //
  accountIdList ();

  accountIdList (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  accountIdList (const accountIdList& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual accountIdList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~accountIdList ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  accountId_sequence accountId_;
};

class transactionDetails: public ::xml_schema::type
{
  public:
  // transactionDate
  // 
  typedef ::xml_schema::long_ transactionDate_type;
  typedef ::xsd::cxx::tree::traits< transactionDate_type, char > transactionDate_traits;

  const transactionDate_type&
  transactionDate () const;

  transactionDate_type&
  transactionDate ();

  void
  transactionDate (const transactionDate_type& x);

  // transactionType
  // 
  typedef ::xml_schema::string transactionType_type;
  typedef ::xsd::cxx::tree::optional< transactionType_type > transactionType_optional;
  typedef ::xsd::cxx::tree::traits< transactionType_type, char > transactionType_traits;

  const transactionType_optional&
  transactionType () const;

  transactionType_optional&
  transactionType ();

  void
  transactionType (const transactionType_type& x);

  void
  transactionType (const transactionType_optional& x);

  void
  transactionType (::std::auto_ptr< transactionType_type > p);

  // userDescription
  // 
  typedef ::xml_schema::string userDescription_type;
  typedef ::xsd::cxx::tree::optional< userDescription_type > userDescription_optional;
  typedef ::xsd::cxx::tree::traits< userDescription_type, char > userDescription_traits;

  const userDescription_optional&
  userDescription () const;

  userDescription_optional&
  userDescription ();

  void
  userDescription (const userDescription_type& x);

  void
  userDescription (const userDescription_optional& x);

  void
  userDescription (::std::auto_ptr< userDescription_type > p);

  // transactionDescription
  // 
  typedef ::xml_schema::string transactionDescription_type;
  typedef ::xsd::cxx::tree::optional< transactionDescription_type > transactionDescription_optional;
  typedef ::xsd::cxx::tree::traits< transactionDescription_type, char > transactionDescription_traits;

  const transactionDescription_optional&
  transactionDescription () const;

  transactionDescription_optional&
  transactionDescription ();

  void
  transactionDescription (const transactionDescription_type& x);

  void
  transactionDescription (const transactionDescription_optional& x);

  void
  transactionDescription (::std::auto_ptr< transactionDescription_type > p);

  // quantity
  // 
  typedef ::xml_schema::decimal quantity_type;
  typedef ::xsd::cxx::tree::optional< quantity_type > quantity_optional;
  typedef ::xsd::cxx::tree::traits< quantity_type, char, ::xsd::cxx::tree::schema_type::decimal > quantity_traits;

  const quantity_optional&
  quantity () const;

  quantity_optional&
  quantity ();

  void
  quantity (const quantity_type& x);

  void
  quantity (const quantity_optional& x);

  // amount
  // 
  typedef ::xml_schema::decimal amount_type;
  typedef ::xsd::cxx::tree::optional< amount_type > amount_optional;
  typedef ::xsd::cxx::tree::traits< amount_type, char, ::xsd::cxx::tree::schema_type::decimal > amount_traits;

  const amount_optional&
  amount () const;

  amount_optional&
  amount ();

  void
  amount (const amount_type& x);

  void
  amount (const amount_optional& x);

  // price
  // 
  typedef ::xml_schema::decimal price_type;
  typedef ::xsd::cxx::tree::optional< price_type > price_optional;
  typedef ::xsd::cxx::tree::traits< price_type, char, ::xsd::cxx::tree::schema_type::decimal > price_traits;

  const price_optional&
  price () const;

  price_optional&
  price ();

  void
  price (const price_type& x);

  void
  price (const price_optional& x);

  // commission
  // 
  typedef ::xml_schema::decimal commission_type;
  typedef ::xsd::cxx::tree::optional< commission_type > commission_optional;
  typedef ::xsd::cxx::tree::traits< commission_type, char, ::xsd::cxx::tree::schema_type::decimal > commission_traits;

  const commission_optional&
  commission () const;

  commission_optional&
  commission ();

  void
  commission (const commission_type& x);

  void
  commission (const commission_optional& x);

  // productId
  // 
  typedef ::productId productId_type;
  typedef ::xsd::cxx::tree::optional< productId_type > productId_optional;
  typedef ::xsd::cxx::tree::traits< productId_type, char > productId_traits;

  const productId_optional&
  productId () const;

  productId_optional&
  productId ();

  void
  productId (const productId_type& x);

  void
  productId (const productId_optional& x);

  void
  productId (::std::auto_ptr< productId_type > p);

  // underlyingProductId
  // 
  typedef ::productId underlyingProductId_type;
  typedef ::xsd::cxx::tree::optional< underlyingProductId_type > underlyingProductId_optional;
  typedef ::xsd::cxx::tree::traits< underlyingProductId_type, char > underlyingProductId_traits;

  const underlyingProductId_optional&
  underlyingProductId () const;

  underlyingProductId_optional&
  underlyingProductId ();

  void
  underlyingProductId (const underlyingProductId_type& x);

  void
  underlyingProductId (const underlyingProductId_optional& x);

  void
  underlyingProductId (::std::auto_ptr< underlyingProductId_type > p);

  // displaySymbol
  // 
  typedef ::xml_schema::string displaySymbol_type;
  typedef ::xsd::cxx::tree::optional< displaySymbol_type > displaySymbol_optional;
  typedef ::xsd::cxx::tree::traits< displaySymbol_type, char > displaySymbol_traits;

  const displaySymbol_optional&
  displaySymbol () const;

  displaySymbol_optional&
  displaySymbol ();

  void
  displaySymbol (const displaySymbol_type& x);

  void
  displaySymbol (const displaySymbol_optional& x);

  void
  displaySymbol (::std::auto_ptr< displaySymbol_type > p);

  // accountOrderNo
  // 
  typedef ::xml_schema::long_ accountOrderNo_type;
  typedef ::xsd::cxx::tree::traits< accountOrderNo_type, char > accountOrderNo_traits;

  const accountOrderNo_type&
  accountOrderNo () const;

  accountOrderNo_type&
  accountOrderNo ();

  void
  accountOrderNo (const accountOrderNo_type& x);

  // settlementCurrency
  // 
  typedef ::xml_schema::string settlementCurrency_type;
  typedef ::xsd::cxx::tree::optional< settlementCurrency_type > settlementCurrency_optional;
  typedef ::xsd::cxx::tree::traits< settlementCurrency_type, char > settlementCurrency_traits;

  const settlementCurrency_optional&
  settlementCurrency () const;

  settlementCurrency_optional&
  settlementCurrency ();

  void
  settlementCurrency (const settlementCurrency_type& x);

  void
  settlementCurrency (const settlementCurrency_optional& x);

  void
  settlementCurrency (::std::auto_ptr< settlementCurrency_type > p);

  // paymentCurrency
  // 
  typedef ::xml_schema::string paymentCurrency_type;
  typedef ::xsd::cxx::tree::optional< paymentCurrency_type > paymentCurrency_optional;
  typedef ::xsd::cxx::tree::traits< paymentCurrency_type, char > paymentCurrency_traits;

  const paymentCurrency_optional&
  paymentCurrency () const;

  paymentCurrency_optional&
  paymentCurrency ();

  void
  paymentCurrency (const paymentCurrency_type& x);

  void
  paymentCurrency (const paymentCurrency_optional& x);

  void
  paymentCurrency (::std::auto_ptr< paymentCurrency_type > p);

  // category
  // 
  typedef ::xml_schema::string category_type;
  typedef ::xsd::cxx::tree::optional< category_type > category_optional;
  typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

  const category_optional&
  category () const;

  category_optional&
  category ();

  void
  category (const category_type& x);

  void
  category (const category_optional& x);

  void
  category (::std::auto_ptr< category_type > p);

  // settlementDate
  // 
  typedef ::xml_schema::long_ settlementDate_type;
  typedef ::xsd::cxx::tree::traits< settlementDate_type, char > settlementDate_traits;

  const settlementDate_type&
  settlementDate () const;

  settlementDate_type&
  settlementDate ();

  void
  settlementDate (const settlementDate_type& x);

  // Constructors.
  //
  transactionDetails (const transactionDate_type&,
                      const accountOrderNo_type&,
                      const settlementDate_type&);

  transactionDetails (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  transactionDetails (const transactionDetails& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual transactionDetails*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~transactionDetails ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< transactionDate_type > transactionDate_;
  transactionType_optional transactionType_;
  userDescription_optional userDescription_;
  transactionDescription_optional transactionDescription_;
  quantity_optional quantity_;
  amount_optional amount_;
  price_optional price_;
  commission_optional commission_;
  productId_optional productId_;
  underlyingProductId_optional underlyingProductId_;
  displaySymbol_optional displaySymbol_;
  ::xsd::cxx::tree::one< accountOrderNo_type > accountOrderNo_;
  settlementCurrency_optional settlementCurrency_;
  paymentCurrency_optional paymentCurrency_;
  category_optional category_;
  ::xsd::cxx::tree::one< settlementDate_type > settlementDate_;
};

class transactions: public ::xml_schema::type
{
  public:
  // accountId
  // 
  typedef ::xml_schema::string accountId_type;
  typedef ::xsd::cxx::tree::traits< accountId_type, char > accountId_traits;

  const accountId_type&
  accountId () const;

  accountId_type&
  accountId ();

  void
  accountId (const accountId_type& x);

  void
  accountId (::std::auto_ptr< accountId_type > p);

  // count
  // 
  typedef ::xml_schema::int_ count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // next
  // 
  typedef ::xml_schema::string next_type;
  typedef ::xsd::cxx::tree::optional< next_type > next_optional;
  typedef ::xsd::cxx::tree::traits< next_type, char > next_traits;

  const next_optional&
  next () const;

  next_optional&
  next ();

  void
  next (const next_type& x);

  void
  next (const next_optional& x);

  void
  next (::std::auto_ptr< next_type > p);

  // transaction
  // 
  typedef ::transaction transaction_type;
  typedef ::xsd::cxx::tree::sequence< transaction_type > transaction_sequence;
  typedef transaction_sequence::iterator transaction_iterator;
  typedef transaction_sequence::const_iterator transaction_const_iterator;
  typedef ::xsd::cxx::tree::traits< transaction_type, char > transaction_traits;

  const transaction_sequence&
  transaction () const;

  transaction_sequence&
  transaction ();

  void
  transaction (const transaction_sequence& s);

  // Constructors.
  //
  transactions (const accountId_type&,
                const count_type&);

  transactions (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  transactions (const transactions& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual transactions*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~transactions ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< accountId_type > accountId_;
  ::xsd::cxx::tree::one< count_type > count_;
  next_optional next_;
  transaction_sequence transaction_;
};

class callPut1: public ::xml_schema::string
{
  public:
  enum value
  {
    CALL,
    PUT
  };

  callPut1 (value v);

  callPut1 (const char* v);

  callPut1 (const ::std::string& v);

  callPut1 (const ::xml_schema::string& v);

  callPut1 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  callPut1 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  callPut1 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  callPut1 (const callPut1& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual callPut1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  callPut1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_callPut1_convert ();
  }

  protected:
  value
  _xsd_callPut1_convert () const;

  public:
  static const char* const _xsd_callPut1_literals_[2];
  static const value _xsd_callPut1_indexes_[2];
};

class transaction: public ::xml_schema::type
{
  public:
  // transactionDate
  // 
  typedef ::xml_schema::long_ transactionDate_type;
  typedef ::xsd::cxx::tree::traits< transactionDate_type, char > transactionDate_traits;

  const transactionDate_type&
  transactionDate () const;

  transactionDate_type&
  transactionDate ();

  void
  transactionDate (const transactionDate_type& x);

  // transactionShortDesc
  // 
  typedef ::xml_schema::string transactionShortDesc_type;
  typedef ::xsd::cxx::tree::traits< transactionShortDesc_type, char > transactionShortDesc_traits;

  const transactionShortDesc_type&
  transactionShortDesc () const;

  transactionShortDesc_type&
  transactionShortDesc ();

  void
  transactionShortDesc (const transactionShortDesc_type& x);

  void
  transactionShortDesc (::std::auto_ptr< transactionShortDesc_type > p);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_type&
  description () const;

  description_type&
  description ();

  void
  description (const description_type& x);

  void
  description (::std::auto_ptr< description_type > p);

  // amount
  // 
  typedef ::xml_schema::decimal amount_type;
  typedef ::xsd::cxx::tree::optional< amount_type > amount_optional;
  typedef ::xsd::cxx::tree::traits< amount_type, char, ::xsd::cxx::tree::schema_type::decimal > amount_traits;

  const amount_optional&
  amount () const;

  amount_optional&
  amount ();

  void
  amount (const amount_type& x);

  void
  amount (const amount_optional& x);

  // details
  // 
  typedef ::xml_schema::string details_type;
  typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

  const details_type&
  details () const;

  details_type&
  details ();

  void
  details (const details_type& x);

  void
  details (::std::auto_ptr< details_type > p);

  // Constructors.
  //
  transaction (const transactionDate_type&,
               const transactionShortDesc_type&,
               const description_type&,
               const details_type&);

  transaction (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  transaction (const transaction& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual transaction*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~transaction ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< transactionDate_type > transactionDate_;
  ::xsd::cxx::tree::one< transactionShortDesc_type > transactionShortDesc_;
  ::xsd::cxx::tree::one< description_type > description_;
  amount_optional amount_;
  ::xsd::cxx::tree::one< details_type > details_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountPositionsResponse >
AccountPositionsResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertsResponse >
AlertsResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::DeleteAlertResponse >
DeleteAlertResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AlertDetailsResponse >
AlertDetailsResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountBalanceResponse >
AccountBalanceResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccountListResponse >
AccountListResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Error >
Error_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::xml_schema::string >
accountId (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::string >
accountId (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::xml_schema::integer >
alertId (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::xml_schema::integer >
alertId (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::xml_schema::integer >
alertId (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::xml_schema::integer >
alertId (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountPositionsRequest >
accountPositionsRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::accountIdList >
accountIdList_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::accountIdList >
accountIdList_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::accountIdList >
accountIdList_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::accountIdList >
accountIdList_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactionDetails >
transactionDetails_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::transactions >
transactions_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::transactions >
transactions_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::transactions >
transactions_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::transactions >
transactions_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ACCOUNT_SRV_H
