// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCHEMA_FILES_MARKET_SRV_HXX
#define SCHEMA_FILES_MARKET_SRV_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class symbolList;
class quoteData;
class detailProduct;
class allQuote;
class fundamentalQuote;
class intradayQuote;
class optionQuote;
class week52Quote;
class expirationDate;
class empty_string;
class integer_or_empty;
class optionChainPair;
class callOptionChain;
class putOptionChain;
class productId;
class product;
class marketIndex;
class pairType;
class securityType;
class QuoteRequest;
class QuoteResponse;
class OptionExpireDateGetRequest;
class OptionExpireDateGetResponse;
class OptionChainRequest;
class OptionChainResponse;
class ProductLookupRequest;
class ProductLookupResponse;
class MarketIndicesRequest;
class MarketIndicesResponse;
class Error;
class detailFlag;
class expiryType;
class chainType;
class skipAdjusted;
class type;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class symbolList: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::sequence< symbol_type > symbol_sequence;
  typedef symbol_sequence::iterator symbol_iterator;
  typedef symbol_sequence::const_iterator symbol_const_iterator;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_sequence&
  symbol () const;

  symbol_sequence&
  symbol ();

  void
  symbol (const symbol_sequence& s);

  // Constructors.
  //
  symbolList ();

  symbolList (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  symbolList (const symbolList& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual symbolList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~symbolList ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  symbol_sequence symbol_;
};

class quoteData: public ::xml_schema::type
{
  public:
  // all
  // 
  typedef ::allQuote all_type;
  typedef ::xsd::cxx::tree::optional< all_type > all_optional;
  typedef ::xsd::cxx::tree::traits< all_type, char > all_traits;

  const all_optional&
  all () const;

  all_optional&
  all ();

  void
  all (const all_type& x);

  void
  all (const all_optional& x);

  void
  all (::std::auto_ptr< all_type > p);

  // dateTime
  // 
  typedef ::xml_schema::string dateTime_type;
  typedef ::xsd::cxx::tree::optional< dateTime_type > dateTime_optional;
  typedef ::xsd::cxx::tree::traits< dateTime_type, char > dateTime_traits;

  const dateTime_optional&
  dateTime () const;

  dateTime_optional&
  dateTime ();

  void
  dateTime (const dateTime_type& x);

  void
  dateTime (const dateTime_optional& x);

  void
  dateTime (::std::auto_ptr< dateTime_type > p);

  // errorMessage
  // 
  typedef ::xml_schema::string errorMessage_type;
  typedef ::xsd::cxx::tree::optional< errorMessage_type > errorMessage_optional;
  typedef ::xsd::cxx::tree::traits< errorMessage_type, char > errorMessage_traits;

  const errorMessage_optional&
  errorMessage () const;

  errorMessage_optional&
  errorMessage ();

  void
  errorMessage (const errorMessage_type& x);

  void
  errorMessage (const errorMessage_optional& x);

  void
  errorMessage (::std::auto_ptr< errorMessage_type > p);

  // fundamental
  // 
  typedef ::fundamentalQuote fundamental_type;
  typedef ::xsd::cxx::tree::optional< fundamental_type > fundamental_optional;
  typedef ::xsd::cxx::tree::traits< fundamental_type, char > fundamental_traits;

  const fundamental_optional&
  fundamental () const;

  fundamental_optional&
  fundamental ();

  void
  fundamental (const fundamental_type& x);

  void
  fundamental (const fundamental_optional& x);

  void
  fundamental (::std::auto_ptr< fundamental_type > p);

  // intraday
  // 
  typedef ::intradayQuote intraday_type;
  typedef ::xsd::cxx::tree::optional< intraday_type > intraday_optional;
  typedef ::xsd::cxx::tree::traits< intraday_type, char > intraday_traits;

  const intraday_optional&
  intraday () const;

  intraday_optional&
  intraday ();

  void
  intraday (const intraday_type& x);

  void
  intraday (const intraday_optional& x);

  void
  intraday (::std::auto_ptr< intraday_type > p);

  // option
  // 
  typedef ::optionQuote option_type;
  typedef ::xsd::cxx::tree::optional< option_type > option_optional;
  typedef ::xsd::cxx::tree::traits< option_type, char > option_traits;

  const option_optional&
  option () const;

  option_optional&
  option ();

  void
  option (const option_type& x);

  void
  option (const option_optional& x);

  void
  option (::std::auto_ptr< option_type > p);

  // product
  // 
  typedef ::detailProduct product_type;
  typedef ::xsd::cxx::tree::optional< product_type > product_optional;
  typedef ::xsd::cxx::tree::traits< product_type, char > product_traits;

  const product_optional&
  product () const;

  product_optional&
  product ();

  void
  product (const product_type& x);

  void
  product (const product_optional& x);

  void
  product (::std::auto_ptr< product_type > p);

  // week52
  // 
  typedef ::week52Quote week52_type;
  typedef ::xsd::cxx::tree::optional< week52_type > week52_optional;
  typedef ::xsd::cxx::tree::traits< week52_type, char > week52_traits;

  const week52_optional&
  week52 () const;

  week52_optional&
  week52 ();

  void
  week52 (const week52_type& x);

  void
  week52 (const week52_optional& x);

  void
  week52 (::std::auto_ptr< week52_type > p);

  // Constructors.
  //
  quoteData ();

  quoteData (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  quoteData (const quoteData& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual quoteData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~quoteData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  all_optional all_;
  dateTime_optional dateTime_;
  errorMessage_optional errorMessage_;
  fundamental_optional fundamental_;
  intraday_optional intraday_;
  option_optional option_;
  product_optional product_;
  week52_optional week52_;
};

class detailProduct: public ::xml_schema::type
{
  public:
  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_type&
  symbol () const;

  symbol_type&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // type
  // 
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // exchange
  // 
  typedef ::xml_schema::string exchange_type;
  typedef ::xsd::cxx::tree::traits< exchange_type, char > exchange_traits;

  const exchange_type&
  exchange () const;

  exchange_type&
  exchange ();

  void
  exchange (const exchange_type& x);

  void
  exchange (::std::auto_ptr< exchange_type > p);

  // optionType
  // 
  typedef ::xml_schema::string optionType_type;
  typedef ::xsd::cxx::tree::optional< optionType_type > optionType_optional;
  typedef ::xsd::cxx::tree::traits< optionType_type, char > optionType_traits;

  const optionType_optional&
  optionType () const;

  optionType_optional&
  optionType ();

  void
  optionType (const optionType_type& x);

  void
  optionType (const optionType_optional& x);

  void
  optionType (::std::auto_ptr< optionType_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // expirationYear
  // 
  typedef ::xml_schema::int_ expirationYear_type;
  typedef ::xsd::cxx::tree::optional< expirationYear_type > expirationYear_optional;
  typedef ::xsd::cxx::tree::traits< expirationYear_type, char > expirationYear_traits;

  const expirationYear_optional&
  expirationYear () const;

  expirationYear_optional&
  expirationYear ();

  void
  expirationYear (const expirationYear_type& x);

  void
  expirationYear (const expirationYear_optional& x);

  // expirationMonth
  // 
  typedef ::xml_schema::int_ expirationMonth_type;
  typedef ::xsd::cxx::tree::optional< expirationMonth_type > expirationMonth_optional;
  typedef ::xsd::cxx::tree::traits< expirationMonth_type, char > expirationMonth_traits;

  const expirationMonth_optional&
  expirationMonth () const;

  expirationMonth_optional&
  expirationMonth ();

  void
  expirationMonth (const expirationMonth_type& x);

  void
  expirationMonth (const expirationMonth_optional& x);

  // expirationDay
  // 
  typedef ::xml_schema::int_ expirationDay_type;
  typedef ::xsd::cxx::tree::optional< expirationDay_type > expirationDay_optional;
  typedef ::xsd::cxx::tree::traits< expirationDay_type, char > expirationDay_traits;

  const expirationDay_optional&
  expirationDay () const;

  expirationDay_optional&
  expirationDay ();

  void
  expirationDay (const expirationDay_type& x);

  void
  expirationDay (const expirationDay_optional& x);

  // Constructors.
  //
  detailProduct (const symbol_type&,
                 const type_type&,
                 const exchange_type&);

  detailProduct (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  detailProduct (const detailProduct& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual detailProduct*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~detailProduct ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbol_type > symbol_;
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< exchange_type > exchange_;
  optionType_optional optionType_;
  strikePrice_optional strikePrice_;
  expirationYear_optional expirationYear_;
  expirationMonth_optional expirationMonth_;
  expirationDay_optional expirationDay_;
};

class allQuote: public ::xml_schema::type
{
  public:
  // adjNonAdjFlag
  // 
  typedef ::xml_schema::boolean adjNonAdjFlag_type;
  typedef ::xsd::cxx::tree::traits< adjNonAdjFlag_type, char > adjNonAdjFlag_traits;

  const adjNonAdjFlag_type&
  adjNonAdjFlag () const;

  adjNonAdjFlag_type&
  adjNonAdjFlag ();

  void
  adjNonAdjFlag (const adjNonAdjFlag_type& x);

  // annualDividend
  // 
  typedef ::xml_schema::double_ annualDividend_type;
  typedef ::xsd::cxx::tree::traits< annualDividend_type, char, ::xsd::cxx::tree::schema_type::double_ > annualDividend_traits;

  const annualDividend_type&
  annualDividend () const;

  annualDividend_type&
  annualDividend ();

  void
  annualDividend (const annualDividend_type& x);

  // ask
  // 
  typedef ::xml_schema::double_ ask_type;
  typedef ::xsd::cxx::tree::traits< ask_type, char, ::xsd::cxx::tree::schema_type::double_ > ask_traits;

  const ask_type&
  ask () const;

  ask_type&
  ask ();

  void
  ask (const ask_type& x);

  // askExchange
  // 
  typedef ::xml_schema::string askExchange_type;
  typedef ::xsd::cxx::tree::traits< askExchange_type, char > askExchange_traits;

  const askExchange_type&
  askExchange () const;

  askExchange_type&
  askExchange ();

  void
  askExchange (const askExchange_type& x);

  void
  askExchange (::std::auto_ptr< askExchange_type > p);

  // askSize
  // 
  typedef ::xml_schema::long_ askSize_type;
  typedef ::xsd::cxx::tree::traits< askSize_type, char > askSize_traits;

  const askSize_type&
  askSize () const;

  askSize_type&
  askSize ();

  void
  askSize (const askSize_type& x);

  // askTime
  // 
  typedef ::xml_schema::string askTime_type;
  typedef ::xsd::cxx::tree::traits< askTime_type, char > askTime_traits;

  const askTime_type&
  askTime () const;

  askTime_type&
  askTime ();

  void
  askTime (const askTime_type& x);

  void
  askTime (::std::auto_ptr< askTime_type > p);

  // bid
  // 
  typedef ::xml_schema::double_ bid_type;
  typedef ::xsd::cxx::tree::traits< bid_type, char, ::xsd::cxx::tree::schema_type::double_ > bid_traits;

  const bid_type&
  bid () const;

  bid_type&
  bid ();

  void
  bid (const bid_type& x);

  // bidExchange
  // 
  typedef ::xml_schema::string bidExchange_type;
  typedef ::xsd::cxx::tree::traits< bidExchange_type, char > bidExchange_traits;

  const bidExchange_type&
  bidExchange () const;

  bidExchange_type&
  bidExchange ();

  void
  bidExchange (const bidExchange_type& x);

  void
  bidExchange (::std::auto_ptr< bidExchange_type > p);

  // bidSize
  // 
  typedef ::xml_schema::long_ bidSize_type;
  typedef ::xsd::cxx::tree::traits< bidSize_type, char > bidSize_traits;

  const bidSize_type&
  bidSize () const;

  bidSize_type&
  bidSize ();

  void
  bidSize (const bidSize_type& x);

  // bidTime
  // 
  typedef ::xml_schema::string bidTime_type;
  typedef ::xsd::cxx::tree::traits< bidTime_type, char > bidTime_traits;

  const bidTime_type&
  bidTime () const;

  bidTime_type&
  bidTime ();

  void
  bidTime (const bidTime_type& x);

  void
  bidTime (::std::auto_ptr< bidTime_type > p);

  // chgClose
  // 
  typedef ::xml_schema::double_ chgClose_type;
  typedef ::xsd::cxx::tree::traits< chgClose_type, char, ::xsd::cxx::tree::schema_type::double_ > chgClose_traits;

  const chgClose_type&
  chgClose () const;

  chgClose_type&
  chgClose ();

  void
  chgClose (const chgClose_type& x);

  // chgClosePrcn
  // 
  typedef ::xml_schema::double_ chgClosePrcn_type;
  typedef ::xsd::cxx::tree::traits< chgClosePrcn_type, char, ::xsd::cxx::tree::schema_type::double_ > chgClosePrcn_traits;

  const chgClosePrcn_type&
  chgClosePrcn () const;

  chgClosePrcn_type&
  chgClosePrcn ();

  void
  chgClosePrcn (const chgClosePrcn_type& x);

  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_type&
  companyName () const;

  companyName_type&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // daysToExpiration
  // 
  typedef ::xml_schema::long_ daysToExpiration_type;
  typedef ::xsd::cxx::tree::traits< daysToExpiration_type, char > daysToExpiration_traits;

  const daysToExpiration_type&
  daysToExpiration () const;

  daysToExpiration_type&
  daysToExpiration ();

  void
  daysToExpiration (const daysToExpiration_type& x);

  // dirLast
  // 
  typedef ::xml_schema::string dirLast_type;
  typedef ::xsd::cxx::tree::traits< dirLast_type, char > dirLast_traits;

  const dirLast_type&
  dirLast () const;

  dirLast_type&
  dirLast ();

  void
  dirLast (const dirLast_type& x);

  void
  dirLast (::std::auto_ptr< dirLast_type > p);

  // dividend
  // 
  typedef ::xml_schema::double_ dividend_type;
  typedef ::xsd::cxx::tree::traits< dividend_type, char, ::xsd::cxx::tree::schema_type::double_ > dividend_traits;

  const dividend_type&
  dividend () const;

  dividend_type&
  dividend ();

  void
  dividend (const dividend_type& x);

  // eps
  // 
  typedef ::xml_schema::double_ eps_type;
  typedef ::xsd::cxx::tree::traits< eps_type, char, ::xsd::cxx::tree::schema_type::double_ > eps_traits;

  const eps_type&
  eps () const;

  eps_type&
  eps ();

  void
  eps (const eps_type& x);

  // estEarnings
  // 
  typedef ::xml_schema::double_ estEarnings_type;
  typedef ::xsd::cxx::tree::traits< estEarnings_type, char, ::xsd::cxx::tree::schema_type::double_ > estEarnings_traits;

  const estEarnings_type&
  estEarnings () const;

  estEarnings_type&
  estEarnings ();

  void
  estEarnings (const estEarnings_type& x);

  // exDivDate
  // 
  typedef ::xml_schema::string exDivDate_type;
  typedef ::xsd::cxx::tree::traits< exDivDate_type, char > exDivDate_traits;

  const exDivDate_type&
  exDivDate () const;

  exDivDate_type&
  exDivDate ();

  void
  exDivDate (const exDivDate_type& x);

  void
  exDivDate (::std::auto_ptr< exDivDate_type > p);

  // exchgLastTrade
  // 
  typedef ::xml_schema::string exchgLastTrade_type;
  typedef ::xsd::cxx::tree::traits< exchgLastTrade_type, char > exchgLastTrade_traits;

  const exchgLastTrade_type&
  exchgLastTrade () const;

  exchgLastTrade_type&
  exchgLastTrade ();

  void
  exchgLastTrade (const exchgLastTrade_type& x);

  void
  exchgLastTrade (::std::auto_ptr< exchgLastTrade_type > p);

  // fsi
  // 
  typedef ::xml_schema::string fsi_type;
  typedef ::xsd::cxx::tree::traits< fsi_type, char > fsi_traits;

  const fsi_type&
  fsi () const;

  fsi_type&
  fsi ();

  void
  fsi (const fsi_type& x);

  void
  fsi (::std::auto_ptr< fsi_type > p);

  // high
  // 
  typedef ::xml_schema::double_ high_type;
  typedef ::xsd::cxx::tree::traits< high_type, char, ::xsd::cxx::tree::schema_type::double_ > high_traits;

  const high_type&
  high () const;

  high_type&
  high ();

  void
  high (const high_type& x);

  // high52
  // 
  typedef ::xml_schema::double_ high52_type;
  typedef ::xsd::cxx::tree::traits< high52_type, char, ::xsd::cxx::tree::schema_type::double_ > high52_traits;

  const high52_type&
  high52 () const;

  high52_type&
  high52 ();

  void
  high52 (const high52_type& x);

  // highAsk
  // 
  typedef ::xml_schema::double_ highAsk_type;
  typedef ::xsd::cxx::tree::traits< highAsk_type, char, ::xsd::cxx::tree::schema_type::double_ > highAsk_traits;

  const highAsk_type&
  highAsk () const;

  highAsk_type&
  highAsk ();

  void
  highAsk (const highAsk_type& x);

  // highBid
  // 
  typedef ::xml_schema::double_ highBid_type;
  typedef ::xsd::cxx::tree::traits< highBid_type, char, ::xsd::cxx::tree::schema_type::double_ > highBid_traits;

  const highBid_type&
  highBid () const;

  highBid_type&
  highBid ();

  void
  highBid (const highBid_type& x);

  // lastTrade
  // 
  typedef ::xml_schema::double_ lastTrade_type;
  typedef ::xsd::cxx::tree::traits< lastTrade_type, char, ::xsd::cxx::tree::schema_type::double_ > lastTrade_traits;

  const lastTrade_type&
  lastTrade () const;

  lastTrade_type&
  lastTrade ();

  void
  lastTrade (const lastTrade_type& x);

  // low
  // 
  typedef ::xml_schema::double_ low_type;
  typedef ::xsd::cxx::tree::traits< low_type, char, ::xsd::cxx::tree::schema_type::double_ > low_traits;

  const low_type&
  low () const;

  low_type&
  low ();

  void
  low (const low_type& x);

  // low52
  // 
  typedef ::xml_schema::double_ low52_type;
  typedef ::xsd::cxx::tree::traits< low52_type, char, ::xsd::cxx::tree::schema_type::double_ > low52_traits;

  const low52_type&
  low52 () const;

  low52_type&
  low52 ();

  void
  low52 (const low52_type& x);

  // lowAsk
  // 
  typedef ::xml_schema::double_ lowAsk_type;
  typedef ::xsd::cxx::tree::traits< lowAsk_type, char, ::xsd::cxx::tree::schema_type::double_ > lowAsk_traits;

  const lowAsk_type&
  lowAsk () const;

  lowAsk_type&
  lowAsk ();

  void
  lowAsk (const lowAsk_type& x);

  // lowBid
  // 
  typedef ::xml_schema::double_ lowBid_type;
  typedef ::xsd::cxx::tree::traits< lowBid_type, char, ::xsd::cxx::tree::schema_type::double_ > lowBid_traits;

  const lowBid_type&
  lowBid () const;

  lowBid_type&
  lowBid ();

  void
  lowBid (const lowBid_type& x);

  // numTrades
  // 
  typedef ::xml_schema::long_ numTrades_type;
  typedef ::xsd::cxx::tree::traits< numTrades_type, char > numTrades_traits;

  const numTrades_type&
  numTrades () const;

  numTrades_type&
  numTrades ();

  void
  numTrades (const numTrades_type& x);

  // open
  // 
  typedef ::xml_schema::double_ open_type;
  typedef ::xsd::cxx::tree::traits< open_type, char, ::xsd::cxx::tree::schema_type::double_ > open_traits;

  const open_type&
  open () const;

  open_type&
  open ();

  void
  open (const open_type& x);

  // openInterest
  // 
  typedef ::xml_schema::long_ openInterest_type;
  typedef ::xsd::cxx::tree::traits< openInterest_type, char > openInterest_traits;

  const openInterest_type&
  openInterest () const;

  openInterest_type&
  openInterest ();

  void
  openInterest (const openInterest_type& x);

  // optionStyle
  // 
  typedef ::xml_schema::string optionStyle_type;
  typedef ::xsd::cxx::tree::traits< optionStyle_type, char > optionStyle_traits;

  const optionStyle_type&
  optionStyle () const;

  optionStyle_type&
  optionStyle ();

  void
  optionStyle (const optionStyle_type& x);

  void
  optionStyle (::std::auto_ptr< optionStyle_type > p);

  // optionUnderlier
  // 
  typedef ::xml_schema::string optionUnderlier_type;
  typedef ::xsd::cxx::tree::traits< optionUnderlier_type, char > optionUnderlier_traits;

  const optionUnderlier_type&
  optionUnderlier () const;

  optionUnderlier_type&
  optionUnderlier ();

  void
  optionUnderlier (const optionUnderlier_type& x);

  void
  optionUnderlier (::std::auto_ptr< optionUnderlier_type > p);

  // prevClose
  // 
  typedef ::xml_schema::double_ prevClose_type;
  typedef ::xsd::cxx::tree::traits< prevClose_type, char, ::xsd::cxx::tree::schema_type::double_ > prevClose_traits;

  const prevClose_type&
  prevClose () const;

  prevClose_type&
  prevClose ();

  void
  prevClose (const prevClose_type& x);

  // prevDayVolume
  // 
  typedef ::xml_schema::long_ prevDayVolume_type;
  typedef ::xsd::cxx::tree::traits< prevDayVolume_type, char > prevDayVolume_traits;

  const prevDayVolume_type&
  prevDayVolume () const;

  prevDayVolume_type&
  prevDayVolume ();

  void
  prevDayVolume (const prevDayVolume_type& x);

  // primaryExchange
  // 
  typedef ::xml_schema::string primaryExchange_type;
  typedef ::xsd::cxx::tree::traits< primaryExchange_type, char > primaryExchange_traits;

  const primaryExchange_type&
  primaryExchange () const;

  primaryExchange_type&
  primaryExchange ();

  void
  primaryExchange (const primaryExchange_type& x);

  void
  primaryExchange (::std::auto_ptr< primaryExchange_type > p);

  // symbolDesc
  // 
  typedef ::xml_schema::string symbolDesc_type;
  typedef ::xsd::cxx::tree::traits< symbolDesc_type, char > symbolDesc_traits;

  const symbolDesc_type&
  symbolDesc () const;

  symbolDesc_type&
  symbolDesc ();

  void
  symbolDesc (const symbolDesc_type& x);

  void
  symbolDesc (::std::auto_ptr< symbolDesc_type > p);

  // todayClose
  // 
  typedef ::xml_schema::double_ todayClose_type;
  typedef ::xsd::cxx::tree::traits< todayClose_type, char, ::xsd::cxx::tree::schema_type::double_ > todayClose_traits;

  const todayClose_type&
  todayClose () const;

  todayClose_type&
  todayClose ();

  void
  todayClose (const todayClose_type& x);

  // totalVolume
  // 
  typedef ::xml_schema::long_ totalVolume_type;
  typedef ::xsd::cxx::tree::traits< totalVolume_type, char > totalVolume_traits;

  const totalVolume_type&
  totalVolume () const;

  totalVolume_type&
  totalVolume ();

  void
  totalVolume (const totalVolume_type& x);

  // upc
  // 
  typedef ::xml_schema::long_ upc_type;
  typedef ::xsd::cxx::tree::traits< upc_type, char > upc_traits;

  const upc_type&
  upc () const;

  upc_type&
  upc ();

  void
  upc (const upc_type& x);

  // volume10Day
  // 
  typedef ::xml_schema::long_ volume10Day_type;
  typedef ::xsd::cxx::tree::traits< volume10Day_type, char > volume10Day_traits;

  const volume10Day_type&
  volume10Day () const;

  volume10Day_type&
  volume10Day ();

  void
  volume10Day (const volume10Day_type& x);

  // Constructors.
  //
  allQuote (const adjNonAdjFlag_type&,
            const annualDividend_type&,
            const ask_type&,
            const askExchange_type&,
            const askSize_type&,
            const askTime_type&,
            const bid_type&,
            const bidExchange_type&,
            const bidSize_type&,
            const bidTime_type&,
            const chgClose_type&,
            const chgClosePrcn_type&,
            const companyName_type&,
            const daysToExpiration_type&,
            const dirLast_type&,
            const dividend_type&,
            const eps_type&,
            const estEarnings_type&,
            const exDivDate_type&,
            const exchgLastTrade_type&,
            const fsi_type&,
            const high_type&,
            const high52_type&,
            const highAsk_type&,
            const highBid_type&,
            const lastTrade_type&,
            const low_type&,
            const low52_type&,
            const lowAsk_type&,
            const lowBid_type&,
            const numTrades_type&,
            const open_type&,
            const openInterest_type&,
            const optionStyle_type&,
            const optionUnderlier_type&,
            const prevClose_type&,
            const prevDayVolume_type&,
            const primaryExchange_type&,
            const symbolDesc_type&,
            const todayClose_type&,
            const totalVolume_type&,
            const upc_type&,
            const volume10Day_type&);

  allQuote (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  allQuote (const allQuote& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual allQuote*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~allQuote ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< adjNonAdjFlag_type > adjNonAdjFlag_;
  ::xsd::cxx::tree::one< annualDividend_type > annualDividend_;
  ::xsd::cxx::tree::one< ask_type > ask_;
  ::xsd::cxx::tree::one< askExchange_type > askExchange_;
  ::xsd::cxx::tree::one< askSize_type > askSize_;
  ::xsd::cxx::tree::one< askTime_type > askTime_;
  ::xsd::cxx::tree::one< bid_type > bid_;
  ::xsd::cxx::tree::one< bidExchange_type > bidExchange_;
  ::xsd::cxx::tree::one< bidSize_type > bidSize_;
  ::xsd::cxx::tree::one< bidTime_type > bidTime_;
  ::xsd::cxx::tree::one< chgClose_type > chgClose_;
  ::xsd::cxx::tree::one< chgClosePrcn_type > chgClosePrcn_;
  ::xsd::cxx::tree::one< companyName_type > companyName_;
  ::xsd::cxx::tree::one< daysToExpiration_type > daysToExpiration_;
  ::xsd::cxx::tree::one< dirLast_type > dirLast_;
  ::xsd::cxx::tree::one< dividend_type > dividend_;
  ::xsd::cxx::tree::one< eps_type > eps_;
  ::xsd::cxx::tree::one< estEarnings_type > estEarnings_;
  ::xsd::cxx::tree::one< exDivDate_type > exDivDate_;
  ::xsd::cxx::tree::one< exchgLastTrade_type > exchgLastTrade_;
  ::xsd::cxx::tree::one< fsi_type > fsi_;
  ::xsd::cxx::tree::one< high_type > high_;
  ::xsd::cxx::tree::one< high52_type > high52_;
  ::xsd::cxx::tree::one< highAsk_type > highAsk_;
  ::xsd::cxx::tree::one< highBid_type > highBid_;
  ::xsd::cxx::tree::one< lastTrade_type > lastTrade_;
  ::xsd::cxx::tree::one< low_type > low_;
  ::xsd::cxx::tree::one< low52_type > low52_;
  ::xsd::cxx::tree::one< lowAsk_type > lowAsk_;
  ::xsd::cxx::tree::one< lowBid_type > lowBid_;
  ::xsd::cxx::tree::one< numTrades_type > numTrades_;
  ::xsd::cxx::tree::one< open_type > open_;
  ::xsd::cxx::tree::one< openInterest_type > openInterest_;
  ::xsd::cxx::tree::one< optionStyle_type > optionStyle_;
  ::xsd::cxx::tree::one< optionUnderlier_type > optionUnderlier_;
  ::xsd::cxx::tree::one< prevClose_type > prevClose_;
  ::xsd::cxx::tree::one< prevDayVolume_type > prevDayVolume_;
  ::xsd::cxx::tree::one< primaryExchange_type > primaryExchange_;
  ::xsd::cxx::tree::one< symbolDesc_type > symbolDesc_;
  ::xsd::cxx::tree::one< todayClose_type > todayClose_;
  ::xsd::cxx::tree::one< totalVolume_type > totalVolume_;
  ::xsd::cxx::tree::one< upc_type > upc_;
  ::xsd::cxx::tree::one< volume10Day_type > volume10Day_;
};

class fundamentalQuote: public ::xml_schema::type
{
  public:
  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_type&
  companyName () const;

  companyName_type&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // eps
  // 
  typedef ::xml_schema::double_ eps_type;
  typedef ::xsd::cxx::tree::traits< eps_type, char, ::xsd::cxx::tree::schema_type::double_ > eps_traits;

  const eps_type&
  eps () const;

  eps_type&
  eps ();

  void
  eps (const eps_type& x);

  // estEarnings
  // 
  typedef ::xml_schema::double_ estEarnings_type;
  typedef ::xsd::cxx::tree::traits< estEarnings_type, char, ::xsd::cxx::tree::schema_type::double_ > estEarnings_traits;

  const estEarnings_type&
  estEarnings () const;

  estEarnings_type&
  estEarnings ();

  void
  estEarnings (const estEarnings_type& x);

  // high52
  // 
  typedef ::xml_schema::double_ high52_type;
  typedef ::xsd::cxx::tree::traits< high52_type, char, ::xsd::cxx::tree::schema_type::double_ > high52_traits;

  const high52_type&
  high52 () const;

  high52_type&
  high52 ();

  void
  high52 (const high52_type& x);

  // lastTrade
  // 
  typedef ::xml_schema::double_ lastTrade_type;
  typedef ::xsd::cxx::tree::traits< lastTrade_type, char, ::xsd::cxx::tree::schema_type::double_ > lastTrade_traits;

  const lastTrade_type&
  lastTrade () const;

  lastTrade_type&
  lastTrade ();

  void
  lastTrade (const lastTrade_type& x);

  // low52
  // 
  typedef ::xml_schema::double_ low52_type;
  typedef ::xsd::cxx::tree::traits< low52_type, char, ::xsd::cxx::tree::schema_type::double_ > low52_traits;

  const low52_type&
  low52 () const;

  low52_type&
  low52 ();

  void
  low52 (const low52_type& x);

  // symbolDesc
  // 
  typedef ::xml_schema::string symbolDesc_type;
  typedef ::xsd::cxx::tree::traits< symbolDesc_type, char > symbolDesc_traits;

  const symbolDesc_type&
  symbolDesc () const;

  symbolDesc_type&
  symbolDesc ();

  void
  symbolDesc (const symbolDesc_type& x);

  void
  symbolDesc (::std::auto_ptr< symbolDesc_type > p);

  // volume10Day
  // 
  typedef ::xml_schema::long_ volume10Day_type;
  typedef ::xsd::cxx::tree::traits< volume10Day_type, char > volume10Day_traits;

  const volume10Day_type&
  volume10Day () const;

  volume10Day_type&
  volume10Day ();

  void
  volume10Day (const volume10Day_type& x);

  // Constructors.
  //
  fundamentalQuote (const companyName_type&,
                    const eps_type&,
                    const estEarnings_type&,
                    const high52_type&,
                    const lastTrade_type&,
                    const low52_type&,
                    const symbolDesc_type&,
                    const volume10Day_type&);

  fundamentalQuote (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  fundamentalQuote (const fundamentalQuote& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual fundamentalQuote*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~fundamentalQuote ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< companyName_type > companyName_;
  ::xsd::cxx::tree::one< eps_type > eps_;
  ::xsd::cxx::tree::one< estEarnings_type > estEarnings_;
  ::xsd::cxx::tree::one< high52_type > high52_;
  ::xsd::cxx::tree::one< lastTrade_type > lastTrade_;
  ::xsd::cxx::tree::one< low52_type > low52_;
  ::xsd::cxx::tree::one< symbolDesc_type > symbolDesc_;
  ::xsd::cxx::tree::one< volume10Day_type > volume10Day_;
};

class intradayQuote: public ::xml_schema::type
{
  public:
  // ask
  // 
  typedef ::xml_schema::double_ ask_type;
  typedef ::xsd::cxx::tree::traits< ask_type, char, ::xsd::cxx::tree::schema_type::double_ > ask_traits;

  const ask_type&
  ask () const;

  ask_type&
  ask ();

  void
  ask (const ask_type& x);

  // bid
  // 
  typedef ::xml_schema::double_ bid_type;
  typedef ::xsd::cxx::tree::traits< bid_type, char, ::xsd::cxx::tree::schema_type::double_ > bid_traits;

  const bid_type&
  bid () const;

  bid_type&
  bid ();

  void
  bid (const bid_type& x);

  // chgClose
  // 
  typedef ::xml_schema::double_ chgClose_type;
  typedef ::xsd::cxx::tree::traits< chgClose_type, char, ::xsd::cxx::tree::schema_type::double_ > chgClose_traits;

  const chgClose_type&
  chgClose () const;

  chgClose_type&
  chgClose ();

  void
  chgClose (const chgClose_type& x);

  // chgClosePrcn
  // 
  typedef ::xml_schema::double_ chgClosePrcn_type;
  typedef ::xsd::cxx::tree::traits< chgClosePrcn_type, char, ::xsd::cxx::tree::schema_type::double_ > chgClosePrcn_traits;

  const chgClosePrcn_type&
  chgClosePrcn () const;

  chgClosePrcn_type&
  chgClosePrcn ();

  void
  chgClosePrcn (const chgClosePrcn_type& x);

  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_type&
  companyName () const;

  companyName_type&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // high
  // 
  typedef ::xml_schema::double_ high_type;
  typedef ::xsd::cxx::tree::traits< high_type, char, ::xsd::cxx::tree::schema_type::double_ > high_traits;

  const high_type&
  high () const;

  high_type&
  high ();

  void
  high (const high_type& x);

  // lastTrade
  // 
  typedef ::xml_schema::double_ lastTrade_type;
  typedef ::xsd::cxx::tree::traits< lastTrade_type, char, ::xsd::cxx::tree::schema_type::double_ > lastTrade_traits;

  const lastTrade_type&
  lastTrade () const;

  lastTrade_type&
  lastTrade ();

  void
  lastTrade (const lastTrade_type& x);

  // low
  // 
  typedef ::xml_schema::double_ low_type;
  typedef ::xsd::cxx::tree::traits< low_type, char, ::xsd::cxx::tree::schema_type::double_ > low_traits;

  const low_type&
  low () const;

  low_type&
  low ();

  void
  low (const low_type& x);

  // totalVolume
  // 
  typedef ::xml_schema::long_ totalVolume_type;
  typedef ::xsd::cxx::tree::traits< totalVolume_type, char > totalVolume_traits;

  const totalVolume_type&
  totalVolume () const;

  totalVolume_type&
  totalVolume ();

  void
  totalVolume (const totalVolume_type& x);

  // Constructors.
  //
  intradayQuote (const ask_type&,
                 const bid_type&,
                 const chgClose_type&,
                 const chgClosePrcn_type&,
                 const companyName_type&,
                 const high_type&,
                 const lastTrade_type&,
                 const low_type&,
                 const totalVolume_type&);

  intradayQuote (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  intradayQuote (const intradayQuote& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual intradayQuote*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~intradayQuote ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ask_type > ask_;
  ::xsd::cxx::tree::one< bid_type > bid_;
  ::xsd::cxx::tree::one< chgClose_type > chgClose_;
  ::xsd::cxx::tree::one< chgClosePrcn_type > chgClosePrcn_;
  ::xsd::cxx::tree::one< companyName_type > companyName_;
  ::xsd::cxx::tree::one< high_type > high_;
  ::xsd::cxx::tree::one< lastTrade_type > lastTrade_;
  ::xsd::cxx::tree::one< low_type > low_;
  ::xsd::cxx::tree::one< totalVolume_type > totalVolume_;
};

class optionQuote: public ::xml_schema::type
{
  public:
  // ask
  // 
  typedef ::xml_schema::double_ ask_type;
  typedef ::xsd::cxx::tree::traits< ask_type, char, ::xsd::cxx::tree::schema_type::double_ > ask_traits;

  const ask_type&
  ask () const;

  ask_type&
  ask ();

  void
  ask (const ask_type& x);

  // askSize
  // 
  typedef ::xml_schema::long_ askSize_type;
  typedef ::xsd::cxx::tree::traits< askSize_type, char > askSize_traits;

  const askSize_type&
  askSize () const;

  askSize_type&
  askSize ();

  void
  askSize (const askSize_type& x);

  // bid
  // 
  typedef ::xml_schema::double_ bid_type;
  typedef ::xsd::cxx::tree::traits< bid_type, char, ::xsd::cxx::tree::schema_type::double_ > bid_traits;

  const bid_type&
  bid () const;

  bid_type&
  bid ();

  void
  bid (const bid_type& x);

  // bidSize
  // 
  typedef ::xml_schema::long_ bidSize_type;
  typedef ::xsd::cxx::tree::traits< bidSize_type, char > bidSize_traits;

  const bidSize_type&
  bidSize () const;

  bidSize_type&
  bidSize ();

  void
  bidSize (const bidSize_type& x);

  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_type&
  companyName () const;

  companyName_type&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // daysToExpiration
  // 
  typedef ::xml_schema::long_ daysToExpiration_type;
  typedef ::xsd::cxx::tree::traits< daysToExpiration_type, char > daysToExpiration_traits;

  const daysToExpiration_type&
  daysToExpiration () const;

  daysToExpiration_type&
  daysToExpiration ();

  void
  daysToExpiration (const daysToExpiration_type& x);

  // lastTrade
  // 
  typedef ::xml_schema::double_ lastTrade_type;
  typedef ::xsd::cxx::tree::traits< lastTrade_type, char, ::xsd::cxx::tree::schema_type::double_ > lastTrade_traits;

  const lastTrade_type&
  lastTrade () const;

  lastTrade_type&
  lastTrade ();

  void
  lastTrade (const lastTrade_type& x);

  // openInterest
  // 
  typedef ::xml_schema::long_ openInterest_type;
  typedef ::xsd::cxx::tree::traits< openInterest_type, char > openInterest_traits;

  const openInterest_type&
  openInterest () const;

  openInterest_type&
  openInterest ();

  void
  openInterest (const openInterest_type& x);

  // Constructors.
  //
  optionQuote (const ask_type&,
               const askSize_type&,
               const bid_type&,
               const bidSize_type&,
               const companyName_type&,
               const daysToExpiration_type&,
               const lastTrade_type&,
               const openInterest_type&);

  optionQuote (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  optionQuote (const optionQuote& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual optionQuote*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~optionQuote ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ask_type > ask_;
  ::xsd::cxx::tree::one< askSize_type > askSize_;
  ::xsd::cxx::tree::one< bid_type > bid_;
  ::xsd::cxx::tree::one< bidSize_type > bidSize_;
  ::xsd::cxx::tree::one< companyName_type > companyName_;
  ::xsd::cxx::tree::one< daysToExpiration_type > daysToExpiration_;
  ::xsd::cxx::tree::one< lastTrade_type > lastTrade_;
  ::xsd::cxx::tree::one< openInterest_type > openInterest_;
};

class week52Quote: public ::xml_schema::type
{
  public:
  // annualDividend
  // 
  typedef ::xml_schema::double_ annualDividend_type;
  typedef ::xsd::cxx::tree::traits< annualDividend_type, char, ::xsd::cxx::tree::schema_type::double_ > annualDividend_traits;

  const annualDividend_type&
  annualDividend () const;

  annualDividend_type&
  annualDividend ();

  void
  annualDividend (const annualDividend_type& x);

  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_type&
  companyName () const;

  companyName_type&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // high52
  // 
  typedef ::xml_schema::double_ high52_type;
  typedef ::xsd::cxx::tree::traits< high52_type, char, ::xsd::cxx::tree::schema_type::double_ > high52_traits;

  const high52_type&
  high52 () const;

  high52_type&
  high52 ();

  void
  high52 (const high52_type& x);

  // lastTrade
  // 
  typedef ::xml_schema::double_ lastTrade_type;
  typedef ::xsd::cxx::tree::traits< lastTrade_type, char, ::xsd::cxx::tree::schema_type::double_ > lastTrade_traits;

  const lastTrade_type&
  lastTrade () const;

  lastTrade_type&
  lastTrade ();

  void
  lastTrade (const lastTrade_type& x);

  // low52
  // 
  typedef ::xml_schema::double_ low52_type;
  typedef ::xsd::cxx::tree::traits< low52_type, char, ::xsd::cxx::tree::schema_type::double_ > low52_traits;

  const low52_type&
  low52 () const;

  low52_type&
  low52 ();

  void
  low52 (const low52_type& x);

  // perf12Months
  // 
  typedef ::xml_schema::double_ perf12Months_type;
  typedef ::xsd::cxx::tree::traits< perf12Months_type, char, ::xsd::cxx::tree::schema_type::double_ > perf12Months_traits;

  const perf12Months_type&
  perf12Months () const;

  perf12Months_type&
  perf12Months ();

  void
  perf12Months (const perf12Months_type& x);

  // prevClose
  // 
  typedef ::xml_schema::double_ prevClose_type;
  typedef ::xsd::cxx::tree::traits< prevClose_type, char, ::xsd::cxx::tree::schema_type::double_ > prevClose_traits;

  const prevClose_type&
  prevClose () const;

  prevClose_type&
  prevClose ();

  void
  prevClose (const prevClose_type& x);

  // symbolDesc
  // 
  typedef ::xml_schema::string symbolDesc_type;
  typedef ::xsd::cxx::tree::traits< symbolDesc_type, char > symbolDesc_traits;

  const symbolDesc_type&
  symbolDesc () const;

  symbolDesc_type&
  symbolDesc ();

  void
  symbolDesc (const symbolDesc_type& x);

  void
  symbolDesc (::std::auto_ptr< symbolDesc_type > p);

  // totalVolume
  // 
  typedef ::xml_schema::long_ totalVolume_type;
  typedef ::xsd::cxx::tree::traits< totalVolume_type, char > totalVolume_traits;

  const totalVolume_type&
  totalVolume () const;

  totalVolume_type&
  totalVolume ();

  void
  totalVolume (const totalVolume_type& x);

  // Constructors.
  //
  week52Quote (const annualDividend_type&,
               const companyName_type&,
               const high52_type&,
               const lastTrade_type&,
               const low52_type&,
               const perf12Months_type&,
               const prevClose_type&,
               const symbolDesc_type&,
               const totalVolume_type&);

  week52Quote (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  week52Quote (const week52Quote& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual week52Quote*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~week52Quote ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< annualDividend_type > annualDividend_;
  ::xsd::cxx::tree::one< companyName_type > companyName_;
  ::xsd::cxx::tree::one< high52_type > high52_;
  ::xsd::cxx::tree::one< lastTrade_type > lastTrade_;
  ::xsd::cxx::tree::one< low52_type > low52_;
  ::xsd::cxx::tree::one< perf12Months_type > perf12Months_;
  ::xsd::cxx::tree::one< prevClose_type > prevClose_;
  ::xsd::cxx::tree::one< symbolDesc_type > symbolDesc_;
  ::xsd::cxx::tree::one< totalVolume_type > totalVolume_;
};

class expirationDate: public ::xml_schema::type
{
  public:
  // day
  // 
  typedef ::xml_schema::int_ day_type;
  typedef ::xsd::cxx::tree::traits< day_type, char > day_traits;

  const day_type&
  day () const;

  day_type&
  day ();

  void
  day (const day_type& x);

  // month
  // 
  typedef ::xml_schema::string month_type;
  typedef ::xsd::cxx::tree::optional< month_type > month_optional;
  typedef ::xsd::cxx::tree::traits< month_type, char > month_traits;

  const month_optional&
  month () const;

  month_optional&
  month ();

  void
  month (const month_type& x);

  void
  month (const month_optional& x);

  void
  month (::std::auto_ptr< month_type > p);

  // year
  // 
  typedef ::xml_schema::int_ year_type;
  typedef ::xsd::cxx::tree::traits< year_type, char > year_traits;

  const year_type&
  year () const;

  year_type&
  year ();

  void
  year (const year_type& x);

  // expiryType
  // 
  typedef ::xml_schema::string expiryType_type;
  typedef ::xsd::cxx::tree::traits< expiryType_type, char > expiryType_traits;

  const expiryType_type&
  expiryType () const;

  expiryType_type&
  expiryType ();

  void
  expiryType (const expiryType_type& x);

  void
  expiryType (::std::auto_ptr< expiryType_type > p);

  // Constructors.
  //
  expirationDate (const day_type&,
                  const year_type&,
                  const expiryType_type&);

  expirationDate (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  expirationDate (const expirationDate& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual expirationDate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~expirationDate ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< day_type > day_;
  month_optional month_;
  ::xsd::cxx::tree::one< year_type > year_;
  ::xsd::cxx::tree::one< expiryType_type > expiryType_;
};

class empty_string: public ::xml_schema::string
{
  public:
  enum value
  {
    empty
  };

  empty_string (value v);

  empty_string (const char* v);

  empty_string (const ::std::string& v);

  empty_string (const ::xml_schema::string& v);

  empty_string (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  empty_string (const empty_string& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual empty_string*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  empty_string&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_empty_string_convert ();
  }

  protected:
  value
  _xsd_empty_string_convert () const;

  public:
  static const char* const _xsd_empty_string_literals_[1];
  static const value _xsd_empty_string_indexes_[1];
};

class integer_or_empty: public ::xml_schema::string
{
  public:

  integer_or_empty (const char* v);

  integer_or_empty (const ::std::string& v);

  integer_or_empty (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  integer_or_empty (const integer_or_empty& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual integer_or_empty*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class optionChainPair: public ::xml_schema::type
{
  public:
  // call
  // 
  typedef ::callOptionChain call_type;
  typedef ::xsd::cxx::tree::sequence< call_type > call_sequence;
  typedef call_sequence::iterator call_iterator;
  typedef call_sequence::const_iterator call_const_iterator;
  typedef ::xsd::cxx::tree::traits< call_type, char > call_traits;

  const call_sequence&
  call () const;

  call_sequence&
  call ();

  void
  call (const call_sequence& s);

  // callCount
  // 
  typedef ::xml_schema::int_ callCount_type;
  typedef ::xsd::cxx::tree::traits< callCount_type, char > callCount_traits;

  const callCount_type&
  callCount () const;

  callCount_type&
  callCount ();

  void
  callCount (const callCount_type& x);

  // pairType
  // 
  typedef ::pairType pairType_type;
  typedef ::xsd::cxx::tree::optional< pairType_type > pairType_optional;
  typedef ::xsd::cxx::tree::traits< pairType_type, char > pairType_traits;

  const pairType_optional&
  pairType () const;

  pairType_optional&
  pairType ();

  void
  pairType (const pairType_type& x);

  void
  pairType (const pairType_optional& x);

  void
  pairType (::std::auto_ptr< pairType_type > p);

  // put
  // 
  typedef ::putOptionChain put_type;
  typedef ::xsd::cxx::tree::sequence< put_type > put_sequence;
  typedef put_sequence::iterator put_iterator;
  typedef put_sequence::const_iterator put_const_iterator;
  typedef ::xsd::cxx::tree::traits< put_type, char > put_traits;

  const put_sequence&
  put () const;

  put_sequence&
  put ();

  void
  put (const put_sequence& s);

  // putCount
  // 
  typedef ::xml_schema::int_ putCount_type;
  typedef ::xsd::cxx::tree::traits< putCount_type, char > putCount_traits;

  const putCount_type&
  putCount () const;

  putCount_type&
  putCount ();

  void
  putCount (const putCount_type& x);

  // Constructors.
  //
  optionChainPair (const callCount_type&,
                   const putCount_type&);

  optionChainPair (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  optionChainPair (const optionChainPair& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual optionChainPair*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~optionChainPair ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  call_sequence call_;
  ::xsd::cxx::tree::one< callCount_type > callCount_;
  pairType_optional pairType_;
  put_sequence put_;
  ::xsd::cxx::tree::one< putCount_type > putCount_;
};

class callOptionChain: public ::xml_schema::type
{
  public:
  // rootSymbol
  // 
  typedef ::xml_schema::string rootSymbol_type;
  typedef ::xsd::cxx::tree::optional< rootSymbol_type > rootSymbol_optional;
  typedef ::xsd::cxx::tree::traits< rootSymbol_type, char > rootSymbol_traits;

  const rootSymbol_optional&
  rootSymbol () const;

  rootSymbol_optional&
  rootSymbol ();

  void
  rootSymbol (const rootSymbol_type& x);

  void
  rootSymbol (const rootSymbol_optional& x);

  void
  rootSymbol (::std::auto_ptr< rootSymbol_type > p);

  // expireDate
  // 
  typedef ::expirationDate expireDate_type;
  typedef ::xsd::cxx::tree::optional< expireDate_type > expireDate_optional;
  typedef ::xsd::cxx::tree::traits< expireDate_type, char > expireDate_traits;

  const expireDate_optional&
  expireDate () const;

  expireDate_optional&
  expireDate ();

  void
  expireDate (const expireDate_type& x);

  void
  expireDate (const expireDate_optional& x);

  void
  expireDate (::std::auto_ptr< expireDate_type > p);

  // product
  // 
  typedef ::productId product_type;
  typedef ::xsd::cxx::tree::optional< product_type > product_optional;
  typedef ::xsd::cxx::tree::traits< product_type, char > product_traits;

  const product_optional&
  product () const;

  product_optional&
  product ();

  void
  product (const product_type& x);

  void
  product (const product_optional& x);

  void
  product (::std::auto_ptr< product_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // Constructors.
  //
  callOptionChain ();

  callOptionChain (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  callOptionChain (const callOptionChain& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual callOptionChain*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~callOptionChain ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  rootSymbol_optional rootSymbol_;
  expireDate_optional expireDate_;
  product_optional product_;
  strikePrice_optional strikePrice_;
};

class putOptionChain: public ::xml_schema::type
{
  public:
  // rootSymbol
  // 
  typedef ::xml_schema::string rootSymbol_type;
  typedef ::xsd::cxx::tree::optional< rootSymbol_type > rootSymbol_optional;
  typedef ::xsd::cxx::tree::traits< rootSymbol_type, char > rootSymbol_traits;

  const rootSymbol_optional&
  rootSymbol () const;

  rootSymbol_optional&
  rootSymbol ();

  void
  rootSymbol (const rootSymbol_type& x);

  void
  rootSymbol (const rootSymbol_optional& x);

  void
  rootSymbol (::std::auto_ptr< rootSymbol_type > p);

  // expireDate
  // 
  typedef ::expirationDate expireDate_type;
  typedef ::xsd::cxx::tree::optional< expireDate_type > expireDate_optional;
  typedef ::xsd::cxx::tree::traits< expireDate_type, char > expireDate_traits;

  const expireDate_optional&
  expireDate () const;

  expireDate_optional&
  expireDate ();

  void
  expireDate (const expireDate_type& x);

  void
  expireDate (const expireDate_optional& x);

  void
  expireDate (::std::auto_ptr< expireDate_type > p);

  // product
  // 
  typedef ::productId product_type;
  typedef ::xsd::cxx::tree::optional< product_type > product_optional;
  typedef ::xsd::cxx::tree::traits< product_type, char > product_traits;

  const product_optional&
  product () const;

  product_optional&
  product ();

  void
  product (const product_type& x);

  void
  product (const product_optional& x);

  void
  product (::std::auto_ptr< product_type > p);

  // strikePrice
  // 
  typedef ::xml_schema::decimal strikePrice_type;
  typedef ::xsd::cxx::tree::optional< strikePrice_type > strikePrice_optional;
  typedef ::xsd::cxx::tree::traits< strikePrice_type, char, ::xsd::cxx::tree::schema_type::decimal > strikePrice_traits;

  const strikePrice_optional&
  strikePrice () const;

  strikePrice_optional&
  strikePrice ();

  void
  strikePrice (const strikePrice_type& x);

  void
  strikePrice (const strikePrice_optional& x);

  // Constructors.
  //
  putOptionChain ();

  putOptionChain (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  putOptionChain (const putOptionChain& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual putOptionChain*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~putOptionChain ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  rootSymbol_optional rootSymbol_;
  expireDate_optional expireDate_;
  product_optional product_;
  strikePrice_optional strikePrice_;
};

class productId: public ::xml_schema::type
{
  public:
  // exchangeCode
  // 
  typedef ::xml_schema::string exchangeCode_type;
  typedef ::xsd::cxx::tree::optional< exchangeCode_type > exchangeCode_optional;
  typedef ::xsd::cxx::tree::traits< exchangeCode_type, char > exchangeCode_traits;

  const exchangeCode_optional&
  exchangeCode () const;

  exchangeCode_optional&
  exchangeCode ();

  void
  exchangeCode (const exchangeCode_type& x);

  void
  exchangeCode (const exchangeCode_optional& x);

  void
  exchangeCode (::std::auto_ptr< exchangeCode_type > p);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // typeCode
  // 
  typedef ::xml_schema::string typeCode_type;
  typedef ::xsd::cxx::tree::optional< typeCode_type > typeCode_optional;
  typedef ::xsd::cxx::tree::traits< typeCode_type, char > typeCode_traits;

  const typeCode_optional&
  typeCode () const;

  typeCode_optional&
  typeCode ();

  void
  typeCode (const typeCode_type& x);

  void
  typeCode (const typeCode_optional& x);

  void
  typeCode (::std::auto_ptr< typeCode_type > p);

  // Constructors.
  //
  productId ();

  productId (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  productId (const productId& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual productId*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~productId ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  exchangeCode_optional exchangeCode_;
  symbol_optional symbol_;
  typeCode_optional typeCode_;
};

class product: public ::xml_schema::type
{
  public:
  // companyName
  // 
  typedef ::xml_schema::string companyName_type;
  typedef ::xsd::cxx::tree::optional< companyName_type > companyName_optional;
  typedef ::xsd::cxx::tree::traits< companyName_type, char > companyName_traits;

  const companyName_optional&
  companyName () const;

  companyName_optional&
  companyName ();

  void
  companyName (const companyName_type& x);

  void
  companyName (const companyName_optional& x);

  void
  companyName (::std::auto_ptr< companyName_type > p);

  // exchange
  // 
  typedef ::xml_schema::string exchange_type;
  typedef ::xsd::cxx::tree::optional< exchange_type > exchange_optional;
  typedef ::xsd::cxx::tree::traits< exchange_type, char > exchange_traits;

  const exchange_optional&
  exchange () const;

  exchange_optional&
  exchange ();

  void
  exchange (const exchange_type& x);

  void
  exchange (const exchange_optional& x);

  void
  exchange (::std::auto_ptr< exchange_type > p);

  // securityType
  // 
  typedef ::securityType securityType_type;
  typedef ::xsd::cxx::tree::optional< securityType_type > securityType_optional;
  typedef ::xsd::cxx::tree::traits< securityType_type, char > securityType_traits;

  const securityType_optional&
  securityType () const;

  securityType_optional&
  securityType ();

  void
  securityType (const securityType_type& x);

  void
  securityType (const securityType_optional& x);

  void
  securityType (::std::auto_ptr< securityType_type > p);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // Constructors.
  //
  product ();

  product (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  product (const product& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual product*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~product ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  companyName_optional companyName_;
  exchange_optional exchange_;
  securityType_optional securityType_;
  symbol_optional symbol_;
};

class marketIndex: public ::xml_schema::type
{
  public:
  // currentPrice
  // 
  typedef ::xml_schema::decimal currentPrice_type;
  typedef ::xsd::cxx::tree::optional< currentPrice_type > currentPrice_optional;
  typedef ::xsd::cxx::tree::traits< currentPrice_type, char, ::xsd::cxx::tree::schema_type::decimal > currentPrice_traits;

  const currentPrice_optional&
  currentPrice () const;

  currentPrice_optional&
  currentPrice ();

  void
  currentPrice (const currentPrice_type& x);

  void
  currentPrice (const currentPrice_optional& x);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // percentChange
  // 
  typedef ::xml_schema::decimal percentChange_type;
  typedef ::xsd::cxx::tree::optional< percentChange_type > percentChange_optional;
  typedef ::xsd::cxx::tree::traits< percentChange_type, char, ::xsd::cxx::tree::schema_type::decimal > percentChange_traits;

  const percentChange_optional&
  percentChange () const;

  percentChange_optional&
  percentChange ();

  void
  percentChange (const percentChange_type& x);

  void
  percentChange (const percentChange_optional& x);

  // priceChange
  // 
  typedef ::xml_schema::decimal priceChange_type;
  typedef ::xsd::cxx::tree::optional< priceChange_type > priceChange_optional;
  typedef ::xsd::cxx::tree::traits< priceChange_type, char, ::xsd::cxx::tree::schema_type::decimal > priceChange_traits;

  const priceChange_optional&
  priceChange () const;

  priceChange_optional&
  priceChange ();

  void
  priceChange (const priceChange_type& x);

  void
  priceChange (const priceChange_optional& x);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // Constructors.
  //
  marketIndex ();

  marketIndex (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  marketIndex (const marketIndex& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual marketIndex*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~marketIndex ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  currentPrice_optional currentPrice_;
  description_optional description_;
  percentChange_optional percentChange_;
  priceChange_optional priceChange_;
  symbol_optional symbol_;
};

class pairType: public ::xml_schema::string
{
  public:
  enum value
  {
    CALLONLY,
    PUTONLY,
    SPREADS,
    CALLPUT
  };

  pairType (value v);

  pairType (const char* v);

  pairType (const ::std::string& v);

  pairType (const ::xml_schema::string& v);

  pairType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  pairType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  pairType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  pairType (const pairType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual pairType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  pairType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_pairType_convert ();
  }

  protected:
  value
  _xsd_pairType_convert () const;

  public:
  static const char* const _xsd_pairType_literals_[4];
  static const value _xsd_pairType_indexes_[4];
};

class securityType: public ::xml_schema::string
{
  public:
  enum value
  {
    EQ,
    ETF,
    MF,
    INDX
  };

  securityType (value v);

  securityType (const char* v);

  securityType (const ::std::string& v);

  securityType (const ::xml_schema::string& v);

  securityType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  securityType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  securityType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  securityType (const securityType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual securityType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  securityType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_securityType_convert ();
  }

  protected:
  value
  _xsd_securityType_convert () const;

  public:
  static const char* const _xsd_securityType_literals_[4];
  static const value _xsd_securityType_indexes_[4];
};

class QuoteRequest: public ::xml_schema::type
{
  public:
  // symbolList
  // 
  typedef ::symbolList symbolList_type;
  typedef ::xsd::cxx::tree::traits< symbolList_type, char > symbolList_traits;

  const symbolList_type&
  symbolList () const;

  symbolList_type&
  symbolList ();

  void
  symbolList (const symbolList_type& x);

  void
  symbolList (::std::auto_ptr< symbolList_type > p);

  // detailFlag
  // 
  typedef ::detailFlag detailFlag_type;
  typedef ::xsd::cxx::tree::optional< detailFlag_type > detailFlag_optional;
  typedef ::xsd::cxx::tree::traits< detailFlag_type, char > detailFlag_traits;

  const detailFlag_optional&
  detailFlag () const;

  detailFlag_optional&
  detailFlag ();

  void
  detailFlag (const detailFlag_type& x);

  void
  detailFlag (const detailFlag_optional& x);

  void
  detailFlag (::std::auto_ptr< detailFlag_type > p);

  // Constructors.
  //
  QuoteRequest (const symbolList_type&);

  QuoteRequest (::std::auto_ptr< symbolList_type >&);

  QuoteRequest (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  QuoteRequest (const QuoteRequest& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual QuoteRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~QuoteRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< symbolList_type > symbolList_;
  detailFlag_optional detailFlag_;
};

class QuoteResponse: public ::xml_schema::type
{
  public:
  // QuoteData
  // 
  typedef ::quoteData QuoteData_type;
  typedef ::xsd::cxx::tree::sequence< QuoteData_type > QuoteData_sequence;
  typedef QuoteData_sequence::iterator QuoteData_iterator;
  typedef QuoteData_sequence::const_iterator QuoteData_const_iterator;
  typedef ::xsd::cxx::tree::traits< QuoteData_type, char > QuoteData_traits;

  const QuoteData_sequence&
  QuoteData () const;

  QuoteData_sequence&
  QuoteData ();

  void
  QuoteData (const QuoteData_sequence& s);

  // Constructors.
  //
  QuoteResponse ();

  QuoteResponse (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  QuoteResponse (const QuoteResponse& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual QuoteResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~QuoteResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  QuoteData_sequence QuoteData_;
};

class OptionExpireDateGetRequest: public ::xml_schema::type
{
  public:
  // underlier
  // 
  typedef ::xml_schema::string underlier_type;
  typedef ::xsd::cxx::tree::traits< underlier_type, char > underlier_traits;

  const underlier_type&
  underlier () const;

  underlier_type&
  underlier ();

  void
  underlier (const underlier_type& x);

  void
  underlier (::std::auto_ptr< underlier_type > p);

  // expiryType
  // 
  typedef ::expiryType expiryType_type;
  typedef ::xsd::cxx::tree::optional< expiryType_type > expiryType_optional;
  typedef ::xsd::cxx::tree::traits< expiryType_type, char > expiryType_traits;

  const expiryType_optional&
  expiryType () const;

  expiryType_optional&
  expiryType ();

  void
  expiryType (const expiryType_type& x);

  void
  expiryType (const expiryType_optional& x);

  void
  expiryType (::std::auto_ptr< expiryType_type > p);

  // Constructors.
  //
  OptionExpireDateGetRequest (const underlier_type&);

  OptionExpireDateGetRequest (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  OptionExpireDateGetRequest (const OptionExpireDateGetRequest& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual OptionExpireDateGetRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionExpireDateGetRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< underlier_type > underlier_;
  expiryType_optional expiryType_;
};

class OptionExpireDateGetResponse: public ::xml_schema::type
{
  public:
  // ExpirationDate
  // 
  typedef ::expirationDate ExpirationDate_type;
  typedef ::xsd::cxx::tree::sequence< ExpirationDate_type > ExpirationDate_sequence;
  typedef ExpirationDate_sequence::iterator ExpirationDate_iterator;
  typedef ExpirationDate_sequence::const_iterator ExpirationDate_const_iterator;
  typedef ::xsd::cxx::tree::traits< ExpirationDate_type, char > ExpirationDate_traits;

  const ExpirationDate_sequence&
  ExpirationDate () const;

  ExpirationDate_sequence&
  ExpirationDate ();

  void
  ExpirationDate (const ExpirationDate_sequence& s);

  // Constructors.
  //
  OptionExpireDateGetResponse ();

  OptionExpireDateGetResponse (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  OptionExpireDateGetResponse (const OptionExpireDateGetResponse& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual OptionExpireDateGetResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionExpireDateGetResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ExpirationDate_sequence ExpirationDate_;
};

class OptionChainRequest: public ::xml_schema::type
{
  public:
  // expirationMonth
  // 
  typedef ::integer_or_empty expirationMonth_type;
  typedef ::xsd::cxx::tree::traits< expirationMonth_type, char > expirationMonth_traits;

  const expirationMonth_type&
  expirationMonth () const;

  expirationMonth_type&
  expirationMonth ();

  void
  expirationMonth (const expirationMonth_type& x);

  void
  expirationMonth (::std::auto_ptr< expirationMonth_type > p);

  // expirationYear
  // 
  typedef ::integer_or_empty expirationYear_type;
  typedef ::xsd::cxx::tree::traits< expirationYear_type, char > expirationYear_traits;

  const expirationYear_type&
  expirationYear () const;

  expirationYear_type&
  expirationYear ();

  void
  expirationYear (const expirationYear_type& x);

  void
  expirationYear (::std::auto_ptr< expirationYear_type > p);

  // expirationDay
  // 
  typedef ::integer_or_empty expirationDay_type;
  typedef ::xsd::cxx::tree::traits< expirationDay_type, char > expirationDay_traits;

  const expirationDay_type&
  expirationDay () const;

  expirationDay_type&
  expirationDay ();

  void
  expirationDay (const expirationDay_type& x);

  void
  expirationDay (::std::auto_ptr< expirationDay_type > p);

  // chainType
  // 
  typedef ::chainType chainType_type;
  typedef ::xsd::cxx::tree::traits< chainType_type, char > chainType_traits;

  const chainType_type&
  chainType () const;

  chainType_type&
  chainType ();

  void
  chainType (const chainType_type& x);

  void
  chainType (::std::auto_ptr< chainType_type > p);

  // skipAdjusted
  // 
  typedef ::skipAdjusted skipAdjusted_type;
  typedef ::xsd::cxx::tree::optional< skipAdjusted_type > skipAdjusted_optional;
  typedef ::xsd::cxx::tree::traits< skipAdjusted_type, char > skipAdjusted_traits;

  const skipAdjusted_optional&
  skipAdjusted () const;

  skipAdjusted_optional&
  skipAdjusted ();

  void
  skipAdjusted (const skipAdjusted_type& x);

  void
  skipAdjusted (const skipAdjusted_optional& x);

  void
  skipAdjusted (::std::auto_ptr< skipAdjusted_type > p);

  // underlier
  // 
  typedef ::xml_schema::string underlier_type;
  typedef ::xsd::cxx::tree::traits< underlier_type, char > underlier_traits;

  const underlier_type&
  underlier () const;

  underlier_type&
  underlier ();

  void
  underlier (const underlier_type& x);

  void
  underlier (::std::auto_ptr< underlier_type > p);

  // Constructors.
  //
  OptionChainRequest (const expirationMonth_type&,
                      const expirationYear_type&,
                      const expirationDay_type&,
                      const chainType_type&,
                      const underlier_type&);

  OptionChainRequest (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  OptionChainRequest (const OptionChainRequest& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual OptionChainRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionChainRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< expirationMonth_type > expirationMonth_;
  ::xsd::cxx::tree::one< expirationYear_type > expirationYear_;
  ::xsd::cxx::tree::one< expirationDay_type > expirationDay_;
  ::xsd::cxx::tree::one< chainType_type > chainType_;
  skipAdjusted_optional skipAdjusted_;
  ::xsd::cxx::tree::one< underlier_type > underlier_;
};

class OptionChainResponse: public ::xml_schema::type
{
  public:
  // optionPairCount
  // 
  typedef ::xml_schema::int_ optionPairCount_type;
  typedef ::xsd::cxx::tree::traits< optionPairCount_type, char > optionPairCount_traits;

  const optionPairCount_type&
  optionPairCount () const;

  optionPairCount_type&
  optionPairCount ();

  void
  optionPairCount (const optionPairCount_type& x);

  // optionPairs
  // 
  typedef ::optionChainPair optionPairs_type;
  typedef ::xsd::cxx::tree::sequence< optionPairs_type > optionPairs_sequence;
  typedef optionPairs_sequence::iterator optionPairs_iterator;
  typedef optionPairs_sequence::const_iterator optionPairs_const_iterator;
  typedef ::xsd::cxx::tree::traits< optionPairs_type, char > optionPairs_traits;

  const optionPairs_sequence&
  optionPairs () const;

  optionPairs_sequence&
  optionPairs ();

  void
  optionPairs (const optionPairs_sequence& s);

  // symbol
  // 
  typedef ::xml_schema::string symbol_type;
  typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
  typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

  const symbol_optional&
  symbol () const;

  symbol_optional&
  symbol ();

  void
  symbol (const symbol_type& x);

  void
  symbol (const symbol_optional& x);

  void
  symbol (::std::auto_ptr< symbol_type > p);

  // Constructors.
  //
  OptionChainResponse (const optionPairCount_type&);

  OptionChainResponse (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  OptionChainResponse (const OptionChainResponse& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual OptionChainResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~OptionChainResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< optionPairCount_type > optionPairCount_;
  optionPairs_sequence optionPairs_;
  symbol_optional symbol_;
};

class ProductLookupRequest: public ::xml_schema::type
{
  public:
  // company
  // 
  typedef ::xml_schema::string company_type;
  typedef ::xsd::cxx::tree::traits< company_type, char > company_traits;

  const company_type&
  company () const;

  company_type&
  company ();

  void
  company (const company_type& x);

  void
  company (::std::auto_ptr< company_type > p);

  // type
  // 
  typedef ::type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  ProductLookupRequest (const company_type&,
                        const type_type&);

  ProductLookupRequest (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ProductLookupRequest (const ProductLookupRequest& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ProductLookupRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProductLookupRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< company_type > company_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class ProductLookupResponse: public ::xml_schema::type
{
  public:
  // Product
  // 
  typedef ::product Product_type;
  typedef ::xsd::cxx::tree::sequence< Product_type > Product_sequence;
  typedef Product_sequence::iterator Product_iterator;
  typedef Product_sequence::const_iterator Product_const_iterator;
  typedef ::xsd::cxx::tree::traits< Product_type, char > Product_traits;

  const Product_sequence&
  Product () const;

  Product_sequence&
  Product ();

  void
  Product (const Product_sequence& s);

  // Constructors.
  //
  ProductLookupResponse ();

  ProductLookupResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ProductLookupResponse (const ProductLookupResponse& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual ProductLookupResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ProductLookupResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Product_sequence Product_;
};

class MarketIndicesRequest: public ::xml_schema::type
{
  public:
  // indexSymbol
  // 
  typedef ::xml_schema::string indexSymbol_type;
  typedef ::xsd::cxx::tree::optional< indexSymbol_type > indexSymbol_optional;
  typedef ::xsd::cxx::tree::traits< indexSymbol_type, char > indexSymbol_traits;

  const indexSymbol_optional&
  indexSymbol () const;

  indexSymbol_optional&
  indexSymbol ();

  void
  indexSymbol (const indexSymbol_type& x);

  void
  indexSymbol (const indexSymbol_optional& x);

  void
  indexSymbol (::std::auto_ptr< indexSymbol_type > p);

  // Constructors.
  //
  MarketIndicesRequest ();

  MarketIndicesRequest (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  MarketIndicesRequest (const MarketIndicesRequest& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual MarketIndicesRequest*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MarketIndicesRequest ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  indexSymbol_optional indexSymbol_;
};

class MarketIndicesResponse: public ::xml_schema::type
{
  public:
  // indexCount
  // 
  typedef ::xml_schema::int_ indexCount_type;
  typedef ::xsd::cxx::tree::traits< indexCount_type, char > indexCount_traits;

  const indexCount_type&
  indexCount () const;

  indexCount_type&
  indexCount ();

  void
  indexCount (const indexCount_type& x);

  // marketIndicesList
  // 
  typedef ::marketIndex marketIndicesList_type;
  typedef ::xsd::cxx::tree::sequence< marketIndicesList_type > marketIndicesList_sequence;
  typedef marketIndicesList_sequence::iterator marketIndicesList_iterator;
  typedef marketIndicesList_sequence::const_iterator marketIndicesList_const_iterator;
  typedef ::xsd::cxx::tree::traits< marketIndicesList_type, char > marketIndicesList_traits;

  const marketIndicesList_sequence&
  marketIndicesList () const;

  marketIndicesList_sequence&
  marketIndicesList ();

  void
  marketIndicesList (const marketIndicesList_sequence& s);

  // Constructors.
  //
  MarketIndicesResponse (const indexCount_type&);

  MarketIndicesResponse (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  MarketIndicesResponse (const MarketIndicesResponse& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual MarketIndicesResponse*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~MarketIndicesResponse ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< indexCount_type > indexCount_;
  marketIndicesList_sequence marketIndicesList_;
};

class Error: public ::xml_schema::type
{
  public:
  // ErrorCode
  // 
  typedef ::xml_schema::int_ ErrorCode_type;
  typedef ::xsd::cxx::tree::traits< ErrorCode_type, char > ErrorCode_traits;

  const ErrorCode_type&
  ErrorCode () const;

  ErrorCode_type&
  ErrorCode ();

  void
  ErrorCode (const ErrorCode_type& x);

  // ErrorMessage
  // 
  typedef ::xml_schema::string ErrorMessage_type;
  typedef ::xsd::cxx::tree::traits< ErrorMessage_type, char > ErrorMessage_traits;

  const ErrorMessage_type&
  ErrorMessage () const;

  ErrorMessage_type&
  ErrorMessage ();

  void
  ErrorMessage (const ErrorMessage_type& x);

  void
  ErrorMessage (::std::auto_ptr< ErrorMessage_type > p);

  // httpCode
  // 
  typedef ::xml_schema::int_ httpCode_type;
  typedef ::xsd::cxx::tree::optional< httpCode_type > httpCode_optional;
  typedef ::xsd::cxx::tree::traits< httpCode_type, char > httpCode_traits;

  const httpCode_optional&
  httpCode () const;

  httpCode_optional&
  httpCode ();

  void
  httpCode (const httpCode_type& x);

  void
  httpCode (const httpCode_optional& x);

  // Constructors.
  //
  Error (const ErrorCode_type&,
         const ErrorMessage_type&);

  Error (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Error (const Error& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Error*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Error ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ErrorCode_type > ErrorCode_;
  ::xsd::cxx::tree::one< ErrorMessage_type > ErrorMessage_;
  httpCode_optional httpCode_;
};

class detailFlag: public ::xml_schema::string
{
  public:
  enum value
  {
    ALL,
    FUNDAMENTAL,
    INTRADAY,
    OPTIONS,
    WEEK_52
  };

  detailFlag (value v);

  detailFlag (const char* v);

  detailFlag (const ::std::string& v);

  detailFlag (const ::xml_schema::string& v);

  detailFlag (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  detailFlag (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  detailFlag (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  detailFlag (const detailFlag& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual detailFlag*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  detailFlag&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_detailFlag_convert ();
  }

  protected:
  value
  _xsd_detailFlag_convert () const;

  public:
  static const char* const _xsd_detailFlag_literals_[5];
  static const value _xsd_detailFlag_indexes_[5];
};

class expiryType: public ::xml_schema::string
{
  public:
  enum value
  {
    DAILY,
    WEEKLY,
    QUATERLY,
    MONTHLY,
    VIX,
    ALL
  };

  expiryType (value v);

  expiryType (const char* v);

  expiryType (const ::std::string& v);

  expiryType (const ::xml_schema::string& v);

  expiryType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  expiryType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  expiryType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  expiryType (const expiryType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual expiryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  expiryType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_expiryType_convert ();
  }

  protected:
  value
  _xsd_expiryType_convert () const;

  public:
  static const char* const _xsd_expiryType_literals_[6];
  static const value _xsd_expiryType_indexes_[6];
};

class chainType: public ::xml_schema::string
{
  public:
  enum value
  {
    CALLPUT,
    CALL,
    PUT
  };

  chainType (value v);

  chainType (const char* v);

  chainType (const ::std::string& v);

  chainType (const ::xml_schema::string& v);

  chainType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  chainType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  chainType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  chainType (const chainType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual chainType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  chainType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_chainType_convert ();
  }

  protected:
  value
  _xsd_chainType_convert () const;

  public:
  static const char* const _xsd_chainType_literals_[3];
  static const value _xsd_chainType_indexes_[3];
};

class skipAdjusted: public ::xml_schema::string
{
  public:
  enum value
  {
    false_,
    true_
  };

  skipAdjusted (value v);

  skipAdjusted (const char* v);

  skipAdjusted (const ::std::string& v);

  skipAdjusted (const ::xml_schema::string& v);

  skipAdjusted (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  skipAdjusted (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  skipAdjusted (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  skipAdjusted (const skipAdjusted& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual skipAdjusted*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  skipAdjusted&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_skipAdjusted_convert ();
  }

  protected:
  value
  _xsd_skipAdjusted_convert () const;

  public:
  static const char* const _xsd_skipAdjusted_literals_[2];
  static const value _xsd_skipAdjusted_indexes_[2];
};

class type: public ::xml_schema::string
{
  public:
  enum value
  {
    EQ,
    ETF,
    MF,
    INDX
  };

  type (value v);

  type (const char* v);

  type (const ::std::string& v);

  type (const ::xml_schema::string& v);

  type (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const type& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type_convert ();
  }

  protected:
  value
  _xsd_type_convert () const;

  public:
  static const char* const _xsd_type_literals_[4];
  static const value _xsd_type_indexes_[4];
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteRequest >
QuoteRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::QuoteResponse >
QuoteResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetRequest >
OptionExpireDateGetRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionExpireDateGetResponse >
OptionExpireDateGetResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainRequest >
OptionChainRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::OptionChainResponse >
OptionChainResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupRequest >
ProductLookupRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ProductLookupResponse >
ProductLookupResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesRequest >
MarketIndicesRequest_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MarketIndicesResponse >
MarketIndicesResponse_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Error >
Error_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Error >
Error_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCHEMA_FILES_MARKET_SRV_HXX
